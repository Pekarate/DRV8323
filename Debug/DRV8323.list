
DRV8323.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08002e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002e44  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d145  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a40  00000000  00000000  0002d1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a37  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016d6  00000000  00000000  00030317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eef7  00000000  00000000  000319ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000776e6  00000000  00000000  000408e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f10  00000000  00000000  000b7fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000baedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002de0 	.word	0x08002de0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002de0 	.word	0x08002de0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb3c 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f809 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f968 	bl	8000500 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000230:	f000 f842 	bl	80002b8 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000234:	f000 f87e 	bl	8000334 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8000238:	f000 f932 	bl	80004a0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x1c>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b093      	sub	sp, #76	; 0x4c
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	2414      	movs	r4, #20
 8000246:	193b      	adds	r3, r7, r4
 8000248:	0018      	movs	r0, r3
 800024a:	2334      	movs	r3, #52	; 0x34
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f002 fd9a 	bl	8002d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	0018      	movs	r0, r3
 8000258:	2310      	movs	r3, #16
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 fd93 	bl	8002d88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	2220      	movs	r2, #32
 8000266:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2201      	movs	r2, #1
 800026c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2200      	movs	r2, #0
 8000272:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fdc0 	bl	8000dfc <HAL_RCC_OscConfig>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000280:	f000 f9a4 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2207      	movs	r2, #7
 8000288:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2203      	movs	r2, #3
 800028e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2101      	movs	r1, #1
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 f931 	bl	8001508 <HAL_RCC_ClockConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002aa:	f000 f98f 	bl	80005cc <Error_Handler>
  }
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b013      	add	sp, #76	; 0x4c
 80002b4:	bd90      	pop	{r4, r7, pc}
	...

080002b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_SPI1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <MX_SPI1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_SPI1_Init+0x74>)
 80002c4:	2282      	movs	r2, #130	; 0x82
 80002c6:	0052      	lsls	r2, r2, #1
 80002c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_SPI1_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_SPI1_Init+0x74>)
 80002d2:	22c0      	movs	r2, #192	; 0xc0
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_SPI1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_SPI1_Init+0x74>)
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	02d2      	lsls	r2, r2, #11
 80002ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_SPI1_Init+0x74>)
 80002ee:	2218      	movs	r2, #24
 80002f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_SPI1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_SPI1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_SPI1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_SPI1_Init+0x74>)
 8000306:	2207      	movs	r2, #7
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_SPI1_Init+0x74>)
 8000312:	2208      	movs	r2, #8
 8000314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <MX_SPI1_Init+0x74>)
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fa63 	bl	80017e4 <HAL_SPI_Init>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f953 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000028 	.word	0x20000028
 8000330:	40013000 	.word	0x40013000

08000334 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b096      	sub	sp, #88	; 0x58
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800033a:	2348      	movs	r3, #72	; 0x48
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2310      	movs	r3, #16
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fd1f 	bl	8002d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034a:	2340      	movs	r3, #64	; 0x40
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2308      	movs	r3, #8
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fd17 	bl	8002d88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800035a:	2324      	movs	r3, #36	; 0x24
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	231c      	movs	r3, #28
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f002 fd0f 	bl	8002d88 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	2320      	movs	r3, #32
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fd08 	bl	8002d88 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000378:	4b46      	ldr	r3, [pc, #280]	; (8000494 <MX_TIM15_Init+0x160>)
 800037a:	4a47      	ldr	r2, [pc, #284]	; (8000498 <MX_TIM15_Init+0x164>)
 800037c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 47;
 800037e:	4b45      	ldr	r3, [pc, #276]	; (8000494 <MX_TIM15_Init+0x160>)
 8000380:	222f      	movs	r2, #47	; 0x2f
 8000382:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000384:	4b43      	ldr	r3, [pc, #268]	; (8000494 <MX_TIM15_Init+0x160>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800038a:	4b42      	ldr	r3, [pc, #264]	; (8000494 <MX_TIM15_Init+0x160>)
 800038c:	4a43      	ldr	r2, [pc, #268]	; (800049c <MX_TIM15_Init+0x168>)
 800038e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000390:	4b40      	ldr	r3, [pc, #256]	; (8000494 <MX_TIM15_Init+0x160>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000396:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <MX_TIM15_Init+0x160>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039c:	4b3d      	ldr	r3, [pc, #244]	; (8000494 <MX_TIM15_Init+0x160>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <MX_TIM15_Init+0x160>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fad5 	bl	8001954 <HAL_TIM_Base_Init>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80003ae:	f000 f90d 	bl	80005cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b2:	2148      	movs	r1, #72	; 0x48
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2280      	movs	r2, #128	; 0x80
 80003b8:	0152      	lsls	r2, r2, #5
 80003ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80003bc:	187a      	adds	r2, r7, r1
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <MX_TIM15_Init+0x160>)
 80003c0:	0011      	movs	r1, r2
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fc34 	bl	8001c30 <HAL_TIM_ConfigClockSource>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80003cc:	f000 f8fe 	bl	80005cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80003d0:	4b30      	ldr	r3, [pc, #192]	; (8000494 <MX_TIM15_Init+0x160>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fb0e 	bl	80019f4 <HAL_TIM_PWM_Init>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80003dc:	f000 f8f6 	bl	80005cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80003ee:	187a      	adds	r2, r7, r1
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <MX_TIM15_Init+0x160>)
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 f805 	bl	8002404 <HAL_TIMEx_MasterConfigSynchronization>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80003fe:	f000 f8e5 	bl	80005cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000402:	2124      	movs	r1, #36	; 0x24
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2260      	movs	r2, #96	; 0x60
 8000408:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042e:	1879      	adds	r1, r7, r1
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_TIM15_Init+0x160>)
 8000432:	2200      	movs	r2, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fb35 	bl	8001aa4 <HAL_TIM_PWM_ConfigChannel>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800043e:	f000 f8c5 	bl	80005cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	0192      	lsls	r2, r2, #6
 8000466:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800046e:	1d3a      	adds	r2, r7, #4
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_TIM15_Init+0x160>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f002 f823 	bl	80024c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 800047e:	f000 f8a5 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <MX_TIM15_Init+0x160>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 f937 	bl	80006f8 <HAL_TIM_MspPostInit>

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b016      	add	sp, #88	; 0x58
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	2000008c 	.word	0x2000008c
 8000498:	40014000 	.word	0x40014000
 800049c:	0000ffff 	.word	0x0000ffff

080004a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <MX_USART3_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004ac:	22e1      	movs	r2, #225	; 0xe1
 80004ae:	0252      	lsls	r2, r2, #9
 80004b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <MX_USART3_UART_Init+0x58>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f849 	bl	800257c <HAL_UART_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f86d 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000d4 	.word	0x200000d4
 80004fc:	40004800 	.word	0x40004800

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b08b      	sub	sp, #44	; 0x2c
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	2414      	movs	r4, #20
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f002 fc39 	bl	8002d88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	03c9      	lsls	r1, r1, #15
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	03db      	lsls	r3, r3, #15
 800052c:	4013      	ands	r3, r2
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000550:	695a      	ldr	r2, [r3, #20]
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0309      	lsls	r1, r1, #12
 8000558:	430a      	orrs	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	031b      	lsls	r3, r3, #12
 8000564:	4013      	ands	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0349      	lsls	r1, r1, #13
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	035b      	lsls	r3, r3, #13
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DRV_BRAKE_Pin|DRV_ENABLE_Pin|DRV_DIR_Pin, GPIO_PIN_RESET);
 8000586:	2382      	movs	r3, #130	; 0x82
 8000588:	33ff      	adds	r3, #255	; 0xff
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <MX_GPIO_Init+0xc8>)
 800058c:	2200      	movs	r2, #0
 800058e:	0019      	movs	r1, r3
 8000590:	f000 fc16 	bl	8000dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV_BRAKE_Pin DRV_ENABLE_Pin DRV_DIR_Pin */
  GPIO_InitStruct.Pin = DRV_BRAKE_Pin|DRV_ENABLE_Pin|DRV_DIR_Pin;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2282      	movs	r2, #130	; 0x82
 8000598:	32ff      	adds	r2, #255	; 0xff
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2201      	movs	r2, #1
 80005a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <MX_GPIO_Init+0xc8>)
 80005b2:	0019      	movs	r1, r3
 80005b4:	0010      	movs	r0, r2
 80005b6:	f000 fa8b 	bl	8000ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b00b      	add	sp, #44	; 0x2c
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000c00 	.word	0x48000c00

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	619a      	str	r2, [r3, #24]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	2201      	movs	r2, #1
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0549      	lsls	r1, r1, #21
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_MspInit+0x44>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	055b      	lsls	r3, r3, #21
 800060c:	4013      	ands	r3, r2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b08b      	sub	sp, #44	; 0x2c
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	2414      	movs	r4, #20
 800062a:	193b      	adds	r3, r7, r4
 800062c:	0018      	movs	r0, r3
 800062e:	2314      	movs	r3, #20
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 fba8 	bl	8002d88 <memset>
  if(hspi->Instance==SPI1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <HAL_SPI_MspInit+0x90>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d132      	bne.n	80006a8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_SPI_MspInit+0x94>)
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_SPI_MspInit+0x94>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0149      	lsls	r1, r1, #5
 800064c:	430a      	orrs	r2, r1
 800064e:	619a      	str	r2, [r3, #24]
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_SPI_MspInit+0x94>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	015b      	lsls	r3, r3, #5
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_SPI_MspInit+0x94>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <HAL_SPI_MspInit+0x94>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0289      	lsls	r1, r1, #10
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_SPI_MspInit+0x94>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	029b      	lsls	r3, r3, #10
 8000674:	4013      	ands	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800067a:	0021      	movs	r1, r4
 800067c:	187b      	adds	r3, r7, r1
 800067e:	22f0      	movs	r2, #240	; 0xf0
 8000680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2202      	movs	r2, #2
 8000686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2203      	movs	r2, #3
 8000692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	187a      	adds	r2, r7, r1
 800069c:	2390      	movs	r3, #144	; 0x90
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa14 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b00b      	add	sp, #44	; 0x2c
 80006ae:	bd90      	pop	{r4, r7, pc}
 80006b0:	40013000 	.word	0x40013000
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_TIM_Base_MspInit+0x38>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10d      	bne.n	80006e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006cc:	699a      	ldr	r2, [r3, #24]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0249      	lsls	r1, r1, #9
 80006d4:	430a      	orrs	r2, r1
 80006d6:	619a      	str	r2, [r3, #24]
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_TIM_Base_MspInit+0x3c>)
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	025b      	lsls	r3, r3, #9
 80006e0:	4013      	ands	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b004      	add	sp, #16
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40014000 	.word	0x40014000
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	240c      	movs	r4, #12
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	2314      	movs	r3, #20
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f002 fb3c 	bl	8002d88 <memset>
  if(htim->Instance==TIM15)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <HAL_TIM_MspPostInit+0x74>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d124      	bne.n	8000764 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_TIM_MspPostInit+0x78>)
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_TIM_MspPostInit+0x78>)
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	03c9      	lsls	r1, r1, #15
 8000724:	430a      	orrs	r2, r1
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_TIM_MspPostInit+0x78>)
 800072a:	695a      	ldr	r2, [r3, #20]
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	03db      	lsls	r3, r3, #15
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PF9     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	0021      	movs	r1, r4
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000758:	187b      	adds	r3, r7, r1
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_TIM_MspPostInit+0x7c>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f000 f9b6 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b009      	add	sp, #36	; 0x24
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40014000 	.word	0x40014000
 8000770:	40021000 	.word	0x40021000
 8000774:	48001400 	.word	0x48001400

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b08b      	sub	sp, #44	; 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	2414      	movs	r4, #20
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	2314      	movs	r3, #20
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f002 fafc 	bl	8002d88 <memset>
  if(huart->Instance==USART3)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <HAL_UART_MspInit+0x90>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d131      	bne.n	80007fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_UART_MspInit+0x94>)
 800079c:	69da      	ldr	r2, [r3, #28]
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <HAL_UART_MspInit+0x94>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	02c9      	lsls	r1, r1, #11
 80007a4:	430a      	orrs	r2, r1
 80007a6:	61da      	str	r2, [r3, #28]
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_UART_MspInit+0x94>)
 80007aa:	69da      	ldr	r2, [r3, #28]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	02db      	lsls	r3, r3, #11
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_UART_MspInit+0x94>)
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_UART_MspInit+0x94>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0309      	lsls	r1, r1, #12
 80007c0:	430a      	orrs	r2, r1
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_UART_MspInit+0x94>)
 80007c6:	695a      	ldr	r2, [r3, #20]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	031b      	lsls	r3, r3, #12
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2203      	movs	r2, #3
 80007ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2201      	movs	r2, #1
 80007f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_UART_MspInit+0x98>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	0010      	movs	r0, r2
 80007fa:	f000 f969 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b00b      	add	sp, #44	; 0x2c
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40004800 	.word	0x40004800
 800080c:	40021000 	.word	0x40021000
 8000810:	48000800 	.word	0x48000800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 f87a 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800084e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000850:	f7ff fff7 	bl	8000842 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800087a:	f002 fa8d 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fccf 	bl	8000220 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   r0, =_estack
 8000884:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000890:	08002e38 	.word	0x08002e38
  ldr r2, =_sbss
 8000894:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000898:	20000160 	.word	0x20000160

0800089c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_COMP_IRQHandler>
	...

080008a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <HAL_Init+0x24>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_Init+0x24>)
 80008aa:	2110      	movs	r1, #16
 80008ac:	430a      	orrs	r2, r1
 80008ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f809 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b6:	f7ff fe8f 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x5c>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_InitTick+0x60>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	0019      	movs	r1, r3
 80008da:	23fa      	movs	r3, #250	; 0xfa
 80008dc:	0098      	lsls	r0, r3, #2
 80008de:	f7ff fc13 	bl	8000108 <__udivsi3>
 80008e2:	0003      	movs	r3, r0
 80008e4:	0019      	movs	r1, r3
 80008e6:	0020      	movs	r0, r4
 80008e8:	f7ff fc0e 	bl	8000108 <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 f8e1 	bl	8000ab6 <HAL_SYSTICK_Config>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e00f      	b.n	800091c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d80b      	bhi.n	800091a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	2301      	movs	r3, #1
 8000906:	425b      	negs	r3, r3
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f8be 	bl	8000a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_InitTick+0x64>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b003      	add	sp, #12
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x1c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	001a      	movs	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x20>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	18d2      	adds	r2, r2, r3
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_IncTick+0x20>)
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	20000008 	.word	0x20000008
 8000950:	2000015c 	.word	0x2000015c

08000954 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	2000015c 	.word	0x2000015c

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	0002      	movs	r2, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b7f      	cmp	r3, #127	; 0x7f
 800097c:	d828      	bhi.n	80009d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <__NVIC_SetPriority+0xd4>)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	33c0      	adds	r3, #192	; 0xc0
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	589b      	ldr	r3, [r3, r2]
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	0011      	movs	r1, r2
 8000994:	2203      	movs	r2, #3
 8000996:	400a      	ands	r2, r1
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	21ff      	movs	r1, #255	; 0xff
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	401a      	ands	r2, r3
 80009a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	401a      	ands	r2, r3
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	2303      	movs	r3, #3
 80009b6:	4003      	ands	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	481f      	ldr	r0, [pc, #124]	; (8000a3c <__NVIC_SetPriority+0xd4>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	430a      	orrs	r2, r1
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ce:	e031      	b.n	8000a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0019      	movs	r1, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	400b      	ands	r3, r1
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3306      	adds	r3, #6
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	3304      	adds	r3, #4
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <__NVIC_SetPriority+0xd8>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	001c      	movs	r4, r3
 8000a20:	230f      	movs	r3, #15
 8000a22:	4023      	ands	r3, r4
 8000a24:	3b08      	subs	r3, #8
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	3306      	adds	r3, #6
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	18c3      	adds	r3, r0, r3
 8000a30:	3304      	adds	r3, #4
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	045b      	lsls	r3, r3, #17
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d301      	bcc.n	8000a5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e010      	b.n	8000a7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SysTick_Config+0x44>)
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	3a01      	subs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a64:	2301      	movs	r3, #1
 8000a66:	425b      	negs	r3, r3
 8000a68:	2103      	movs	r1, #3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff ff7c 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x44>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	210f      	movs	r1, #15
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	1c02      	adds	r2, r0, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff ffbf 	bl	8000a44 <SysTick_Config>
 8000ac6:	0003      	movs	r3, r0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e155      	b.n	8000d8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	000a      	movs	r2, r1
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <HAL_GPIO_Init+0x28>
 8000af6:	e146      	b.n	8000d86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d005      	beq.n	8000b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2203      	movs	r2, #3
 8000b0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d130      	bne.n	8000b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	409a      	lsls	r2, r3
 8000b32:	0013      	movs	r3, r2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b46:	2201      	movs	r2, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2203      	movs	r2, #3
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d017      	beq.n	8000bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d123      	bne.n	8000c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	08da      	lsrs	r2, r3, #3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	58d3      	ldr	r3, [r2, r3]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2207      	movs	r2, #7
 8000bcc:	4013      	ands	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2107      	movs	r1, #7
 8000be6:	400b      	ands	r3, r1
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	6939      	ldr	r1, [r7, #16]
 8000c00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	401a      	ands	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	23c0      	movs	r3, #192	; 0xc0
 8000c3c:	029b      	lsls	r3, r3, #10
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d100      	bne.n	8000c44 <HAL_GPIO_Init+0x174>
 8000c42:	e0a0      	b.n	8000d86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c44:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <HAL_GPIO_Init+0x2d4>)
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <HAL_GPIO_Init+0x2d4>)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	619a      	str	r2, [r3, #24]
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <HAL_GPIO_Init+0x2d4>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4013      	ands	r3, r2
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5c:	4a52      	ldr	r2, [pc, #328]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	589b      	ldr	r3, [r3, r2]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	2390      	movs	r3, #144	; 0x90
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d019      	beq.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a47      	ldr	r2, [pc, #284]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0x1ea>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <HAL_GPIO_Init+0x2e0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00d      	beq.n	8000cb6 <HAL_GPIO_Init+0x1e6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d007      	beq.n	8000cb2 <HAL_GPIO_Init+0x1e2>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <HAL_GPIO_Init+0x2e8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_GPIO_Init+0x1de>
 8000caa:	2304      	movs	r3, #4
 8000cac:	e008      	b.n	8000cc0 <HAL_GPIO_Init+0x1f0>
 8000cae:	2305      	movs	r3, #5
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x1f0>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e004      	b.n	8000cc0 <HAL_GPIO_Init+0x1f0>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e002      	b.n	8000cc0 <HAL_GPIO_Init+0x1f0>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x1f0>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	4093      	lsls	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd0:	4935      	ldr	r1, [pc, #212]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	035b      	lsls	r3, r3, #13
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	039b      	lsls	r3, r3, #14
 8000d20:	4013      	ands	r3, r2
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	029b      	lsls	r3, r3, #10
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	025b      	lsls	r3, r3, #9
 8000d74:	4013      	ands	r3, r2
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	1e13      	subs	r3, r2, #0
 8000d96:	d000      	beq.n	8000d9a <HAL_GPIO_Init+0x2ca>
 8000d98:	e6a2      	b.n	8000ae0 <HAL_GPIO_Init+0x10>
  } 
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b006      	add	sp, #24
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	48000800 	.word	0x48000800
 8000db4:	48000c00 	.word	0x48000c00
 8000db8:	48001000 	.word	0x48001000
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	0008      	movs	r0, r1
 8000dca:	0011      	movs	r1, r2
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	1c02      	adds	r2, r0, #0
 8000dd0:	801a      	strh	r2, [r3, #0]
 8000dd2:	1c7b      	adds	r3, r7, #1
 8000dd4:	1c0a      	adds	r2, r1, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd8:	1c7b      	adds	r3, r7, #1
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d004      	beq.n	8000dea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de8:	e003      	b.n	8000df2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dea:	1cbb      	adds	r3, r7, #2
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f000 fb76 	bl	80014fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	d100      	bne.n	8000e1c <HAL_RCC_OscConfig+0x20>
 8000e1a:	e08e      	b.n	8000f3a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e1c:	4bc5      	ldr	r3, [pc, #788]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	220c      	movs	r2, #12
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d00e      	beq.n	8000e46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e28:	4bc2      	ldr	r3, [pc, #776]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d117      	bne.n	8000e64 <HAL_RCC_OscConfig+0x68>
 8000e34:	4bbf      	ldr	r3, [pc, #764]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	23c0      	movs	r3, #192	; 0xc0
 8000e3a:	025b      	lsls	r3, r3, #9
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d10e      	bne.n	8000e64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e46:	4bbb      	ldr	r3, [pc, #748]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	029b      	lsls	r3, r3, #10
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d100      	bne.n	8000e54 <HAL_RCC_OscConfig+0x58>
 8000e52:	e071      	b.n	8000f38 <HAL_RCC_OscConfig+0x13c>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d000      	beq.n	8000e5e <HAL_RCC_OscConfig+0x62>
 8000e5c:	e06c      	b.n	8000f38 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f000 fb4c 	bl	80014fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d107      	bne.n	8000e7c <HAL_RCC_OscConfig+0x80>
 8000e6c:	4bb1      	ldr	r3, [pc, #708]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4bb0      	ldr	r3, [pc, #704]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	0249      	lsls	r1, r1, #9
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e02f      	b.n	8000edc <HAL_RCC_OscConfig+0xe0>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0xa2>
 8000e84:	4bab      	ldr	r3, [pc, #684]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4baa      	ldr	r3, [pc, #680]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	49ab      	ldr	r1, [pc, #684]	; (8001138 <HAL_RCC_OscConfig+0x33c>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4ba8      	ldr	r3, [pc, #672]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4ba7      	ldr	r3, [pc, #668]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000e96:	49a9      	ldr	r1, [pc, #676]	; (800113c <HAL_RCC_OscConfig+0x340>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e01e      	b.n	8000edc <HAL_RCC_OscConfig+0xe0>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_RCC_OscConfig+0xc8>
 8000ea6:	4ba3      	ldr	r3, [pc, #652]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4ba2      	ldr	r3, [pc, #648]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	02c9      	lsls	r1, r1, #11
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	4b9f      	ldr	r3, [pc, #636]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b9e      	ldr	r3, [pc, #632]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0xe0>
 8000ec4:	4b9b      	ldr	r3, [pc, #620]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b9a      	ldr	r3, [pc, #616]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000eca:	499b      	ldr	r1, [pc, #620]	; (8001138 <HAL_RCC_OscConfig+0x33c>)
 8000ecc:	400a      	ands	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	4b98      	ldr	r3, [pc, #608]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b97      	ldr	r3, [pc, #604]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	4999      	ldr	r1, [pc, #612]	; (800113c <HAL_RCC_OscConfig+0x340>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fd36 	bl	8000954 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff fd31 	bl	8000954 <HAL_GetTick>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b64      	cmp	r3, #100	; 0x64
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e2fd      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f00:	4b8c      	ldr	r3, [pc, #560]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0xf2>
 8000f0c:	e015      	b.n	8000f3a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fd21 	bl	8000954 <HAL_GetTick>
 8000f12:	0003      	movs	r3, r0
 8000f14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fd1c 	bl	8000954 <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e2e8      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	4b82      	ldr	r3, [pc, #520]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	029b      	lsls	r3, r3, #10
 8000f32:	4013      	ands	r3, r2
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x11c>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4013      	ands	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x14a>
 8000f44:	e06c      	b.n	8001020 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d00e      	beq.n	8000f6e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f50:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	220c      	movs	r2, #12
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d11f      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1a0>
 8000f5c:	4b75      	ldr	r3, [pc, #468]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	23c0      	movs	r3, #192	; 0xc0
 8000f62:	025b      	lsls	r3, r3, #9
 8000f64:	401a      	ands	r2, r3
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d116      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2202      	movs	r2, #2
 8000f74:	4013      	ands	r3, r2
 8000f76:	d005      	beq.n	8000f84 <HAL_RCC_OscConfig+0x188>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d001      	beq.n	8000f84 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e2bb      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f84:	4b6b      	ldr	r3, [pc, #428]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	22f8      	movs	r2, #248	; 0xf8
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	4b67      	ldr	r3, [pc, #412]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e041      	b.n	8001020 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d024      	beq.n	8000fee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa4:	4b63      	ldr	r3, [pc, #396]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b62      	ldr	r3, [pc, #392]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcd0 	bl	8000954 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fccb 	bl	8000954 <HAL_GetTick>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e297      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	4b59      	ldr	r3, [pc, #356]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d0f1      	beq.n	8000fba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd6:	4b57      	ldr	r3, [pc, #348]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	22f8      	movs	r2, #248	; 0xf8
 8000fdc:	4393      	bics	r3, r2
 8000fde:	0019      	movs	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	00da      	lsls	r2, r3, #3
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e018      	b.n	8001020 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fee:	4b51      	ldr	r3, [pc, #324]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fcab 	bl	8000954 <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff fca6 	bl	8000954 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e272      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	4b47      	ldr	r3, [pc, #284]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2202      	movs	r2, #2
 800101c:	4013      	ands	r3, r2
 800101e:	d1f1      	bne.n	8001004 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2208      	movs	r2, #8
 8001026:	4013      	ands	r3, r2
 8001028:	d036      	beq.n	8001098 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d019      	beq.n	8001066 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001032:	4b40      	ldr	r3, [pc, #256]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8001034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103e:	f7ff fc89 	bl	8000954 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001048:	f7ff fc84 	bl	8000954 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e250      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d0f1      	beq.n	8001048 <HAL_RCC_OscConfig+0x24c>
 8001064:	e018      	b.n	8001098 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8001068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 800106c:	2101      	movs	r1, #1
 800106e:	438a      	bics	r2, r1
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fc6f 	bl	8000954 <HAL_GetTick>
 8001076:	0003      	movs	r3, r0
 8001078:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fc6a 	bl	8000954 <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e236      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d1f1      	bne.n	800107c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2204      	movs	r2, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	d100      	bne.n	80010a4 <HAL_RCC_OscConfig+0x2a8>
 80010a2:	e0b5      	b.n	8001210 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a4:	201f      	movs	r0, #31
 80010a6:	183b      	adds	r3, r7, r0
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	055b      	lsls	r3, r3, #21
 80010b4:	4013      	ands	r3, r2
 80010b6:	d110      	bne.n	80010da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	0549      	lsls	r1, r1, #21
 80010c2:	430a      	orrs	r2, r1
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 80010c8:	69da      	ldr	r2, [r3, #28]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	055b      	lsls	r3, r3, #21
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010d4:	183b      	adds	r3, r7, r0
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_RCC_OscConfig+0x344>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	d11a      	bne.n	800111c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_RCC_OscConfig+0x344>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_RCC_OscConfig+0x344>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	0049      	lsls	r1, r1, #1
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fc2e 	bl	8000954 <HAL_GetTick>
 80010f8:	0003      	movs	r3, r0
 80010fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fe:	f7ff fc29 	bl	8000954 <HAL_GetTick>
 8001102:	0002      	movs	r2, r0
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	; 0x64
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e1f5      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_OscConfig+0x344>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4013      	ands	r3, r2
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d10f      	bne.n	8001144 <HAL_RCC_OscConfig+0x348>
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_RCC_OscConfig+0x338>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	621a      	str	r2, [r3, #32]
 8001130:	e036      	b.n	80011a0 <HAL_RCC_OscConfig+0x3a4>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40021000 	.word	0x40021000
 8001138:	fffeffff 	.word	0xfffeffff
 800113c:	fffbffff 	.word	0xfffbffff
 8001140:	40007000 	.word	0x40007000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x36a>
 800114c:	4bca      	ldr	r3, [pc, #808]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4bc9      	ldr	r3, [pc, #804]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	4bc7      	ldr	r3, [pc, #796]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	4bc6      	ldr	r3, [pc, #792]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800115e:	2104      	movs	r1, #4
 8001160:	438a      	bics	r2, r1
 8001162:	621a      	str	r2, [r3, #32]
 8001164:	e01c      	b.n	80011a0 <HAL_RCC_OscConfig+0x3a4>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b05      	cmp	r3, #5
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x38c>
 800116e:	4bc2      	ldr	r3, [pc, #776]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001170:	6a1a      	ldr	r2, [r3, #32]
 8001172:	4bc1      	ldr	r3, [pc, #772]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001174:	2104      	movs	r1, #4
 8001176:	430a      	orrs	r2, r1
 8001178:	621a      	str	r2, [r3, #32]
 800117a:	4bbf      	ldr	r3, [pc, #764]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800117c:	6a1a      	ldr	r2, [r3, #32]
 800117e:	4bbe      	ldr	r3, [pc, #760]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001180:	2101      	movs	r1, #1
 8001182:	430a      	orrs	r2, r1
 8001184:	621a      	str	r2, [r3, #32]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0x3a4>
 8001188:	4bbb      	ldr	r3, [pc, #748]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	4bba      	ldr	r3, [pc, #744]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800118e:	2101      	movs	r1, #1
 8001190:	438a      	bics	r2, r1
 8001192:	621a      	str	r2, [r3, #32]
 8001194:	4bb8      	ldr	r3, [pc, #736]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	4bb7      	ldr	r3, [pc, #732]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800119a:	2104      	movs	r1, #4
 800119c:	438a      	bics	r2, r1
 800119e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d014      	beq.n	80011d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fbd4 	bl	8000954 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	e009      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fbcf 	bl	8000954 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4aaf      	ldr	r2, [pc, #700]	; (800147c <HAL_RCC_OscConfig+0x680>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e19a      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c6:	4bac      	ldr	r3, [pc, #688]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3b6>
 80011d0:	e013      	b.n	80011fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fbbf 	bl	8000954 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011da:	e009      	b.n	80011f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011dc:	f7ff fbba 	bl	8000954 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4aa5      	ldr	r2, [pc, #660]	; (800147c <HAL_RCC_OscConfig+0x680>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e185      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f0:	4ba1      	ldr	r3, [pc, #644]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	2202      	movs	r2, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011fa:	231f      	movs	r3, #31
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001204:	4b9c      	ldr	r3, [pc, #624]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	4b9b      	ldr	r3, [pc, #620]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800120a:	499d      	ldr	r1, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x684>)
 800120c:	400a      	ands	r2, r1
 800120e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2210      	movs	r2, #16
 8001216:	4013      	ands	r3, r2
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d12a      	bne.n	8001278 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001222:	4b95      	ldr	r3, [pc, #596]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001226:	4b94      	ldr	r3, [pc, #592]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001228:	2104      	movs	r1, #4
 800122a:	430a      	orrs	r2, r1
 800122c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800122e:	4b92      	ldr	r3, [pc, #584]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb8b 	bl	8000954 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001244:	f7ff fb86 	bl	8000954 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e152      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d0f1      	beq.n	8001244 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001260:	4b85      	ldr	r3, [pc, #532]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001264:	22f8      	movs	r2, #248	; 0xf8
 8001266:	4393      	bics	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	00da      	lsls	r2, r3, #3
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	e034      	b.n	80012e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	3305      	adds	r3, #5
 800127e:	d111      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001280:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001284:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001286:	2104      	movs	r1, #4
 8001288:	438a      	bics	r2, r1
 800128a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800128c:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001290:	22f8      	movs	r2, #248	; 0xf8
 8001292:	4393      	bics	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	00da      	lsls	r2, r3, #3
 800129c:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
 80012a2:	e01e      	b.n	80012e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012a4:	4b74      	ldr	r3, [pc, #464]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a8:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012aa:	2104      	movs	r1, #4
 80012ac:	430a      	orrs	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012b0:	4b71      	ldr	r3, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b4:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	438a      	bics	r2, r1
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fb4a 	bl	8000954 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012c6:	f7ff fb45 	bl	8000954 <HAL_GetTick>
 80012ca:	0002      	movs	r2, r0
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e111      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012d8:	4b67      	ldr	r3, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	2202      	movs	r2, #2
 80012de:	4013      	ands	r3, r2
 80012e0:	d1f1      	bne.n	80012c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2220      	movs	r2, #32
 80012e8:	4013      	ands	r3, r2
 80012ea:	d05c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012ec:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	220c      	movs	r2, #12
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d00e      	beq.n	8001316 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012f8:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	220c      	movs	r2, #12
 80012fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001300:	2b08      	cmp	r3, #8
 8001302:	d114      	bne.n	800132e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001304:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	23c0      	movs	r3, #192	; 0xc0
 800130a:	025b      	lsls	r3, r3, #9
 800130c:	401a      	ands	r2, r3
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	025b      	lsls	r3, r3, #9
 8001312:	429a      	cmp	r2, r3
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001316:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	029b      	lsls	r3, r3, #10
 800131e:	4013      	ands	r3, r2
 8001320:	d040      	beq.n	80013a4 <HAL_RCC_OscConfig+0x5a8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d03c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0e6      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01b      	beq.n	800136e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001336:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	0249      	lsls	r1, r1, #9
 8001340:	430a      	orrs	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fb06 	bl	8000954 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800134e:	f7ff fb01 	bl	8000954 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e0cd      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001360:	4b45      	ldr	r3, [pc, #276]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x552>
 800136c:	e01b      	b.n	80013a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001374:	4943      	ldr	r1, [pc, #268]	; (8001484 <HAL_RCC_OscConfig+0x688>)
 8001376:	400a      	ands	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff faeb 	bl	8000954 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001384:	f7ff fae6 	bl	8000954 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0b2      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x588>
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5b4>
 80013ae:	e0a4      	b.n	80014fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	220c      	movs	r2, #12
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x5c2>
 80013bc:	e078      	b.n	80014b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d14c      	bne.n	8001460 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80013cc:	492e      	ldr	r1, [pc, #184]	; (8001488 <HAL_RCC_OscConfig+0x68c>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fabf 	bl	8000954 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff faba 	bl	8000954 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e086      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	049b      	lsls	r3, r3, #18
 80013f6:	4013      	ands	r3, r2
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	220f      	movs	r2, #15
 8001400:	4393      	bics	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x690>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	431a      	orrs	r2, r3
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0449      	lsls	r1, r1, #17
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fa8d 	bl	8000954 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fa88 	bl	8000954 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e054      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	049b      	lsls	r3, r3, #18
 800145a:	4013      	ands	r3, r2
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x644>
 800145e:	e04c      	b.n	80014fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_RCC_OscConfig+0x67c>)
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <HAL_RCC_OscConfig+0x68c>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fa72 	bl	8000954 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x6a6>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	00001388 	.word	0x00001388
 8001480:	efffffff 	.word	0xefffffff
 8001484:	fffeffff 	.word	0xfffeffff
 8001488:	feffffff 	.word	0xfeffffff
 800148c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fa60 	bl	8000954 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e02c      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_RCC_OscConfig+0x708>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	049b      	lsls	r3, r3, #18
 80014aa:	4013      	ands	r3, r2
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x694>
 80014ae:	e024      	b.n	80014fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e01f      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_RCC_OscConfig+0x708>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_RCC_OscConfig+0x708>)
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	401a      	ands	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10e      	bne.n	80014f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	220f      	movs	r2, #15
 80014dc:	401a      	ands	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	23f0      	movs	r3, #240	; 0xf0
 80014ea:	039b      	lsls	r3, r3, #14
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b008      	add	sp, #32
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0bf      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d911      	bls.n	800154e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	4393      	bics	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0a6      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d015      	beq.n	8001584 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2204      	movs	r2, #4
 800155e:	4013      	ands	r3, r2
 8001560:	d006      	beq.n	8001570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001562:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001568:	21e0      	movs	r1, #224	; 0xe0
 800156a:	00c9      	lsls	r1, r1, #3
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	22f0      	movs	r2, #240	; 0xf0
 8001576:	4393      	bics	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	d04c      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	029b      	lsls	r3, r3, #10
 800159e:	4013      	ands	r3, r2
 80015a0:	d120      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07a      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	049b      	lsls	r3, r3, #18
 80015b6:	4013      	ands	r3, r2
 80015b8:	d114      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06e      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 80015c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d108      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e062      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e05b      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff f9ac 	bl	8000954 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001600:	e009      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	f7ff f9a7 	bl	8000954 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_RCC_ClockConfig+0x1a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e042      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	220c      	movs	r2, #12
 800161c:	401a      	ands	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1ec      	bne.n	8001602 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4013      	ands	r3, r2
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d211      	bcs.n	800165a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x19c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e020      	b.n	800169c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2204      	movs	r2, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d009      	beq.n	8001678 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_RCC_ClockConfig+0x1a8>)
 800166a:	4013      	ands	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001678:	f000 f820 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167c:	0001      	movs	r1, r0
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1a0>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	220f      	movs	r2, #15
 8001686:	4013      	ands	r3, r2
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x1ac>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	000a      	movs	r2, r1
 800168e:	40da      	lsrs	r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001692:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001694:	2003      	movs	r0, #3
 8001696:	f7ff f917 	bl	80008c8 <HAL_InitTick>
  
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	00001388 	.word	0x00001388
 80016b0:	fffff8ff 	.word	0xfffff8ff
 80016b4:	08002df8 	.word	0x08002df8
 80016b8:	20000000 	.word	0x20000000

080016bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_GetSysClockFreq+0xd0>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	220c      	movs	r2, #12
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d046      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0xb8>
 80016e6:	d848      	bhi.n	800177a <HAL_RCC_GetSysClockFreq+0xbe>
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d002      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0x36>
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d003      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x3c>
 80016f0:	e043      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_GetSysClockFreq+0xd4>)
 80016f4:	613b      	str	r3, [r7, #16]
      break;
 80016f6:	e043      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	220f      	movs	r2, #15
 80016fe:	4013      	ands	r3, r2
 8001700:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	220f      	movs	r2, #15
 800170c:	4013      	ands	r3, r2
 800170e:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	401a      	ands	r2, r3
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	429a      	cmp	r2, r3
 8001722:	d109      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	481a      	ldr	r0, [pc, #104]	; (8001790 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001728:	f7fe fcee 	bl	8000108 <__udivsi3>
 800172c:	0003      	movs	r3, r0
 800172e:	001a      	movs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4353      	muls	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e01a      	b.n	800176e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	23c0      	movs	r3, #192	; 0xc0
 800173c:	025b      	lsls	r3, r3, #9
 800173e:	401a      	ands	r2, r3
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	025b      	lsls	r3, r3, #9
 8001744:	429a      	cmp	r2, r3
 8001746:	d109      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	4814      	ldr	r0, [pc, #80]	; (800179c <HAL_RCC_GetSysClockFreq+0xe0>)
 800174c:	f7fe fcdc 	bl	8000108 <__udivsi3>
 8001750:	0003      	movs	r3, r0
 8001752:	001a      	movs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4353      	muls	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e008      	b.n	800176e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001760:	f7fe fcd2 	bl	8000108 <__udivsi3>
 8001764:	0003      	movs	r3, r0
 8001766:	001a      	movs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4353      	muls	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	613b      	str	r3, [r7, #16]
      break;
 8001772:	e005      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001776:	613b      	str	r3, [r7, #16]
      break;
 8001778:	e002      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xe4>)
 800177c:	613b      	str	r3, [r7, #16]
      break;
 800177e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001780:	693b      	ldr	r3, [r7, #16]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b006      	add	sp, #24
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40021000 	.word	0x40021000
 8001790:	00f42400 	.word	0x00f42400
 8001794:	08002e10 	.word	0x08002e10
 8001798:	08002e20 	.word	0x08002e20
 800179c:	02dc6c00 	.word	0x02dc6c00
 80017a0:	007a1200 	.word	0x007a1200

080017a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017bc:	f7ff fff2 	bl	80017a4 <HAL_RCC_GetHCLKFreq>
 80017c0:	0001      	movs	r1, r0
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	2207      	movs	r2, #7
 80017ca:	4013      	ands	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	40d9      	lsrs	r1, r3
 80017d2:	000b      	movs	r3, r1
}    
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08002e08 	.word	0x08002e08

080017e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0a8      	b.n	8001948 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	2382      	movs	r3, #130	; 0x82
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	429a      	cmp	r2, r3
 8001808:	d009      	beq.n	800181e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
 8001810:	e005      	b.n	800181e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	225d      	movs	r2, #93	; 0x5d
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	225c      	movs	r2, #92	; 0x5c
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0018      	movs	r0, r3
 800183c:	f7fe fef0 	bl	8000620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	225d      	movs	r2, #93	; 0x5d
 8001844:	2102      	movs	r1, #2
 8001846:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	438a      	bics	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	23e0      	movs	r3, #224	; 0xe0
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	429a      	cmp	r2, r3
 8001862:	d902      	bls.n	800186a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e002      	b.n	8001870 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	23f0      	movs	r3, #240	; 0xf0
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	429a      	cmp	r2, r3
 800187a:	d008      	beq.n	800188e <HAL_SPI_Init+0xaa>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	23e0      	movs	r3, #224	; 0xe0
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	429a      	cmp	r2, r3
 8001886:	d002      	beq.n	800188e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	2382      	movs	r3, #130	; 0x82
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	2384      	movs	r3, #132	; 0x84
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	400b      	ands	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2102      	movs	r1, #2
 80018aa:	400b      	ands	r3, r1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2101      	movs	r1, #1
 80018b4:	400b      	ands	r3, r1
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6999      	ldr	r1, [r3, #24]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	400b      	ands	r3, r1
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2138      	movs	r1, #56	; 0x38
 80018ca:	400b      	ands	r3, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	400b      	ands	r3, r1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	0011      	movs	r1, r2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	2204      	movs	r2, #4
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2110      	movs	r1, #16
 80018fc:	400b      	ands	r3, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	2108      	movs	r1, #8
 8001906:	400b      	ands	r3, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68d9      	ldr	r1, [r3, #12]
 800190e:	23f0      	movs	r3, #240	; 0xf0
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	400b      	ands	r3, r1
 8001914:	431a      	orrs	r2, r3
 8001916:	0011      	movs	r1, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	015b      	lsls	r3, r3, #5
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4907      	ldr	r1, [pc, #28]	; (8001950 <HAL_SPI_Init+0x16c>)
 8001934:	400a      	ands	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	225d      	movs	r2, #93	; 0x5d
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b004      	add	sp, #16
 800194e:	bd80      	pop	{r7, pc}
 8001950:	fffff7ff 	.word	0xfffff7ff

08001954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e042      	b.n	80019ec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	223d      	movs	r2, #61	; 0x3d
 800196a:	5c9b      	ldrb	r3, [r3, r2]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	223c      	movs	r2, #60	; 0x3c
 8001976:	2100      	movs	r1, #0
 8001978:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f7fe fe9b 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	223d      	movs	r2, #61	; 0x3d
 8001986:	2102      	movs	r1, #2
 8001988:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	0019      	movs	r1, r3
 8001994:	0010      	movs	r0, r2
 8001996:	f000 fa1f 	bl	8001dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2246      	movs	r2, #70	; 0x46
 800199e:	2101      	movs	r1, #1
 80019a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	223e      	movs	r2, #62	; 0x3e
 80019a6:	2101      	movs	r1, #1
 80019a8:	5499      	strb	r1, [r3, r2]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	223f      	movs	r2, #63	; 0x3f
 80019ae:	2101      	movs	r1, #1
 80019b0:	5499      	strb	r1, [r3, r2]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	2101      	movs	r1, #1
 80019b8:	5499      	strb	r1, [r3, r2]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	2101      	movs	r1, #1
 80019c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2242      	movs	r2, #66	; 0x42
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2243      	movs	r2, #67	; 0x43
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2244      	movs	r2, #68	; 0x44
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2245      	movs	r2, #69	; 0x45
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	223d      	movs	r2, #61	; 0x3d
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e042      	b.n	8001a8c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	223d      	movs	r2, #61	; 0x3d
 8001a0a:	5c9b      	ldrb	r3, [r3, r2]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223c      	movs	r2, #60	; 0x3c
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 f839 	bl	8001a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	223d      	movs	r2, #61	; 0x3d
 8001a26:	2102      	movs	r1, #2
 8001a28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	0019      	movs	r1, r3
 8001a34:	0010      	movs	r0, r2
 8001a36:	f000 f9cf 	bl	8001dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2246      	movs	r2, #70	; 0x46
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	223e      	movs	r2, #62	; 0x3e
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2241      	movs	r2, #65	; 0x41
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2242      	movs	r2, #66	; 0x42
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2243      	movs	r2, #67	; 0x43
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2244      	movs	r2, #68	; 0x44
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2245      	movs	r2, #69	; 0x45
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	223d      	movs	r2, #61	; 0x3d
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	2317      	movs	r3, #23
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	223c      	movs	r2, #60	; 0x3c
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e0ad      	b.n	8001c22 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	223c      	movs	r2, #60	; 0x3c
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d100      	bne.n	8001ad6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ad4:	e076      	b.n	8001bc4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	d900      	bls.n	8001ade <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001adc:	e095      	b.n	8001c0a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d04e      	beq.n	8001b82 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d900      	bls.n	8001aec <HAL_TIM_PWM_ConfigChannel+0x48>
 8001aea:	e08e      	b.n	8001c0a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_TIM_PWM_ConfigChannel+0x56>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d021      	beq.n	8001b3c <HAL_TIM_PWM_ConfigChannel+0x98>
 8001af8:	e087      	b.n	8001c0a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	0011      	movs	r1, r2
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 f9e8 	bl	8001ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2108      	movs	r1, #8
 8001b14:	430a      	orrs	r2, r1
 8001b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2104      	movs	r1, #4
 8001b24:	438a      	bics	r2, r1
 8001b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6999      	ldr	r1, [r3, #24]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	619a      	str	r2, [r3, #24]
      break;
 8001b3a:	e06b      	b.n	8001c14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 fa4f 	bl	8001fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0109      	lsls	r1, r1, #4
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4931      	ldr	r1, [pc, #196]	; (8001c2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6999      	ldr	r1, [r3, #24]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	021a      	lsls	r2, r3, #8
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
      break;
 8001b80:	e048      	b.n	8001c14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	0011      	movs	r1, r2
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fab0 	bl	80020f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2104      	movs	r1, #4
 8001bac:	438a      	bics	r2, r1
 8001bae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69d9      	ldr	r1, [r3, #28]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	61da      	str	r2, [r3, #28]
      break;
 8001bc2:	e027      	b.n	8001c14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	0011      	movs	r1, r2
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 fb15 	bl	80021fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69da      	ldr	r2, [r3, #28]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0109      	lsls	r1, r1, #4
 8001be0:	430a      	orrs	r2, r1
 8001be2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	490f      	ldr	r1, [pc, #60]	; (8001c2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69d9      	ldr	r1, [r3, #28]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	021a      	lsls	r2, r3, #8
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	61da      	str	r2, [r3, #28]
      break;
 8001c08:	e004      	b.n	8001c14 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001c0a:	2317      	movs	r3, #23
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
      break;
 8001c12:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	223c      	movs	r2, #60	; 0x3c
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

  return status;
 8001c1c:	2317      	movs	r3, #23
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	781b      	ldrb	r3, [r3, #0]
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b006      	add	sp, #24
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	fffffbff 	.word	0xfffffbff

08001c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223c      	movs	r2, #60	; 0x3c
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_ConfigClockSource+0x20>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e0bc      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x19a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	223c      	movs	r2, #60	; 0x3c
 8001c54:	2101      	movs	r1, #1
 8001c56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	223d      	movs	r2, #61	; 0x3d
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2277      	movs	r2, #119	; 0x77
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	0192      	lsls	r2, r2, #6
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d040      	beq.n	8001d0e <HAL_TIM_ConfigClockSource+0xde>
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0192      	lsls	r2, r2, #6
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d900      	bls.n	8001c96 <HAL_TIM_ConfigClockSource+0x66>
 8001c94:	e088      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0152      	lsls	r2, r2, #5
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x70>
 8001c9e:	e088      	b.n	8001db2 <HAL_TIM_ConfigClockSource+0x182>
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0152      	lsls	r2, r2, #5
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d900      	bls.n	8001caa <HAL_TIM_ConfigClockSource+0x7a>
 8001ca8:	e07e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001caa:	2b70      	cmp	r3, #112	; 0x70
 8001cac:	d018      	beq.n	8001ce0 <HAL_TIM_ConfigClockSource+0xb0>
 8001cae:	d900      	bls.n	8001cb2 <HAL_TIM_ConfigClockSource+0x82>
 8001cb0:	e07a      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001cb2:	2b60      	cmp	r3, #96	; 0x60
 8001cb4:	d04f      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0x126>
 8001cb6:	d900      	bls.n	8001cba <HAL_TIM_ConfigClockSource+0x8a>
 8001cb8:	e076      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001cba:	2b50      	cmp	r3, #80	; 0x50
 8001cbc:	d03b      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x106>
 8001cbe:	d900      	bls.n	8001cc2 <HAL_TIM_ConfigClockSource+0x92>
 8001cc0:	e072      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d057      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x146>
 8001cc6:	d900      	bls.n	8001cca <HAL_TIM_ConfigClockSource+0x9a>
 8001cc8:	e06e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001cca:	2b30      	cmp	r3, #48	; 0x30
 8001ccc:	d063      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x166>
 8001cce:	d86b      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d060      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x166>
 8001cd4:	d868      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d05d      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x166>
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d05b      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x166>
 8001cde:	e063      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cf0:	f000 fb68 	bl	80023c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2277      	movs	r2, #119	; 0x77
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	609a      	str	r2, [r3, #8]
      break;
 8001d0c:	e052      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d1e:	f000 fb51 	bl	80023c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	01c9      	lsls	r1, r1, #7
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
      break;
 8001d34:	e03e      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d42:	001a      	movs	r2, r3
 8001d44:	f000 fac4 	bl	80022d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2150      	movs	r1, #80	; 0x50
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 fb1e 	bl	8002390 <TIM_ITRx_SetConfig>
      break;
 8001d54:	e02e      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d62:	001a      	movs	r2, r3
 8001d64:	f000 fae2 	bl	800232c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2160      	movs	r1, #96	; 0x60
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 fb0e 	bl	8002390 <TIM_ITRx_SetConfig>
      break;
 8001d74:	e01e      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d82:	001a      	movs	r2, r3
 8001d84:	f000 faa4 	bl	80022d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2140      	movs	r1, #64	; 0x40
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 fafe 	bl	8002390 <TIM_ITRx_SetConfig>
      break;
 8001d94:	e00e      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0019      	movs	r1, r3
 8001da0:	0010      	movs	r0, r2
 8001da2:	f000 faf5 	bl	8002390 <TIM_ITRx_SetConfig>
      break;
 8001da6:	e005      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001da8:	230f      	movs	r3, #15
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
      break;
 8001db0:	e000      	b.n	8001db4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001db2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	223d      	movs	r2, #61	; 0x3d
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	223c      	movs	r2, #60	; 0x3c
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

  return status;
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	ffff00ff 	.word	0xffff00ff

08001dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <TIM_Base_SetConfig+0xe4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d008      	beq.n	8001e02 <TIM_Base_SetConfig+0x2a>
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d003      	beq.n	8001e02 <TIM_Base_SetConfig+0x2a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <TIM_Base_SetConfig+0xe8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d108      	bne.n	8001e14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2270      	movs	r2, #112	; 0x70
 8001e06:	4393      	bics	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <TIM_Base_SetConfig+0xe4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d018      	beq.n	8001e4e <TIM_Base_SetConfig+0x76>
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	05db      	lsls	r3, r3, #23
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d013      	beq.n	8001e4e <TIM_Base_SetConfig+0x76>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <TIM_Base_SetConfig+0xe8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00f      	beq.n	8001e4e <TIM_Base_SetConfig+0x76>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <TIM_Base_SetConfig+0xec>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00b      	beq.n	8001e4e <TIM_Base_SetConfig+0x76>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <TIM_Base_SetConfig+0xf0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <TIM_Base_SetConfig+0x76>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <TIM_Base_SetConfig+0xf4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d003      	beq.n	8001e4e <TIM_Base_SetConfig+0x76>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <TIM_Base_SetConfig+0xf8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d108      	bne.n	8001e60 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <TIM_Base_SetConfig+0xfc>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	4393      	bics	r3, r2
 8001e66:	001a      	movs	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <TIM_Base_SetConfig+0xe4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00b      	beq.n	8001ea6 <TIM_Base_SetConfig+0xce>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <TIM_Base_SetConfig+0xf0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <TIM_Base_SetConfig+0xce>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <TIM_Base_SetConfig+0xf4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <TIM_Base_SetConfig+0xce>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <TIM_Base_SetConfig+0xf8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d103      	bne.n	8001eae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	615a      	str	r2, [r3, #20]
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40002000 	.word	0x40002000
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800
 8001ed4:	fffffcff 	.word	0xfffffcff

08001ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4393      	bics	r3, r2
 8001eea:	001a      	movs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2270      	movs	r2, #112	; 0x70
 8001f06:	4393      	bics	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4393      	bics	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4393      	bics	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <TIM_OC1_SetConfig+0xf8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <TIM_OC1_SetConfig+0x76>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <TIM_OC1_SetConfig+0xfc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <TIM_OC1_SetConfig+0x76>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <TIM_OC1_SetConfig+0x100>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_OC1_SetConfig+0x76>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <TIM_OC1_SetConfig+0x104>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10c      	bne.n	8001f68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2208      	movs	r2, #8
 8001f52:	4393      	bics	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2204      	movs	r2, #4
 8001f64:	4393      	bics	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <TIM_OC1_SetConfig+0xf8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <TIM_OC1_SetConfig+0xb0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <TIM_OC1_SetConfig+0xfc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <TIM_OC1_SetConfig+0xb0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <TIM_OC1_SetConfig+0x100>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_OC1_SetConfig+0xb0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <TIM_OC1_SetConfig+0x104>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d111      	bne.n	8001fac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <TIM_OC1_SetConfig+0x108>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <TIM_OC1_SetConfig+0x10c>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	621a      	str	r2, [r3, #32]
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b006      	add	sp, #24
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40014400 	.word	0x40014400
 8001fdc:	40014800 	.word	0x40014800
 8001fe0:	fffffeff 	.word	0xfffffeff
 8001fe4:	fffffdff 	.word	0xfffffdff

08001fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <TIM_OC2_SetConfig+0xe8>)
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <TIM_OC2_SetConfig+0xec>)
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2220      	movs	r2, #32
 8002032:	4393      	bics	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <TIM_OC2_SetConfig+0xf0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10d      	bne.n	8002066 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	4393      	bics	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	4393      	bics	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <TIM_OC2_SetConfig+0xf0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_OC2_SetConfig+0x9e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <TIM_OC2_SetConfig+0xf4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_OC2_SetConfig+0x9e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <TIM_OC2_SetConfig+0xf8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_OC2_SetConfig+0x9e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <TIM_OC2_SetConfig+0xfc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d113      	bne.n	80020ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <TIM_OC2_SetConfig+0x100>)
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4a16      	ldr	r2, [pc, #88]	; (80020ec <TIM_OC2_SetConfig+0x104>)
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	621a      	str	r2, [r3, #32]
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b006      	add	sp, #24
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	ffff8fff 	.word	0xffff8fff
 80020d4:	fffffcff 	.word	0xfffffcff
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	fffffbff 	.word	0xfffffbff
 80020ec:	fffff7ff 	.word	0xfffff7ff

080020f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a35      	ldr	r2, [pc, #212]	; (80021d4 <TIM_OC3_SetConfig+0xe4>)
 8002100:	401a      	ands	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2270      	movs	r2, #112	; 0x70
 800211c:	4393      	bics	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2203      	movs	r2, #3
 8002124:	4393      	bics	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <TIM_OC3_SetConfig+0xe8>)
 8002136:	4013      	ands	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a24      	ldr	r2, [pc, #144]	; (80021dc <TIM_OC3_SetConfig+0xec>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10d      	bne.n	800216a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <TIM_OC3_SetConfig+0xf0>)
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <TIM_OC3_SetConfig+0xf4>)
 8002166:	4013      	ands	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <TIM_OC3_SetConfig+0xec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <TIM_OC3_SetConfig+0x9a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <TIM_OC3_SetConfig+0xf8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <TIM_OC3_SetConfig+0x9a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <TIM_OC3_SetConfig+0xfc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_OC3_SetConfig+0x9a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <TIM_OC3_SetConfig+0x100>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d113      	bne.n	80021b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <TIM_OC3_SetConfig+0x104>)
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <TIM_OC3_SetConfig+0x108>)
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	621a      	str	r2, [r3, #32]
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b006      	add	sp, #24
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	fffffeff 	.word	0xfffffeff
 80021d8:	fffffdff 	.word	0xfffffdff
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	fffff7ff 	.word	0xfffff7ff
 80021e4:	fffffbff 	.word	0xfffffbff
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800
 80021f4:	ffffefff 	.word	0xffffefff
 80021f8:	ffffdfff 	.word	0xffffdfff

080021fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <TIM_OC4_SetConfig+0xb0>)
 800220c:	401a      	ands	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <TIM_OC4_SetConfig+0xb4>)
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <TIM_OC4_SetConfig+0xb8>)
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <TIM_OC4_SetConfig+0xbc>)
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	031b      	lsls	r3, r3, #12
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a19      	ldr	r2, [pc, #100]	; (80022bc <TIM_OC4_SetConfig+0xc0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00b      	beq.n	8002274 <TIM_OC4_SetConfig+0x78>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <TIM_OC4_SetConfig+0xc4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_OC4_SetConfig+0x78>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <TIM_OC4_SetConfig+0xc8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_OC4_SetConfig+0x78>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <TIM_OC4_SetConfig+0xcc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d109      	bne.n	8002288 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <TIM_OC4_SetConfig+0xd0>)
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	621a      	str	r2, [r3, #32]
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b006      	add	sp, #24
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	ffffefff 	.word	0xffffefff
 80022b0:	ffff8fff 	.word	0xffff8fff
 80022b4:	fffffcff 	.word	0xfffffcff
 80022b8:	ffffdfff 	.word	0xffffdfff
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40014800 	.word	0x40014800
 80022cc:	ffffbfff 	.word	0xffffbfff

080022d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4393      	bics	r3, r2
 80022ea:	001a      	movs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	22f0      	movs	r2, #240	; 0xf0
 80022fa:	4393      	bics	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	220a      	movs	r2, #10
 800230c:	4393      	bics	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	621a      	str	r2, [r3, #32]
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b006      	add	sp, #24
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	2210      	movs	r2, #16
 800233e:	4393      	bics	r3, r2
 8002340:	001a      	movs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <TIM_TI2_ConfigInputStage+0x60>)
 8002356:	4013      	ands	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	031b      	lsls	r3, r3, #12
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	22a0      	movs	r2, #160	; 0xa0
 8002368:	4393      	bics	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	621a      	str	r2, [r3, #32]
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b006      	add	sp, #24
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	ffff0fff 	.word	0xffff0fff

08002390 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2270      	movs	r2, #112	; 0x70
 80023a4:	4393      	bics	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	2207      	movs	r2, #7
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <TIM_ETR_SetConfig+0x3c>)
 80023dc:	4013      	ands	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	021a      	lsls	r2, r3, #8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	609a      	str	r2, [r3, #8]
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b006      	add	sp, #24
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	ffff00ff 	.word	0xffff00ff

08002404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223c      	movs	r2, #60	; 0x3c
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002418:	2302      	movs	r3, #2
 800241a:	e047      	b.n	80024ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	223c      	movs	r2, #60	; 0x3c
 8002420:	2101      	movs	r1, #1
 8002422:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	223d      	movs	r2, #61	; 0x3d
 8002428:	2102      	movs	r1, #2
 800242a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2270      	movs	r2, #112	; 0x70
 8002440:	4393      	bics	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00f      	beq.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	429a      	cmp	r2, r3
 800246a:	d009      	beq.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d10c      	bne.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	4393      	bics	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	4313      	orrs	r3, r2
 8002490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223d      	movs	r2, #61	; 0x3d
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223c      	movs	r2, #60	; 0x3c
 80024a6:	2100      	movs	r1, #0
 80024a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40014000 	.word	0x40014000

080024c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	223c      	movs	r2, #60	; 0x3c
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80024d8:	2302      	movs	r3, #2
 80024da:	e03e      	b.n	800255a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	223c      	movs	r2, #60	; 0x3c
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	22ff      	movs	r2, #255	; 0xff
 80024e8:	4393      	bics	r3, r2
 80024ea:	001a      	movs	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80024f8:	401a      	ands	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a18      	ldr	r2, [pc, #96]	; (8002568 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002506:	401a      	ands	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002514:	401a      	ands	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002522:	401a      	ands	r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002530:	401a      	ands	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800253e:	401a      	ands	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	223c      	movs	r2, #60	; 0x3c
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	fffffcff 	.word	0xfffffcff
 8002568:	fffffbff 	.word	0xfffffbff
 800256c:	fffff7ff 	.word	0xfffff7ff
 8002570:	ffffefff 	.word	0xffffefff
 8002574:	ffffdfff 	.word	0xffffdfff
 8002578:	ffffbfff 	.word	0xffffbfff

0800257c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e044      	b.n	8002618 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2278      	movs	r2, #120	; 0x78
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fe f8e9 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2224      	movs	r2, #36	; 0x24
 80025aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	438a      	bics	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f830 	bl	8002624 <UART_SetConfig>
 80025c4:	0003      	movs	r3, r0
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e024      	b.n	8002618 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f9ab 	bl	8002934 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	490d      	ldr	r1, [pc, #52]	; (8002620 <HAL_UART_Init+0xa4>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	212a      	movs	r1, #42	; 0x2a
 80025fa:	438a      	bics	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f000 fa43 	bl	8002a9c <UART_CheckIdleState>
 8002616:	0003      	movs	r3, r0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	ffffb7ff 	.word	0xffffb7ff

08002624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800262c:	231e      	movs	r3, #30
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4aaf      	ldr	r2, [pc, #700]	; (8002910 <UART_SetConfig+0x2ec>)
 8002654:	4013      	ands	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4aaa      	ldr	r2, [pc, #680]	; (8002914 <UART_SetConfig+0x2f0>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4aa1      	ldr	r2, [pc, #644]	; (8002918 <UART_SetConfig+0x2f4>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a9d      	ldr	r2, [pc, #628]	; (800291c <UART_SetConfig+0x2f8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d127      	bne.n	80026fa <UART_SetConfig+0xd6>
 80026aa:	4b9d      	ldr	r3, [pc, #628]	; (8002920 <UART_SetConfig+0x2fc>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	2203      	movs	r2, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d00d      	beq.n	80026d2 <UART_SetConfig+0xae>
 80026b6:	d81b      	bhi.n	80026f0 <UART_SetConfig+0xcc>
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d014      	beq.n	80026e6 <UART_SetConfig+0xc2>
 80026bc:	d818      	bhi.n	80026f0 <UART_SetConfig+0xcc>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <UART_SetConfig+0xa4>
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d00a      	beq.n	80026dc <UART_SetConfig+0xb8>
 80026c6:	e013      	b.n	80026f0 <UART_SetConfig+0xcc>
 80026c8:	231f      	movs	r3, #31
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e065      	b.n	800279e <UART_SetConfig+0x17a>
 80026d2:	231f      	movs	r3, #31
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2202      	movs	r2, #2
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e060      	b.n	800279e <UART_SetConfig+0x17a>
 80026dc:	231f      	movs	r3, #31
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e05b      	b.n	800279e <UART_SetConfig+0x17a>
 80026e6:	231f      	movs	r3, #31
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2208      	movs	r2, #8
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e056      	b.n	800279e <UART_SetConfig+0x17a>
 80026f0:	231f      	movs	r3, #31
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2210      	movs	r2, #16
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e051      	b.n	800279e <UART_SetConfig+0x17a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a89      	ldr	r2, [pc, #548]	; (8002924 <UART_SetConfig+0x300>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d134      	bne.n	800276e <UART_SetConfig+0x14a>
 8002704:	4b86      	ldr	r3, [pc, #536]	; (8002920 <UART_SetConfig+0x2fc>)
 8002706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002708:	23c0      	movs	r3, #192	; 0xc0
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	4013      	ands	r3, r2
 800270e:	22c0      	movs	r2, #192	; 0xc0
 8002710:	0292      	lsls	r2, r2, #10
 8002712:	4293      	cmp	r3, r2
 8002714:	d017      	beq.n	8002746 <UART_SetConfig+0x122>
 8002716:	22c0      	movs	r2, #192	; 0xc0
 8002718:	0292      	lsls	r2, r2, #10
 800271a:	4293      	cmp	r3, r2
 800271c:	d822      	bhi.n	8002764 <UART_SetConfig+0x140>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0292      	lsls	r2, r2, #10
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <UART_SetConfig+0x136>
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	0292      	lsls	r2, r2, #10
 800272a:	4293      	cmp	r3, r2
 800272c:	d81a      	bhi.n	8002764 <UART_SetConfig+0x140>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <UART_SetConfig+0x118>
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	0252      	lsls	r2, r2, #9
 8002736:	4293      	cmp	r3, r2
 8002738:	d00a      	beq.n	8002750 <UART_SetConfig+0x12c>
 800273a:	e013      	b.n	8002764 <UART_SetConfig+0x140>
 800273c:	231f      	movs	r3, #31
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e02b      	b.n	800279e <UART_SetConfig+0x17a>
 8002746:	231f      	movs	r3, #31
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2202      	movs	r2, #2
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e026      	b.n	800279e <UART_SetConfig+0x17a>
 8002750:	231f      	movs	r3, #31
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2204      	movs	r2, #4
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e021      	b.n	800279e <UART_SetConfig+0x17a>
 800275a:	231f      	movs	r3, #31
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2208      	movs	r2, #8
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e01c      	b.n	800279e <UART_SetConfig+0x17a>
 8002764:	231f      	movs	r3, #31
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	2210      	movs	r2, #16
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e017      	b.n	800279e <UART_SetConfig+0x17a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6d      	ldr	r2, [pc, #436]	; (8002928 <UART_SetConfig+0x304>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d104      	bne.n	8002782 <UART_SetConfig+0x15e>
 8002778:	231f      	movs	r3, #31
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e00d      	b.n	800279e <UART_SetConfig+0x17a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a69      	ldr	r2, [pc, #420]	; (800292c <UART_SetConfig+0x308>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d104      	bne.n	8002796 <UART_SetConfig+0x172>
 800278c:	231f      	movs	r3, #31
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	e003      	b.n	800279e <UART_SetConfig+0x17a>
 8002796:	231f      	movs	r3, #31
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2210      	movs	r2, #16
 800279c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d15c      	bne.n	8002864 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80027aa:	231f      	movs	r3, #31
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d015      	beq.n	80027e0 <UART_SetConfig+0x1bc>
 80027b4:	dc18      	bgt.n	80027e8 <UART_SetConfig+0x1c4>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d00d      	beq.n	80027d6 <UART_SetConfig+0x1b2>
 80027ba:	dc15      	bgt.n	80027e8 <UART_SetConfig+0x1c4>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <UART_SetConfig+0x1a2>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d005      	beq.n	80027d0 <UART_SetConfig+0x1ac>
 80027c4:	e010      	b.n	80027e8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c6:	f7fe fff7 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 80027ca:	0003      	movs	r3, r0
 80027cc:	61bb      	str	r3, [r7, #24]
        break;
 80027ce:	e012      	b.n	80027f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027d0:	4b57      	ldr	r3, [pc, #348]	; (8002930 <UART_SetConfig+0x30c>)
 80027d2:	61bb      	str	r3, [r7, #24]
        break;
 80027d4:	e00f      	b.n	80027f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027d6:	f7fe ff71 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 80027da:	0003      	movs	r3, r0
 80027dc:	61bb      	str	r3, [r7, #24]
        break;
 80027de:	e00a      	b.n	80027f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	61bb      	str	r3, [r7, #24]
        break;
 80027e6:	e006      	b.n	80027f6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027ec:	231e      	movs	r3, #30
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
        break;
 80027f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d100      	bne.n	80027fe <UART_SetConfig+0x1da>
 80027fc:	e07a      	b.n	80028f4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	005a      	lsls	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	18d2      	adds	r2, r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f7fd fc79 	bl	8000108 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d91c      	bls.n	800285a <UART_SetConfig+0x236>
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	025b      	lsls	r3, r3, #9
 8002826:	429a      	cmp	r2, r3
 8002828:	d217      	bcs.n	800285a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	b29a      	uxth	r2, r3
 800282e:	200e      	movs	r0, #14
 8002830:	183b      	adds	r3, r7, r0
 8002832:	210f      	movs	r1, #15
 8002834:	438a      	bics	r2, r1
 8002836:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	2207      	movs	r2, #7
 8002840:	4013      	ands	r3, r2
 8002842:	b299      	uxth	r1, r3
 8002844:	183b      	adds	r3, r7, r0
 8002846:	183a      	adds	r2, r7, r0
 8002848:	8812      	ldrh	r2, [r2, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	183a      	adds	r2, r7, r0
 8002854:	8812      	ldrh	r2, [r2, #0]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	e04c      	b.n	80028f4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800285a:	231e      	movs	r3, #30
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e047      	b.n	80028f4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002864:	231f      	movs	r3, #31
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d015      	beq.n	800289a <UART_SetConfig+0x276>
 800286e:	dc18      	bgt.n	80028a2 <UART_SetConfig+0x27e>
 8002870:	2b04      	cmp	r3, #4
 8002872:	d00d      	beq.n	8002890 <UART_SetConfig+0x26c>
 8002874:	dc15      	bgt.n	80028a2 <UART_SetConfig+0x27e>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <UART_SetConfig+0x25c>
 800287a:	2b02      	cmp	r3, #2
 800287c:	d005      	beq.n	800288a <UART_SetConfig+0x266>
 800287e:	e010      	b.n	80028a2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002880:	f7fe ff9a 	bl	80017b8 <HAL_RCC_GetPCLK1Freq>
 8002884:	0003      	movs	r3, r0
 8002886:	61bb      	str	r3, [r7, #24]
        break;
 8002888:	e012      	b.n	80028b0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <UART_SetConfig+0x30c>)
 800288c:	61bb      	str	r3, [r7, #24]
        break;
 800288e:	e00f      	b.n	80028b0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002890:	f7fe ff14 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]
        break;
 8002898:	e00a      	b.n	80028b0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	61bb      	str	r3, [r7, #24]
        break;
 80028a0:	e006      	b.n	80028b0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028a6:	231e      	movs	r3, #30
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
        break;
 80028ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01e      	beq.n	80028f4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	085a      	lsrs	r2, r3, #1
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	18d2      	adds	r2, r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0019      	movs	r1, r3
 80028c6:	0010      	movs	r0, r2
 80028c8:	f7fd fc1e 	bl	8000108 <__udivsi3>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	d90a      	bls.n	80028ec <UART_SetConfig+0x2c8>
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	429a      	cmp	r2, r3
 80028de:	d205      	bcs.n	80028ec <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e003      	b.n	80028f4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80028ec:	231e      	movs	r3, #30
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002900:	231e      	movs	r3, #30
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b008      	add	sp, #32
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	efff69f3 	.word	0xefff69f3
 8002914:	ffffcfff 	.word	0xffffcfff
 8002918:	fffff4ff 	.word	0xfffff4ff
 800291c:	40013800 	.word	0x40013800
 8002920:	40021000 	.word	0x40021000
 8002924:	40004400 	.word	0x40004400
 8002928:	40004800 	.word	0x40004800
 800292c:	40004c00 	.word	0x40004c00
 8002930:	007a1200 	.word	0x007a1200

08002934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2201      	movs	r2, #1
 8002942:	4013      	ands	r3, r2
 8002944:	d00b      	beq.n	800295e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a4a      	ldr	r2, [pc, #296]	; (8002a78 <UART_AdvFeatureConfig+0x144>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d00b      	beq.n	8002980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <UART_AdvFeatureConfig+0x148>)
 8002970:	4013      	ands	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	2204      	movs	r2, #4
 8002986:	4013      	ands	r3, r2
 8002988:	d00b      	beq.n	80029a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <UART_AdvFeatureConfig+0x14c>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2208      	movs	r2, #8
 80029a8:	4013      	ands	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a34      	ldr	r2, [pc, #208]	; (8002a84 <UART_AdvFeatureConfig+0x150>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <UART_AdvFeatureConfig+0x154>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2220      	movs	r2, #32
 80029ec:	4013      	ands	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <UART_AdvFeatureConfig+0x158>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2240      	movs	r2, #64	; 0x40
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <UART_AdvFeatureConfig+0x15c>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	035b      	lsls	r3, r3, #13
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d10b      	bne.n	8002a4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <UART_AdvFeatureConfig+0x160>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	4013      	ands	r3, r2
 8002a56:	d00b      	beq.n	8002a70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <UART_AdvFeatureConfig+0x164>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]
  }
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	fffdffff 	.word	0xfffdffff
 8002a7c:	fffeffff 	.word	0xfffeffff
 8002a80:	fffbffff 	.word	0xfffbffff
 8002a84:	ffff7fff 	.word	0xffff7fff
 8002a88:	ffffefff 	.word	0xffffefff
 8002a8c:	ffffdfff 	.word	0xffffdfff
 8002a90:	ffefffff 	.word	0xffefffff
 8002a94:	ff9fffff 	.word	0xff9fffff
 8002a98:	fff7ffff 	.word	0xfff7ffff

08002a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b092      	sub	sp, #72	; 0x48
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2284      	movs	r2, #132	; 0x84
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aac:	f7fd ff52 	bl	8000954 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2208      	movs	r2, #8
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d12c      	bne.n	8002b1c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac4:	2280      	movs	r2, #128	; 0x80
 8002ac6:	0391      	lsls	r1, r2, #14
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <UART_CheckIdleState+0x148>)
 8002acc:	9200      	str	r2, [sp, #0]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f000 f88c 	bl	8002bec <UART_WaitOnFlagUntilTimeout>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d021      	beq.n	8002b1c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	f383 8810 	msr	PRIMASK, r3
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	438a      	bics	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2278      	movs	r2, #120	; 0x78
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e05f      	b.n	8002bdc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d146      	bne.n	8002bb8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	03d1      	lsls	r1, r2, #15
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4a2c      	ldr	r2, [pc, #176]	; (8002be4 <UART_CheckIdleState+0x148>)
 8002b34:	9200      	str	r2, [sp, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f000 f858 	bl	8002bec <UART_WaitOnFlagUntilTimeout>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d03b      	beq.n	8002bb8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b46:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4921      	ldr	r1, [pc, #132]	; (8002be8 <UART_CheckIdleState+0x14c>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b72:	f3ef 8310 	mrs	r3, PRIMASK
 8002b76:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b78:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	438a      	bics	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ba2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	2120      	movs	r1, #32
 8002baa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2278      	movs	r2, #120	; 0x78
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e011      	b.n	8002bdc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2278      	movs	r2, #120	; 0x78
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b010      	add	sp, #64	; 0x40
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	01ffffff 	.word	0x01ffffff
 8002be8:	fffffedf 	.word	0xfffffedf

08002bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bfc:	e04b      	b.n	8002c96 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3301      	adds	r3, #1
 8002c02:	d048      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fd fea6 	bl	8000954 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04b      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2204      	movs	r2, #4
 8002c26:	4013      	ands	r3, r2
 8002c28:	d035      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	2208      	movs	r2, #8
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d111      	bne.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 f83c 	bl	8002cc0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2284      	movs	r2, #132	; 0x84
 8002c4c:	2108      	movs	r1, #8
 8002c4e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2278      	movs	r2, #120	; 0x78
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e02c      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	401a      	ands	r2, r3
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d112      	bne.n	8002c96 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2280      	movs	r2, #128	; 0x80
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f81f 	bl	8002cc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2284      	movs	r2, #132	; 0x84
 8002c86:	2120      	movs	r1, #32
 8002c88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2278      	movs	r2, #120	; 0x78
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e00f      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	4153      	adcs	r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	001a      	movs	r2, r3
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d0a4      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b004      	add	sp, #16
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8002cce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f383 8810 	msr	PRIMASK, r3
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4926      	ldr	r1, [pc, #152]	; (8002d84 <UART_EndRxTransfer+0xc4>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f383 8810 	msr	PRIMASK, r3
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	623b      	str	r3, [r7, #32]
  return(result);
 8002d00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
 8002d04:	2301      	movs	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d118      	bne.n	8002d66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d34:	f3ef 8310 	mrs	r3, PRIMASK
 8002d38:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	2301      	movs	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2110      	movs	r1, #16
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	2120      	movs	r1, #32
 8002d6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b00e      	add	sp, #56	; 0x38
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	fffffedf 	.word	0xfffffedf

08002d88 <memset>:
 8002d88:	0003      	movs	r3, r0
 8002d8a:	1882      	adds	r2, r0, r2
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <memset+0xa>
 8002d90:	4770      	bx	lr
 8002d92:	7019      	strb	r1, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e7f9      	b.n	8002d8c <memset+0x4>

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	4c0c      	ldr	r4, [pc, #48]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4d0d      	ldr	r5, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	2600      	movs	r6, #0
 8002daa:	f000 f819 	bl	8002de0 <_init>
 8002dae:	4c0a      	ldr	r4, [pc, #40]	; (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4d0a      	ldr	r5, [pc, #40]	; (8002ddc <__libc_init_array+0x44>)
 8002db2:	1b64      	subs	r4, r4, r5
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	00b3      	lsls	r3, r6, #2
 8002dbe:	58eb      	ldr	r3, [r5, r3]
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	00b3      	lsls	r3, r6, #2
 8002dc8:	58eb      	ldr	r3, [r5, r3]
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	08002e30 	.word	0x08002e30
 8002dd4:	08002e30 	.word	0x08002e30
 8002dd8:	08002e34 	.word	0x08002e34
 8002ddc:	08002e30 	.word	0x08002e30

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
