
DRV8323.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005024  08005024  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005024  08005024  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005024  08005024  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800502c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08005094  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005094  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5b9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d3  00000000  00000000  0002f68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00031a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc2  00000000  00000000  00032970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015412  00000000  00000000  00033532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012266  00000000  00000000  00048944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ddf7  00000000  00000000  0005abaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d44  00000000  00000000  000d89a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000dc6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e1c 	.word	0x08004e1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004e1c 	.word	0x08004e1c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <drv8323_init>:
#include "drv8323_pwm.h"
#include "drv8323_spi.h"

extern SPI_HandleTypeDef hspi1;

void drv8323_init(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	drv8323_set_enable(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 f891 	bl	8000360 <drv8323_set_enable>
	DRV832x_initSPIInterface(&hspi1);
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <drv8323_init+0x24>)
 8000240:	0018      	movs	r0, r3
 8000242:	f000 f929 	bl	8000498 <DRV832x_initSPIInterface>
	drv_pwm_set_duty_cycle(50);
 8000246:	2032      	movs	r0, #50	; 0x32
 8000248:	f000 f8ba 	bl	80003c0 <drv_pwm_set_duty_cycle>
	DRV832x_blocking_configure();
 800024c:	f000 fa20 	bl	8000690 <DRV832x_blocking_configure>
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	200000b8 	.word	0x200000b8

0800025c <drv832_set_dir>:

void drv832_set_dir(uint8_t dir){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	0002      	movs	r2, r0
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	701a      	strb	r2, [r3, #0]
	drv8323io_set_dir(dir);
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	0018      	movs	r0, r3
 800026e:	f000 f847 	bl	8000300 <drv8323io_set_dir>
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	b002      	add	sp, #8
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <drv832_set_speed>:

void drv832_set_speed(uint8_t speed){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	0002      	movs	r2, r0
 8000284:	1dfb      	adds	r3, r7, #7
 8000286:	701a      	strb	r2, [r3, #0]
	speed = speed;
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	1dfa      	adds	r2, r7, #7
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	701a      	strb	r2, [r3, #0]
	drv_pwm_set_frequency(10000);
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <drv832_set_speed+0x2c>)
 8000292:	0018      	movs	r0, r3
 8000294:	f000 f8b6 	bl	8000404 <drv_pwm_set_frequency>
	drv_pwm_set_duty_cycle(50);
 8000298:	2032      	movs	r0, #50	; 0x32
 800029a:	f000 f891 	bl	80003c0 <drv_pwm_set_duty_cycle>
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b002      	add	sp, #8
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	00002710 	.word	0x00002710

080002ac <drv832_start>:

void drv832_start(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	drv8323_set_brake(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 f83d 	bl	8000330 <drv8323_set_brake>
	drv_pwm_start();
 80002b6:	f000 f86b 	bl	8000390 <drv_pwm_start>
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <drv832_stop>:
void drv832_stop(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	drv8323_set_brake(0);
 80002c4:	2000      	movs	r0, #0
 80002c6:	f000 f833 	bl	8000330 <drv8323_set_brake>
	drv_pwm_stop();
 80002ca:	f000 f86d 	bl	80003a8 <drv_pwm_stop>
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <drv8323io_set_cs>:
//#define DRV_ENABLE_Pin GPIO_PIN_0
//#define DRV_ENABLE_GPIO_Port GPIOD
//#define DRV_DIR_Pin GPIO_PIN_7
//#define DRV_DIR_GPIO_Port GPIOD

void drv8323io_set_cs(uint8_t level) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	0002      	movs	r2, r0
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, level? GPIO_PIN_SET : GPIO_PIN_RESET );
 80002e0:	1dfb      	adds	r3, r7, #7
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	1e5a      	subs	r2, r3, #1
 80002e6:	4193      	sbcs	r3, r2
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	001a      	movs	r2, r3
 80002ec:	2390      	movs	r3, #144	; 0x90
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2110      	movs	r1, #16
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 f8f4 	bl	80014e0 <HAL_GPIO_WritePin>
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b002      	add	sp, #8
 80002fe:	bd80      	pop	{r7, pc}

08000300 <drv8323io_set_dir>:

void drv8323io_set_dir(uint8_t level) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_DIR_GPIO_Port, DRV_DIR_Pin, level? GPIO_PIN_SET : GPIO_PIN_RESET );
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	1e5a      	subs	r2, r3, #1
 8000312:	4193      	sbcs	r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	001a      	movs	r2, r3
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <drv8323io_set_dir+0x2c>)
 800031a:	2180      	movs	r1, #128	; 0x80
 800031c:	0018      	movs	r0, r3
 800031e:	f001 f8df 	bl	80014e0 <HAL_GPIO_WritePin>
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	48000c00 	.word	0x48000c00

08000330 <drv8323_set_brake>:

void drv8323_set_brake(uint8_t level){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	0002      	movs	r2, r0
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_BRAKE_GPIO_Port, DRV_BRAKE_Pin, level? GPIO_PIN_SET : GPIO_PIN_RESET );
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	4193      	sbcs	r3, r2
 8000344:	b2db      	uxtb	r3, r3
 8000346:	001a      	movs	r2, r3
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <drv8323_set_brake+0x2c>)
 800034e:	0019      	movs	r1, r3
 8000350:	f001 f8c6 	bl	80014e0 <HAL_GPIO_WritePin>
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000c00 	.word	0x48000c00

08000360 <drv8323_set_enable>:

void drv8323_set_enable(uint8_t level){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	0002      	movs	r2, r0
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, level? GPIO_PIN_SET : GPIO_PIN_RESET );
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	1e5a      	subs	r2, r3, #1
 8000372:	4193      	sbcs	r3, r2
 8000374:	b2db      	uxtb	r3, r3
 8000376:	001a      	movs	r2, r3
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <drv8323_set_enable+0x2c>)
 800037a:	2101      	movs	r1, #1
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f8af 	bl	80014e0 <HAL_GPIO_WritePin>
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b002      	add	sp, #8
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	48000c00 	.word	0x48000c00

08000390 <drv_pwm_start>:
extern TIM_HandleTypeDef htim15;



void drv_pwm_start(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <drv_pwm_start+0x14>)
 8000396:	2100      	movs	r1, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fa6b 	bl	8002874 <HAL_TIM_PWM_Start>
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000011c 	.word	0x2000011c

080003a8 <drv_pwm_stop>:
void drv_pwm_stop(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <drv_pwm_stop+0x14>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	0018      	movs	r0, r3
 80003b2:	f002 fb17 	bl	80029e4 <HAL_TIM_PWM_Stop>
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2000011c 	.word	0x2000011c

080003c0 <drv_pwm_set_duty_cycle>:

void drv_pwm_set_duty_cycle(uint8_t percent){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	0002      	movs	r2, r0
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	701a      	strb	r2, [r3, #0]
 uint16_t reload = __HAL_TIM_GET_AUTORELOAD(&htim15);
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <drv_pwm_set_duty_cycle+0x40>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003d2:	210e      	movs	r1, #14
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	801a      	strh	r2, [r3, #0]
 __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,(reload/100)*percent);
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	2164      	movs	r1, #100	; 0x64
 80003de:	0018      	movs	r0, r3
 80003e0:	f7ff fe9c 	bl	800011c <__udivsi3>
 80003e4:	0003      	movs	r3, r0
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	001a      	movs	r2, r3
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	435a      	muls	r2, r3
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <drv_pwm_set_duty_cycle+0x40>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b004      	add	sp, #16
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	2000011c 	.word	0x2000011c

08000404 <drv_pwm_set_frequency>:


/*input 1000000hz*/
#define TIMER_FRE 48000000
void drv_pwm_set_frequency(uint16_t hz){
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dbb      	adds	r3, r7, #6
 800040e:	801a      	strh	r2, [r3, #0]
	uint32_t prescale = htim15.Instance->PSC;
 8000410:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <drv_pwm_set_frequency+0x8c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000416:	60fb      	str	r3, [r7, #12]
	if((TIMER_FRE/(prescale+1)/hz) > 65535) {
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	0019      	movs	r1, r3
 800041e:	481d      	ldr	r0, [pc, #116]	; (8000494 <drv_pwm_set_frequency+0x90>)
 8000420:	f7ff fe7c 	bl	800011c <__udivsi3>
 8000424:	0003      	movs	r3, r0
 8000426:	001a      	movs	r2, r3
 8000428:	1dbb      	adds	r3, r7, #6
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	0019      	movs	r1, r3
 800042e:	0010      	movs	r0, r2
 8000430:	f7ff fe74 	bl	800011c <__udivsi3>
 8000434:	0003      	movs	r3, r0
 8000436:	001a      	movs	r2, r3
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	025b      	lsls	r3, r3, #9
 800043c:	429a      	cmp	r2, r3
 800043e:	d300      	bcc.n	8000442 <drv_pwm_set_frequency+0x3e>
		//todo
		while(1);
 8000440:	e7fe      	b.n	8000440 <drv_pwm_set_frequency+0x3c>
	}
	__HAL_TIM_SET_AUTORELOAD(&htim15,(TIMER_FRE/(prescale+1) / hz));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3301      	adds	r3, #1
 8000446:	0019      	movs	r1, r3
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <drv_pwm_set_frequency+0x90>)
 800044a:	f7ff fe67 	bl	800011c <__udivsi3>
 800044e:	0003      	movs	r3, r0
 8000450:	0018      	movs	r0, r3
 8000452:	1dbb      	adds	r3, r7, #6
 8000454:	881a      	ldrh	r2, [r3, #0]
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <drv_pwm_set_frequency+0x8c>)
 8000458:	681c      	ldr	r4, [r3, #0]
 800045a:	0011      	movs	r1, r2
 800045c:	f7ff fe5e 	bl	800011c <__udivsi3>
 8000460:	0003      	movs	r3, r0
 8000462:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	0019      	movs	r1, r3
 800046a:	480a      	ldr	r0, [pc, #40]	; (8000494 <drv_pwm_set_frequency+0x90>)
 800046c:	f7ff fe56 	bl	800011c <__udivsi3>
 8000470:	0003      	movs	r3, r0
 8000472:	001a      	movs	r2, r3
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	0019      	movs	r1, r3
 800047a:	0010      	movs	r0, r2
 800047c:	f7ff fe4e 	bl	800011c <__udivsi3>
 8000480:	0003      	movs	r3, r0
 8000482:	001a      	movs	r2, r3
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <drv_pwm_set_frequency+0x8c>)
 8000486:	60da      	str	r2, [r3, #12]
// __HAL_T / IM_SET_AUTORELOAD(&htim15,)
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b005      	add	sp, #20
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	2000011c 	.word	0x2000011c
 8000494:	02dc6c00 	.word	0x02dc6c00

08000498 <DRV832x_initSPIInterface>:
//		printf("spi2Tx: 0x%x, spi2Rx: 0x%x\n\r", s_drv832xSPI.SPI_TX_Data[0],s_drv832xSPI.SPI_RX_Data[0]);
//	}
//}


void DRV832x_initSPIInterface(SPI_HandleTypeDef* pspi){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
//	DRV832x_enable(Enable_GPIOx,Enable_GPIO_Pin);
//	s_drv832xSPI.PORT_GPIOx = GPIOx;
//	s_drv832xSPI.CS_GPIO_Pin = GPIO_Pin;
	s_drv832xSPI.pSPI_Handle = pspi;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <DRV832x_initSPIInterface+0x28>)
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
	s_drv832xSPI.SPI_TX_Flag = 0;
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <DRV832x_initSPIInterface+0x28>)
 80004a8:	2232      	movs	r2, #50	; 0x32
 80004aa:	2100      	movs	r1, #0
 80004ac:	5499      	strb	r1, [r3, r2]
	s_drv832xSPI.SPI_RX_Flag = 0;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <DRV832x_initSPIInterface+0x28>)
 80004b0:	2233      	movs	r2, #51	; 0x33
 80004b2:	2100      	movs	r1, #0
 80004b4:	5499      	strb	r1, [r3, r2]

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000084 	.word	0x20000084

080004c4 <DRV832x_trigger_spi_write>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
}


uint16_t DRV832x_trigger_spi_write(uint16_t val)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	0002      	movs	r2, r0
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	801a      	strh	r2, [r3, #0]
	s_drv832xSPI.SPI_TX_Data[0] = val;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <DRV832x_trigger_spi_write+0x48>)
 80004d2:	1dba      	adds	r2, r7, #6
 80004d4:	8812      	ldrh	r2, [r2, #0]
 80004d6:	83da      	strh	r2, [r3, #30]
	drv8323io_set_cs(0);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff fefb 	bl	80002d4 <drv8323io_set_cs>
	HAL_SPI_TransmitReceive(s_drv832xSPI.pSPI_Handle, (uint8_t*)s_drv832xSPI.SPI_TX_Data, (uint8_t*)s_drv832xSPI.SPI_RX_Data,2,1000);
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <DRV832x_trigger_spi_write+0x48>)
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <DRV832x_trigger_spi_write+0x4c>)
 80004e4:	490b      	ldr	r1, [pc, #44]	; (8000514 <DRV832x_trigger_spi_write+0x50>)
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2302      	movs	r3, #2
 80004ee:	f001 fdc1 	bl	8002074 <HAL_SPI_TransmitReceive>
	drv8323io_set_cs(1);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff feee 	bl	80002d4 <drv8323io_set_cs>
	return s_drv832xSPI.SPI_RX_Data[0] & 0x7FF;
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <DRV832x_trigger_spi_write+0x48>)
 80004fa:	895b      	ldrh	r3, [r3, #10]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	055b      	lsls	r3, r3, #21
 8000500:	0d5b      	lsrs	r3, r3, #21
 8000502:	b29b      	uxth	r3, r3
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000084 	.word	0x20000084
 8000510:	2000008e 	.word	0x2000008e
 8000514:	200000a2 	.word	0x200000a2

08000518 <DRV832x_trigger_read_register>:
    DRV832x_trigger_spi_write(val);
    return s_drv832xSPI.SPI_RX_Data[0] & 0x7FF;
}

uint16_t DRV832x_trigger_read_register(int reg)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    return DRV832x_trigger_spi_write(READ_CMD | (reg<<11));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	02db      	lsls	r3, r3, #11
 8000524:	b21b      	sxth	r3, r3
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <DRV832x_trigger_read_register+0x28>)
 8000528:	4313      	orrs	r3, r2
 800052a:	b21b      	sxth	r3, r3
 800052c:	b29b      	uxth	r3, r3
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ffc8 	bl	80004c4 <DRV832x_trigger_spi_write>
 8000534:	0003      	movs	r3, r0
}
 8000536:	0018      	movs	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	ffff8000 	.word	0xffff8000

08000544 <DRV832x_write_register>:

void DRV832x_write_register(int reg, int val)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	DRV832x_trigger_spi_write((reg<<11) | val);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	02db      	lsls	r3, r3, #11
 8000552:	b21a      	sxth	r2, r3
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21b      	sxth	r3, r3
 800055c:	b29b      	uxth	r3, r3
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ffb0 	bl	80004c4 <DRV832x_trigger_spi_write>
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <DRV832x_write_DCR>:

void DRV832x_write_DCR(int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
    uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	025b      	lsls	r3, r3, #9
 800057e:	b21b      	sxth	r3, r3
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0152      	lsls	r2, r2, #5
 8000584:	4313      	orrs	r3, r2
 8000586:	b21a      	sxth	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b21b      	sxth	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b21a      	sxth	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	01db      	lsls	r3, r3, #7
 8000596:	b21b      	sxth	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b21a      	sxth	r2, r3
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	015b      	lsls	r3, r3, #5
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b21a      	sxth	r2, r3
 80005ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b21b      	sxth	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b21a      	sxth	r2, r3
 80005d6:	2116      	movs	r1, #22
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	801a      	strh	r2, [r3, #0]
    DRV832x_trigger_spi_write(val);
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff6f 	bl	80004c4 <DRV832x_trigger_spi_write>
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b006      	add	sp, #24
 80005ec:	bd80      	pop	{r7, pc}

080005ee <DRV832x_write_CSACR>:
{
    uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
    DRV832x_trigger_spi_write(val);
    }
void DRV832x_write_CSACR(int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
    uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	029b      	lsls	r3, r3, #10
 8000600:	b21b      	sxth	r3, r3
 8000602:	22c0      	movs	r2, #192	; 0xc0
 8000604:	0192      	lsls	r2, r2, #6
 8000606:	4313      	orrs	r3, r2
 8000608:	b21a      	sxth	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21a      	sxth	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21a      	sxth	r2, r3
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	019b      	lsls	r3, r3, #6
 8000622:	b21b      	sxth	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b21a      	sxth	r2, r3
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	015b      	lsls	r3, r3, #5
 800062c:	b21b      	sxth	r3, r3
 800062e:	4313      	orrs	r3, r2
 8000630:	b21a      	sxth	r2, r3
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21a      	sxth	r2, r3
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	b21a      	sxth	r2, r3
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21a      	sxth	r2, r3
 8000650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21a      	sxth	r2, r3
 8000658:	2116      	movs	r1, #22
 800065a:	187b      	adds	r3, r7, r1
 800065c:	801a      	strh	r2, [r3, #0]
    DRV832x_trigger_spi_write(val);
 800065e:	187b      	adds	r3, r7, r1
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ff2e 	bl	80004c4 <DRV832x_trigger_spi_write>
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b006      	add	sp, #24
 800066e:	bd80      	pop	{r7, pc}

08000670 <DRV832x_calibrate>:
    uint16_t val = (s_drv832xSPI.SPI_RX_Data[0]) | (0x1<<2);
    DRV832x_write_register(DCR, val);
}

void DRV832x_calibrate(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
 8000676:	1dbb      	adds	r3, r7, #6
 8000678:	221c      	movs	r2, #28
 800067a:	801a      	strh	r2, [r3, #0]
    DRV832x_write_register(CSACR, val);
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	0019      	movs	r1, r3
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff ff5e 	bl	8000544 <DRV832x_write_register>
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}

08000690 <DRV832x_blocking_configure>:

//TODO Use this method to configure the drv8323
void DRV832x_blocking_configure(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af06      	add	r7, sp, #24
	printf("\n\rConfiguring DRV8323\n\r");
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <DRV832x_blocking_configure+0xcc>)
 8000698:	0018      	movs	r0, r3
 800069a:	f003 fd19 	bl	80040d0 <iprintf>
	printf("1:write DRV8323_CSAR\n\r");
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <DRV832x_blocking_configure+0xd0>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f003 fd15 	bl	80040d0 <iprintf>
	DRV832x_calibrate();
 80006a6:	f7ff ffe3 	bl	8000670 <DRV832x_calibrate>
	HAL_Delay(5);
 80006aa:	2005      	movs	r0, #5
 80006ac:	f000 fcc8 	bl	8001040 <HAL_Delay>
	//Driver Control Register config.
	printf("2:write DRV8323_DCR\n\r");
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <DRV832x_blocking_configure+0xd4>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 fd0c 	bl	80040d0 <iprintf>
	DRV832x_write_DCR(DIS_CPUV_EN, DIS_GDF_DIS, OTW_REP_DIS, PWM_MODE_1X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80006b8:	2301      	movs	r3, #1
 80006ba:	9304      	str	r3, [sp, #16]
 80006bc:	2300      	movs	r3, #0
 80006be:	9303      	str	r3, [sp, #12]
 80006c0:	2300      	movs	r3, #0
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2300      	movs	r3, #0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2302      	movs	r3, #2
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	2000      	movs	r0, #0
 80006d4:	f7ff ff4a 	bl	800056c <DRV832x_write_DCR>
	printf("spi2Tx: 0x%x, spi2Rx: 0x%x\n\r", s_drv832xSPI.SPI_TX_Data[0],s_drv832xSPI.SPI_RX_Data[0]);
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <DRV832x_blocking_configure+0xd8>)
 80006da:	8bdb      	ldrh	r3, [r3, #30]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	0019      	movs	r1, r3
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <DRV832x_blocking_configure+0xd8>)
 80006e2:	895b      	ldrh	r3, [r3, #10]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	001a      	movs	r2, r3
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <DRV832x_blocking_configure+0xdc>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f003 fcf0 	bl	80040d0 <iprintf>
	HAL_Delay(5);
 80006f0:	2005      	movs	r0, #5
 80006f2:	f000 fca5 	bl	8001040 <HAL_Delay>
	printf("3:read DRV8323_DCR : 0x%X\n\r",DRV832x_trigger_read_register(DCR));
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff ff0e 	bl	8000518 <DRV832x_trigger_read_register>
 80006fc:	0003      	movs	r3, r0
 80006fe:	001a      	movs	r2, r3
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <DRV832x_blocking_configure+0xe0>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f003 fce3 	bl	80040d0 <iprintf>

	HAL_Delay(5);
 800070a:	2005      	movs	r0, #5
 800070c:	f000 fc98 	bl	8001040 <HAL_Delay>
	//Set Current Sense Register
    printf("4:write DRV8323_CSAR\n\r");
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <DRV832x_blocking_configure+0xe4>)
 8000712:	0018      	movs	r0, r3
 8000714:	f003 fcdc 	bl	80040d0 <iprintf>
    DRV832x_write_CSACR(CSA_FET_SP, VREF_DIV_2, 0x0, CSA_GAIN_40, DIS_SEN_EN, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8000718:	2303      	movs	r3, #3
 800071a:	9304      	str	r3, [sp, #16]
 800071c:	2301      	movs	r3, #1
 800071e:	9303      	str	r3, [sp, #12]
 8000720:	2301      	movs	r3, #1
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2300      	movs	r3, #0
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2303      	movs	r3, #3
 800072e:	2200      	movs	r2, #0
 8000730:	2101      	movs	r1, #1
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff ff5b 	bl	80005ee <DRV832x_write_CSACR>
    printf("spi2Tx: 0x%x, spi2Rx: 0x%x\n\r", s_drv832xSPI.SPI_TX_Data[0],s_drv832xSPI.SPI_RX_Data[0]);
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <DRV832x_blocking_configure+0xd8>)
 800073a:	8bdb      	ldrh	r3, [r3, #30]
 800073c:	b29b      	uxth	r3, r3
 800073e:	0019      	movs	r1, r3
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DRV832x_blocking_configure+0xd8>)
 8000742:	895b      	ldrh	r3, [r3, #10]
 8000744:	b29b      	uxth	r3, r3
 8000746:	001a      	movs	r2, r3
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <DRV832x_blocking_configure+0xdc>)
 800074a:	0018      	movs	r0, r3
 800074c:	f003 fcc0 	bl	80040d0 <iprintf>
    HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f000 fc75 	bl	8001040 <HAL_Delay>

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	08004f1c 	.word	0x08004f1c
 8000760:	08004f34 	.word	0x08004f34
 8000764:	08004f4c 	.word	0x08004f4c
 8000768:	20000084 	.word	0x20000084
 800076c:	08004f64 	.word	0x08004f64
 8000770:	08004f84 	.word	0x08004f84
 8000774:	08004fa0 	.word	0x08004fa0

08000778 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	23fa      	movs	r3, #250	; 0xfa
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <_write+0x28>)
 8000790:	f002 ff88 	bl	80036a4 <HAL_UART_Transmit>
	return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	0018      	movs	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	b004      	add	sp, #16
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000164 	.word	0x20000164

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fbe6 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f81a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 f978 	bl	8000aa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007b4:	f000 f852 	bl	800085c <MX_SPI1_Init>
  MX_TIM15_Init();
 80007b8:	f000 f88e 	bl	80008d8 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 80007bc:	f000 f942 	bl	8000a44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  drv8323_init();
 80007c0:	f7ff fd38 	bl	8000234 <drv8323_init>
  drv832_set_dir(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fd49 	bl	800025c <drv832_set_dir>
  drv832_set_speed(100);
 80007ca:	2064      	movs	r0, #100	; 0x64
 80007cc:	f7ff fd56 	bl	800027c <drv832_set_speed>
  drv832_start();
 80007d0:	f7ff fd6c 	bl	80002ac <drv832_start>
  HAL_Delay(1000);
 80007d4:	23fa      	movs	r3, #250	; 0xfa
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fc31 	bl	8001040 <HAL_Delay>
  drv832_stop();
 80007de:	f7ff fd6f 	bl	80002c0 <drv832_stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <main+0x3e>

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b093      	sub	sp, #76	; 0x4c
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	2414      	movs	r4, #20
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	0018      	movs	r0, r3
 80007f0:	2334      	movs	r3, #52	; 0x34
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 fcc7 	bl	8004188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2310      	movs	r3, #16
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 fcc0 	bl	8004188 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2220      	movs	r2, #32
 800080c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2201      	movs	r2, #1
 8000812:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	193b      	adds	r3, r7, r4
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fe7d 	bl	800151c <HAL_RCC_OscConfig>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000826:	f000 f9bd 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2203      	movs	r2, #3
 8000834:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2101      	movs	r1, #1
 8000846:	0018      	movs	r0, r3
 8000848:	f001 f9ee 	bl	8001c28 <HAL_RCC_ClockConfig>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000850:	f000 f9a8 	bl	8000ba4 <Error_Handler>
  }
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b013      	add	sp, #76	; 0x4c
 800085a:	bd90      	pop	{r4, r7, pc}

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_SPI1_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000868:	2282      	movs	r2, #130	; 0x82
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000876:	22c0      	movs	r2, #192	; 0xc0
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x74>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000892:	2220      	movs	r2, #32
 8000894:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_SPI1_Init+0x74>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fb21 	bl	8001f04 <HAL_SPI_Init>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f96d 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000b8 	.word	0x200000b8
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b096      	sub	sp, #88	; 0x58
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	2348      	movs	r3, #72	; 0x48
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2310      	movs	r3, #16
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f003 fc4d 	bl	8004188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	2308      	movs	r3, #8
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f003 fc45 	bl	8004188 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fe:	2324      	movs	r3, #36	; 0x24
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	231c      	movs	r3, #28
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f003 fc3d 	bl	8004188 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	2320      	movs	r3, #32
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f003 fc36 	bl	8004188 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <MX_TIM15_Init+0x160>)
 800091e:	4a47      	ldr	r2, [pc, #284]	; (8000a3c <MX_TIM15_Init+0x164>)
 8000920:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 47;
 8000922:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000924:	222f      	movs	r2, #47	; 0x2f
 8000926:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <MX_TIM15_Init+0x160>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000930:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <MX_TIM15_Init+0x168>)
 8000932:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800093a:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MX_TIM15_Init+0x160>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000946:	4b3c      	ldr	r3, [pc, #240]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000948:	0018      	movs	r0, r3
 800094a:	f001 feeb 	bl	8002724 <HAL_TIM_Base_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000952:	f000 f927 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	2148      	movs	r1, #72	; 0x48
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0152      	lsls	r2, r2, #5
 800095e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000960:	187a      	adds	r2, r7, r1
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f002 f97e 	bl	8002c68 <HAL_TIM_ConfigClockSource>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000970:	f000 f918 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000976:	0018      	movs	r0, r3
 8000978:	f001 ff24 	bl	80027c4 <HAL_TIM_PWM_Init>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000980:	f000 f910 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000992:	187a      	adds	r2, r7, r1
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f002 fd73 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80009a2:	f000 f8ff 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2124      	movs	r1, #36	; 0x24
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2260      	movs	r2, #96	; 0x60
 80009ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	1879      	adds	r1, r7, r1
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_TIM15_Init+0x160>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f002 f87f 	bl	8002adc <HAL_TIM_PWM_ConfigChannel>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80009e2:	f000 f8df 	bl	8000ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	0192      	lsls	r2, r2, #6
 8000a0a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a12:	1d3a      	adds	r2, r7, #4
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 fd91 	bl	8003540 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 8000a22:	f000 f8bf 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <MX_TIM15_Init+0x160>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 f951 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b016      	add	sp, #88	; 0x58
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	2000011c 	.word	0x2000011c
 8000a3c:	40014000 	.word	0x40014000
 8000a40:	0000ffff 	.word	0x0000ffff

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART3_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a50:	2296      	movs	r2, #150	; 0x96
 8000a52:	0192      	lsls	r2, r2, #6
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x58>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 fdb7 	bl	80035fc <HAL_UART_Init>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f887 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000164 	.word	0x20000164
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b08b      	sub	sp, #44	; 0x2c
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	2414      	movs	r4, #20
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2314      	movs	r3, #20
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f003 fb67 	bl	8004188 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	03c9      	lsls	r1, r1, #15
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	03db      	lsls	r3, r3, #15
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0289      	lsls	r1, r1, #10
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	029b      	lsls	r3, r3, #10
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0309      	lsls	r1, r1, #12
 8000afc:	430a      	orrs	r2, r1
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	031b      	lsls	r3, r3, #12
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0349      	lsls	r1, r1, #13
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_GPIO_Init+0xf8>)
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	035b      	lsls	r3, r3, #13
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_CS_GPIO_Port, DRV_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2390      	movs	r3, #144	; 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2110      	movs	r1, #16
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fcd4 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DRV_BRAKE_Pin|DRV_ENABLE_Pin|DRV_DIR_Pin, GPIO_PIN_RESET);
 8000b38:	2382      	movs	r3, #130	; 0x82
 8000b3a:	33ff      	adds	r3, #255	; 0xff
 8000b3c:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	0019      	movs	r1, r3
 8000b42:	f000 fccd 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRV_CS_Pin */
  GPIO_InitStruct.Pin = DRV_CS_Pin;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2210      	movs	r2, #16
 8000b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2201      	movs	r2, #1
 8000b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRV_CS_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	193a      	adds	r2, r7, r4
 8000b60:	2390      	movs	r3, #144	; 0x90
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fb42 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_BRAKE_Pin DRV_ENABLE_Pin DRV_DIR_Pin */
  GPIO_InitStruct.Pin = DRV_BRAKE_Pin|DRV_ENABLE_Pin|DRV_DIR_Pin;
 8000b6c:	0021      	movs	r1, r4
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2282      	movs	r2, #130	; 0x82
 8000b72:	32ff      	adds	r2, #255	; 0xff
 8000b74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <MX_GPIO_Init+0xfc>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f000 fb2e 	bl	80011f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b00b      	add	sp, #44	; 0x2c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000c00 	.word	0x48000c00

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	619a      	str	r2, [r3, #24]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	69da      	ldr	r2, [r3, #28]
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0549      	lsls	r1, r1, #21
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	61da      	str	r2, [r3, #28]
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	055b      	lsls	r3, r3, #21
 8000be4:	4013      	ands	r3, r2
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b08b      	sub	sp, #44	; 0x2c
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	2414      	movs	r4, #20
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	0018      	movs	r0, r3
 8000c06:	2314      	movs	r3, #20
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f003 fabc 	bl	8004188 <memset>
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <HAL_SPI_MspInit+0x90>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d132      	bne.n	8000c80 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0149      	lsls	r1, r1, #5
 8000c24:	430a      	orrs	r2, r1
 8000c26:	619a      	str	r2, [r3, #24]
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c2a:	699a      	ldr	r2, [r3, #24]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0289      	lsls	r1, r1, #10
 8000c40:	430a      	orrs	r2, r1
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	029b      	lsls	r3, r3, #10
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c52:	0021      	movs	r1, r4
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	22e0      	movs	r2, #224	; 0xe0
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	187a      	adds	r2, r7, r1
 8000c74:	2390      	movs	r3, #144	; 0x90
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fab8 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00b      	add	sp, #44	; 0x2c
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40013000 	.word	0x40013000
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10d      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000ca4:	699a      	ldr	r2, [r3, #24]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0249      	lsls	r1, r1, #9
 8000cac:	430a      	orrs	r2, r1
 8000cae:	619a      	str	r2, [r3, #24]
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb2:	699a      	ldr	r2, [r3, #24]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	025b      	lsls	r3, r3, #9
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40014000 	.word	0x40014000
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	240c      	movs	r4, #12
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2314      	movs	r3, #20
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f003 fa50 	bl	8004188 <memset>
  if(htim->Instance==TIM15)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <HAL_TIM_MspPostInit+0x74>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d124      	bne.n	8000d3c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_TIM_MspPostInit+0x78>)
 8000cf4:	695a      	ldr	r2, [r3, #20]
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_TIM_MspPostInit+0x78>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	03c9      	lsls	r1, r1, #15
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_TIM_MspPostInit+0x78>)
 8000d02:	695a      	ldr	r2, [r3, #20]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	03db      	lsls	r3, r3, #15
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PF9     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	0021      	movs	r1, r4
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_TIM_MspPostInit+0x7c>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f000 fa5a 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b009      	add	sp, #36	; 0x24
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	40014000 	.word	0x40014000
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48001400 	.word	0x48001400

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	2414      	movs	r4, #20
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2314      	movs	r3, #20
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f003 fa10 	bl	8004188 <memset>
  if(huart->Instance==USART3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_UART_MspInit+0x90>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d131      	bne.n	8000dd6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d74:	69da      	ldr	r2, [r3, #28]
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	02c9      	lsls	r1, r1, #11
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	61da      	str	r2, [r3, #28]
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d82:	69da      	ldr	r2, [r3, #28]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	02db      	lsls	r3, r3, #11
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0309      	lsls	r1, r1, #12
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	031b      	lsls	r3, r3, #12
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000daa:	0021      	movs	r1, r4
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2230      	movs	r2, #48	; 0x30
 8000db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2202      	movs	r2, #2
 8000db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000dce:	0019      	movs	r1, r3
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	f000 fa0d 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b00b      	add	sp, #44	; 0x2c
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000800 	.word	0x48000800

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f8fa 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e00a      	b.n	8000e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2c:	e000      	b.n	8000e30 <_read+0x16>
 8000e2e:	bf00      	nop
 8000e30:	0001      	movs	r1, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dbf0      	blt.n	8000e2c <_read+0x12>
  }

  return len;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b006      	add	sp, #24
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	425b      	negs	r3, r3
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0192      	lsls	r2, r2, #6
 8000e78:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_isatty>:

int _isatty(int file)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	0018      	movs	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f003 f9aa 	bl	8004234 <__errno>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	425b      	negs	r3, r3
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	18d2      	adds	r2, r2, r3
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b006      	add	sp, #24
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20004000 	.word	0x20004000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	200001ec 	.word	0x200001ec
 8000f14:	20000340 	.word	0x20000340

08000f18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f7ff fff6 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f52:	f003 f975 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff fc25 	bl	80007a4 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f68:	0800502c 	.word	0x0800502c
  ldr r2, =_sbss
 8000f6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f70:	20000340 	.word	0x20000340

08000f74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_COMP_IRQHandler>
	...

08000f78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_Init+0x24>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_Init+0x24>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f809 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8e:	f7ff fe0f 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_InitTick+0x5c>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_InitTick+0x60>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	23fa      	movs	r3, #250	; 0xfa
 8000fb4:	0098      	lsls	r0, r3, #2
 8000fb6:	f7ff f8b1 	bl	800011c <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f7ff f8ac 	bl	800011c <__udivsi3>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f905 	bl	80011d6 <HAL_SYSTICK_Config>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e00f      	b.n	8000ff4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d80b      	bhi.n	8000ff2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 f8e2 	bl	80011ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_InitTick+0x64>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d2      	adds	r2, r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_IncTick+0x20>)
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000008 	.word	0x20000008
 8001028:	200001f0 	.word	0x200001f0

0800102c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	200001f0 	.word	0x200001f0

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fff0 	bl	800102c <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	189b      	adds	r3, r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	f7ff ffe0 	bl	800102c <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b7f      	cmp	r3, #127	; 0x7f
 800109c:	d828      	bhi.n	80010f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <__NVIC_SetPriority+0xd4>)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	33c0      	adds	r3, #192	; 0xc0
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	589b      	ldr	r3, [r3, r2]
 80010ae:	1dfa      	adds	r2, r7, #7
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	0011      	movs	r1, r2
 80010b4:	2203      	movs	r2, #3
 80010b6:	400a      	ands	r2, r1
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	21ff      	movs	r1, #255	; 0xff
 80010bc:	4091      	lsls	r1, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	43d2      	mvns	r2, r2
 80010c2:	401a      	ands	r2, r3
 80010c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	401a      	ands	r2, r3
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	0018      	movs	r0, r3
 80010d4:	2303      	movs	r3, #3
 80010d6:	4003      	ands	r3, r0
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <__NVIC_SetPriority+0xd4>)
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	430a      	orrs	r2, r1
 80010e8:	33c0      	adds	r3, #192	; 0xc0
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ee:	e031      	b.n	8001154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <__NVIC_SetPriority+0xd8>)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0019      	movs	r1, r3
 80010f8:	230f      	movs	r3, #15
 80010fa:	400b      	ands	r3, r1
 80010fc:	3b08      	subs	r3, #8
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	18d3      	adds	r3, r2, r3
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	; 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <__NVIC_SetPriority+0xd8>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	001c      	movs	r4, r3
 8001140:	230f      	movs	r3, #15
 8001142:	4023      	ands	r3, r4
 8001144:	3b08      	subs	r3, #8
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	430a      	orrs	r2, r1
 800114a:	3306      	adds	r3, #6
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	18c3      	adds	r3, r0, r3
 8001150:	3304      	adds	r3, #4
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	045b      	lsls	r3, r3, #17
 8001174:	429a      	cmp	r2, r3
 8001176:	d301      	bcc.n	800117c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001178:	2301      	movs	r3, #1
 800117a:	e010      	b.n	800119e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SysTick_Config+0x44>)
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	3a01      	subs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001184:	2301      	movs	r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	2103      	movs	r1, #3
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff ff7c 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x44>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ffbf 	bl	8001164 <SysTick_Config>
 80011e6:	0003      	movs	r3, r0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e155      	b.n	80014ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4091      	lsls	r1, r2
 800120a:	000a      	movs	r2, r1
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d100      	bne.n	8001218 <HAL_GPIO_Init+0x28>
 8001216:	e146      	b.n	80014a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2203      	movs	r2, #3
 800121e:	4013      	ands	r3, r2
 8001220:	2b01      	cmp	r3, #1
 8001222:	d005      	beq.n	8001230 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800122c:	2b02      	cmp	r3, #2
 800122e:	d130      	bne.n	8001292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	2201      	movs	r2, #1
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	4013      	ands	r3, r2
 800129a:	2b03      	cmp	r3, #3
 800129c:	d017      	beq.n	80012ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d123      	bne.n	8001322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	58d3      	ldr	r3, [r2, r3]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2207      	movs	r2, #7
 80012ec:	4013      	ands	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	43da      	mvns	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2107      	movs	r1, #7
 8001306:	400b      	ands	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	6939      	ldr	r1, [r7, #16]
 8001320:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	401a      	ands	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	4013      	ands	r3, r2
 8001360:	d100      	bne.n	8001364 <HAL_GPIO_Init+0x174>
 8001362:	e0a0      	b.n	80014a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <HAL_GPIO_Init+0x2d4>)
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x2d4>)
 800136a:	2101      	movs	r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	619a      	str	r2, [r3, #24]
 8001370:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <HAL_GPIO_Init+0x2d4>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_GPIO_Init+0x2d8>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	589b      	ldr	r3, [r3, r2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2203      	movs	r2, #3
 800138e:	4013      	ands	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	409a      	lsls	r2, r3
 8001396:	0013      	movs	r3, r2
 8001398:	43da      	mvns	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	2390      	movs	r3, #144	; 0x90
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x1ee>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	; (80014cc <HAL_GPIO_Init+0x2dc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1ea>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <HAL_GPIO_Init+0x2e0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1e6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a45      	ldr	r2, [pc, #276]	; (80014d4 <HAL_GPIO_Init+0x2e4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1e2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1de>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013de:	2300      	movs	r3, #0
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	2103      	movs	r1, #3
 80013e4:	400a      	ands	r2, r1
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2d8>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	035b      	lsls	r3, r3, #13
 8001416:	4013      	ands	r3, r2
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43da      	mvns	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	4013      	ands	r3, r2
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	029b      	lsls	r3, r3, #10
 800146a:	4013      	ands	r3, r2
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	4013      	ands	r3, r2
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	1e13      	subs	r3, r2, #0
 80014b6:	d000      	beq.n	80014ba <HAL_GPIO_Init+0x2ca>
 80014b8:	e6a2      	b.n	8001200 <HAL_GPIO_Init+0x10>
  } 
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b006      	add	sp, #24
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000c00 	.word	0x48000c00
 80014d8:	48001000 	.word	0x48001000
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	0008      	movs	r0, r1
 80014ea:	0011      	movs	r1, r2
 80014ec:	1cbb      	adds	r3, r7, #2
 80014ee:	1c02      	adds	r2, r0, #0
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	1c7b      	adds	r3, r7, #1
 80014f4:	1c0a      	adds	r2, r1, #0
 80014f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f8:	1c7b      	adds	r3, r7, #1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001500:	1cbb      	adds	r3, r7, #2
 8001502:	881a      	ldrh	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150a:	1cbb      	adds	r3, r7, #2
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f000 fb76 	bl	8001c1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	d100      	bne.n	800153c <HAL_RCC_OscConfig+0x20>
 800153a:	e08e      	b.n	800165a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800153c:	4bc5      	ldr	r3, [pc, #788]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	220c      	movs	r2, #12
 8001542:	4013      	ands	r3, r2
 8001544:	2b04      	cmp	r3, #4
 8001546:	d00e      	beq.n	8001566 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001548:	4bc2      	ldr	r3, [pc, #776]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	2b08      	cmp	r3, #8
 8001552:	d117      	bne.n	8001584 <HAL_RCC_OscConfig+0x68>
 8001554:	4bbf      	ldr	r3, [pc, #764]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	401a      	ands	r2, r3
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	429a      	cmp	r2, r3
 8001564:	d10e      	bne.n	8001584 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4bbb      	ldr	r3, [pc, #748]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x58>
 8001572:	e071      	b.n	8001658 <HAL_RCC_OscConfig+0x13c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d000      	beq.n	800157e <HAL_RCC_OscConfig+0x62>
 800157c:	e06c      	b.n	8001658 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f000 fb4c 	bl	8001c1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x80>
 800158c:	4bb1      	ldr	r3, [pc, #708]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4bb0      	ldr	r3, [pc, #704]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e02f      	b.n	80015fc <HAL_RCC_OscConfig+0xe0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0xa2>
 80015a4:	4bab      	ldr	r3, [pc, #684]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4baa      	ldr	r3, [pc, #680]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015aa:	49ab      	ldr	r1, [pc, #684]	; (8001858 <HAL_RCC_OscConfig+0x33c>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	4ba8      	ldr	r3, [pc, #672]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4ba7      	ldr	r3, [pc, #668]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015b6:	49a9      	ldr	r1, [pc, #676]	; (800185c <HAL_RCC_OscConfig+0x340>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e01e      	b.n	80015fc <HAL_RCC_OscConfig+0xe0>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10e      	bne.n	80015e4 <HAL_RCC_OscConfig+0xc8>
 80015c6:	4ba3      	ldr	r3, [pc, #652]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4ba2      	ldr	r3, [pc, #648]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	02c9      	lsls	r1, r1, #11
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	4b9f      	ldr	r3, [pc, #636]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b9e      	ldr	r3, [pc, #632]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	0249      	lsls	r1, r1, #9
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xe0>
 80015e4:	4b9b      	ldr	r3, [pc, #620]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b9a      	ldr	r3, [pc, #616]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015ea:	499b      	ldr	r1, [pc, #620]	; (8001858 <HAL_RCC_OscConfig+0x33c>)
 80015ec:	400a      	ands	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	4b98      	ldr	r3, [pc, #608]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b97      	ldr	r3, [pc, #604]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80015f6:	4999      	ldr	r1, [pc, #612]	; (800185c <HAL_RCC_OscConfig+0x340>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d014      	beq.n	800162e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fd12 	bl	800102c <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160e:	f7ff fd0d 	bl	800102c <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e2fd      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001620:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0xf2>
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fcfd 	bl	800102c <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fcf8 	bl	800102c <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e2e8      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	4b82      	ldr	r3, [pc, #520]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	029b      	lsls	r3, r3, #10
 8001652:	4013      	ands	r3, r2
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x11c>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x14a>
 8001664:	e06c      	b.n	8001740 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001666:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	220c      	movs	r2, #12
 800166c:	4013      	ands	r3, r2
 800166e:	d00e      	beq.n	800168e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001670:	4b78      	ldr	r3, [pc, #480]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	220c      	movs	r2, #12
 8001676:	4013      	ands	r3, r2
 8001678:	2b08      	cmp	r3, #8
 800167a:	d11f      	bne.n	80016bc <HAL_RCC_OscConfig+0x1a0>
 800167c:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	23c0      	movs	r3, #192	; 0xc0
 8001682:	025b      	lsls	r3, r3, #9
 8001684:	401a      	ands	r2, r3
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	429a      	cmp	r2, r3
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b71      	ldr	r3, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x188>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e2bb      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	22f8      	movs	r2, #248	; 0xf8
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00da      	lsls	r2, r3, #3
 80016b4:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e041      	b.n	8001740 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d024      	beq.n	800170e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b63      	ldr	r3, [pc, #396]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b62      	ldr	r3, [pc, #392]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fcac 	bl	800102c <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fca7 	bl	800102c <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e297      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f1      	beq.n	80016da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b57      	ldr	r3, [pc, #348]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	22f8      	movs	r2, #248	; 0xf8
 80016fc:	4393      	bics	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	00da      	lsls	r2, r3, #3
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001714:	2101      	movs	r1, #1
 8001716:	438a      	bics	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fc87 	bl	800102c <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc82 	bl	800102c <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e272      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d1f1      	bne.n	8001724 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2208      	movs	r2, #8
 8001746:	4013      	ands	r3, r2
 8001748:	d036      	beq.n	80017b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001758:	2101      	movs	r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fc65 	bl	800102c <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fc60 	bl	800102c <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e250      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d0f1      	beq.n	8001768 <HAL_RCC_OscConfig+0x24c>
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800178c:	2101      	movs	r1, #1
 800178e:	438a      	bics	r2, r1
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fc4b 	bl	800102c <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fc46 	bl	800102c <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e236      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d1f1      	bne.n	800179c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2204      	movs	r2, #4
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2a8>
 80017c2:	e0b5      	b.n	8001930 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c4:	201f      	movs	r0, #31
 80017c6:	183b      	adds	r3, r7, r0
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	055b      	lsls	r3, r3, #21
 80017d4:	4013      	ands	r3, r2
 80017d6:	d110      	bne.n	80017fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	0549      	lsls	r1, r1, #21
 80017e2:	430a      	orrs	r2, r1
 80017e4:	61da      	str	r2, [r3, #28]
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	055b      	lsls	r3, r3, #21
 80017ee:	4013      	ands	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017f4:	183b      	adds	r3, r7, r0
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_OscConfig+0x344>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4013      	ands	r3, r2
 8001804:	d11a      	bne.n	800183c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_RCC_OscConfig+0x344>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_RCC_OscConfig+0x344>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0049      	lsls	r1, r1, #1
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001814:	f7ff fc0a 	bl	800102c <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fc05 	bl	800102c <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1f5      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x344>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4013      	ands	r3, r2
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10f      	bne.n	8001864 <HAL_RCC_OscConfig+0x348>
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 8001846:	6a1a      	ldr	r2, [r3, #32]
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <HAL_RCC_OscConfig+0x338>)
 800184a:	2101      	movs	r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	621a      	str	r2, [r3, #32]
 8001850:	e036      	b.n	80018c0 <HAL_RCC_OscConfig+0x3a4>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40021000 	.word	0x40021000
 8001858:	fffeffff 	.word	0xfffeffff
 800185c:	fffbffff 	.word	0xfffbffff
 8001860:	40007000 	.word	0x40007000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x36a>
 800186c:	4bca      	ldr	r3, [pc, #808]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4bc9      	ldr	r3, [pc, #804]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001872:	2101      	movs	r1, #1
 8001874:	438a      	bics	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	4bc7      	ldr	r3, [pc, #796]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 800187a:	6a1a      	ldr	r2, [r3, #32]
 800187c:	4bc6      	ldr	r3, [pc, #792]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 800187e:	2104      	movs	r1, #4
 8001880:	438a      	bics	r2, r1
 8001882:	621a      	str	r2, [r3, #32]
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x3a4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x38c>
 800188e:	4bc2      	ldr	r3, [pc, #776]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	4bc1      	ldr	r3, [pc, #772]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001894:	2104      	movs	r1, #4
 8001896:	430a      	orrs	r2, r1
 8001898:	621a      	str	r2, [r3, #32]
 800189a:	4bbf      	ldr	r3, [pc, #764]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	4bbe      	ldr	r3, [pc, #760]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	621a      	str	r2, [r3, #32]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x3a4>
 80018a8:	4bbb      	ldr	r3, [pc, #748]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4bba      	ldr	r3, [pc, #744]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	438a      	bics	r2, r1
 80018b2:	621a      	str	r2, [r3, #32]
 80018b4:	4bb8      	ldr	r3, [pc, #736]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	4bb7      	ldr	r3, [pc, #732]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	2104      	movs	r1, #4
 80018bc:	438a      	bics	r2, r1
 80018be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d014      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fbb0 	bl	800102c <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fbab 	bl	800102c <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4aaf      	ldr	r2, [pc, #700]	; (8001b9c <HAL_RCC_OscConfig+0x680>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e19a      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	4bac      	ldr	r3, [pc, #688]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3b6>
 80018f0:	e013      	b.n	800191a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb9b 	bl	800102c <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	e009      	b.n	8001910 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fb96 	bl	800102c <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4aa5      	ldr	r2, [pc, #660]	; (8001b9c <HAL_RCC_OscConfig+0x680>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e185      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4ba1      	ldr	r3, [pc, #644]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191a:	231f      	movs	r3, #31
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001926:	69da      	ldr	r2, [r3, #28]
 8001928:	4b9b      	ldr	r3, [pc, #620]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 800192a:	499d      	ldr	r1, [pc, #628]	; (8001ba0 <HAL_RCC_OscConfig+0x684>)
 800192c:	400a      	ands	r2, r1
 800192e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	4013      	ands	r3, r2
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12a      	bne.n	8001998 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001942:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001946:	4b94      	ldr	r3, [pc, #592]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001948:	2104      	movs	r1, #4
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800194e:	4b92      	ldr	r3, [pc, #584]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001952:	4b91      	ldr	r3, [pc, #580]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001954:	2101      	movs	r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fb67 	bl	800102c <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001964:	f7ff fb62 	bl	800102c <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e152      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d0f1      	beq.n	8001964 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001980:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	22f8      	movs	r2, #248	; 0xf8
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	00da      	lsls	r2, r3, #3
 8001990:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
 8001996:	e034      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	3305      	adds	r3, #5
 800199e:	d111      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019a0:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a4:	4b7c      	ldr	r3, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019a6:	2104      	movs	r1, #4
 80019a8:	438a      	bics	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019ac:	4b7a      	ldr	r3, [pc, #488]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	22f8      	movs	r2, #248	; 0xf8
 80019b2:	4393      	bics	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	00da      	lsls	r2, r3, #3
 80019bc:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
 80019c2:	e01e      	b.n	8001a02 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019c4:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	4b73      	ldr	r3, [pc, #460]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	2104      	movs	r1, #4
 80019cc:	430a      	orrs	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019d0:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d4:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fb26 	bl	800102c <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019e6:	f7ff fb21 	bl	800102c <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e111      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d1f1      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2220      	movs	r2, #32
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d05c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a0c:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	220c      	movs	r2, #12
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d00e      	beq.n	8001a36 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a18:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d114      	bne.n	8001a4e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a24:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	23c0      	movs	r3, #192	; 0xc0
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d040      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x5a8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d03c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0e6      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a56:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0249      	lsls	r1, r1, #9
 8001a60:	430a      	orrs	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fae2 	bl	800102c <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6e:	f7ff fadd 	bl	800102c <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0cd      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a80:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x552>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001a94:	4943      	ldr	r1, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x688>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fac7 	bl	800102c <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa4:	f7ff fac2 	bl	800102c <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0b2      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x588>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ac4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d100      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5b4>
 8001ace:	e0a4      	b.n	8001c1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d100      	bne.n	8001ade <HAL_RCC_OscConfig+0x5c2>
 8001adc:	e078      	b.n	8001bd0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d14c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001aec:	492e      	ldr	r1, [pc, #184]	; (8001ba8 <HAL_RCC_OscConfig+0x68c>)
 8001aee:	400a      	ands	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fa9b 	bl	800102c <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff fa96 	bl	800102c <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e086      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	049b      	lsls	r3, r3, #18
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	220f      	movs	r2, #15
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_RCC_OscConfig+0x690>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	431a      	orrs	r2, r3
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	0449      	lsls	r1, r1, #17
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fa69 	bl	800102c <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff fa64 	bl	800102c <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e054      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	049b      	lsls	r3, r3, #18
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x644>
 8001b7e:	e04c      	b.n	8001c1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <HAL_RCC_OscConfig+0x68c>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fa4e 	bl	800102c <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6a6>
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	00001388 	.word	0x00001388
 8001ba0:	efffffff 	.word	0xefffffff
 8001ba4:	fffeffff 	.word	0xfffeffff
 8001ba8:	feffffff 	.word	0xfeffffff
 8001bac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fa3c 	bl	800102c <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e02c      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_RCC_OscConfig+0x708>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	049b      	lsls	r3, r3, #18
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x694>
 8001bce:	e024      	b.n	8001c1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e01f      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_RCC_OscConfig+0x708>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x708>)
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d10e      	bne.n	8001c16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	23f0      	movs	r3, #240	; 0xf0
 8001c0a:	039b      	lsls	r3, r3, #14
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b008      	add	sp, #32
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0bf      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d911      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0a6      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d015      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d006      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c88:	21e0      	movs	r1, #224	; 0xe0
 8001c8a:	00c9      	lsls	r1, r1, #3
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	22f0      	movs	r2, #240	; 0xf0
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	d04c      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d120      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	049b      	lsls	r3, r3, #18
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d114      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	029b      	lsls	r3, r3, #10
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e062      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e05b      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d18:	f7ff f988 	bl	800102c <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f7ff f983 	bl	800102c <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <HAL_RCC_ClockConfig+0x1a4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e042      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1ec      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d211      	bcs.n	8001d7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x19c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e020      	b.n	8001dbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_RCC_ClockConfig+0x1a8>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d98:	f000 f820 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	220f      	movs	r2, #15
 8001da6:	4013      	ands	r3, r2
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1ac>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	000a      	movs	r2, r1
 8001dae:	40da      	lsrs	r2, r3
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001db2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f7ff f8f3 	bl	8000fa0 <HAL_InitTick>
  
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b004      	add	sp, #16
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	00001388 	.word	0x00001388
 8001dd0:	fffff8ff 	.word	0xfffff8ff
 8001dd4:	08004fb8 	.word	0x08004fb8
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	220c      	movs	r2, #12
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d046      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0xb8>
 8001e06:	d848      	bhi.n	8001e9a <HAL_RCC_GetSysClockFreq+0xbe>
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d002      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x36>
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d003      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x3c>
 8001e10:	e043      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e14:	613b      	str	r3, [r7, #16]
      break;
 8001e16:	e043      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001e30:	5cd3      	ldrb	r3, [r2, r3]
 8001e32:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	23c0      	movs	r3, #192	; 0xc0
 8001e38:	025b      	lsls	r3, r3, #9
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d109      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e48:	f7fe f968 	bl	800011c <__udivsi3>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	001a      	movs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4353      	muls	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e01a      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	23c0      	movs	r3, #192	; 0xc0
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	401a      	ands	r2, r3
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d109      	bne.n	8001e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	4814      	ldr	r0, [pc, #80]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e6c:	f7fe f956 	bl	800011c <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	001a      	movs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4353      	muls	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001e80:	f7fe f94c 	bl	800011c <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	001a      	movs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4353      	muls	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	613b      	str	r3, [r7, #16]
      break;
 8001e92:	e005      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	e002      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001e9c:	613b      	str	r3, [r7, #16]
      break;
 8001e9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ea0:	693b      	ldr	r3, [r7, #16]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b006      	add	sp, #24
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	08004fd0 	.word	0x08004fd0
 8001eb8:	08004fe0 	.word	0x08004fe0
 8001ebc:	02dc6c00 	.word	0x02dc6c00
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	0001      	movs	r1, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	2207      	movs	r2, #7
 8001eea:	4013      	ands	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	40d9      	lsrs	r1, r3
 8001ef2:	000b      	movs	r3, r1
}    
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004fc8 	.word	0x08004fc8

08001f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0a8      	b.n	8002068 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	2382      	movs	r3, #130	; 0x82
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d009      	beq.n	8001f3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
 8001f30:	e005      	b.n	8001f3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	225d      	movs	r2, #93	; 0x5d
 8001f48:	5c9b      	ldrb	r3, [r3, r2]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	225c      	movs	r2, #92	; 0x5c
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7fe fe4c 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	225d      	movs	r2, #93	; 0x5d
 8001f64:	2102      	movs	r1, #2
 8001f66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2140      	movs	r1, #64	; 0x40
 8001f74:	438a      	bics	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	23e0      	movs	r3, #224	; 0xe0
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d902      	bls.n	8001f8a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e002      	b.n	8001f90 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	23f0      	movs	r3, #240	; 0xf0
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d008      	beq.n	8001fae <HAL_SPI_Init+0xaa>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	23e0      	movs	r3, #224	; 0xe0
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d002      	beq.n	8001fae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	2382      	movs	r3, #130	; 0x82
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	2384      	movs	r3, #132	; 0x84
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2102      	movs	r1, #2
 8001fca:	400b      	ands	r3, r1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	400b      	ands	r3, r1
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6999      	ldr	r1, [r3, #24]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2138      	movs	r1, #56	; 0x38
 8001fea:	400b      	ands	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	2204      	movs	r2, #4
 8002014:	401a      	ands	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2110      	movs	r1, #16
 800201c:	400b      	ands	r3, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	2108      	movs	r1, #8
 8002026:	400b      	ands	r3, r1
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	23f0      	movs	r3, #240	; 0xf0
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	400b      	ands	r3, r1
 8002034:	431a      	orrs	r2, r3
 8002036:	0011      	movs	r1, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4907      	ldr	r1, [pc, #28]	; (8002070 <HAL_SPI_Init+0x16c>)
 8002054:	400a      	ands	r2, r1
 8002056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	225d      	movs	r2, #93	; 0x5d
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	fffff7ff 	.word	0xfffff7ff

08002074 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	001a      	movs	r2, r3
 8002082:	1cbb      	adds	r3, r7, #2
 8002084:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800208a:	2323      	movs	r3, #35	; 0x23
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	225c      	movs	r2, #92	; 0x5c
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x2c>
 800209c:	2302      	movs	r3, #2
 800209e:	e1c4      	b.n	800242a <HAL_SPI_TransmitReceive+0x3b6>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	225c      	movs	r2, #92	; 0x5c
 80020a4:	2101      	movs	r1, #1
 80020a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020a8:	f7fe ffc0 	bl	800102c <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020b0:	201b      	movs	r0, #27
 80020b2:	183b      	adds	r3, r7, r0
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	215d      	movs	r1, #93	; 0x5d
 80020b8:	5c52      	ldrb	r2, [r2, r1]
 80020ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80020c2:	2312      	movs	r3, #18
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	1cba      	adds	r2, r7, #2
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020cc:	183b      	adds	r3, r7, r0
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d011      	beq.n	80020f8 <HAL_SPI_TransmitReceive+0x84>
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	2382      	movs	r3, #130	; 0x82
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	429a      	cmp	r2, r3
 80020dc:	d107      	bne.n	80020ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_SPI_TransmitReceive+0x7a>
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d004      	beq.n	80020f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80020ee:	2323      	movs	r3, #35	; 0x23
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80020f6:	e191      	b.n	800241c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_SPI_TransmitReceive+0x98>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_SPI_TransmitReceive+0x98>
 8002104:	1cbb      	adds	r3, r7, #2
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d104      	bne.n	8002116 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800210c:	2323      	movs	r3, #35	; 0x23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
    goto error;
 8002114:	e182      	b.n	800241c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	225d      	movs	r2, #93	; 0x5d
 800211a:	5c9b      	ldrb	r3, [r3, r2]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b04      	cmp	r3, #4
 8002120:	d003      	beq.n	800212a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	225d      	movs	r2, #93	; 0x5d
 8002126:	2105      	movs	r1, #5
 8002128:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1cba      	adds	r2, r7, #2
 800213a:	2146      	movs	r1, #70	; 0x46
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1cba      	adds	r2, r7, #2
 8002144:	2144      	movs	r1, #68	; 0x44
 8002146:	8812      	ldrh	r2, [r2, #0]
 8002148:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1cba      	adds	r2, r7, #2
 8002154:	8812      	ldrh	r2, [r2, #0]
 8002156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1cba      	adds	r2, r7, #2
 800215c:	8812      	ldrh	r2, [r2, #0]
 800215e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	23e0      	movs	r3, #224	; 0xe0
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	429a      	cmp	r2, r3
 8002176:	d908      	bls.n	800218a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	49ac      	ldr	r1, [pc, #688]	; (8002434 <HAL_SPI_TransmitReceive+0x3c0>)
 8002184:	400a      	ands	r2, r1
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	e008      	b.n	800219c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0149      	lsls	r1, r1, #5
 8002198:	430a      	orrs	r2, r1
 800219a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d007      	beq.n	80021ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	23e0      	movs	r3, #224	; 0xe0
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d800      	bhi.n	80021c8 <HAL_SPI_TransmitReceive+0x154>
 80021c6:	e083      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_SPI_TransmitReceive+0x168>
 80021d0:	2312      	movs	r3, #18
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d000      	beq.n	80021dc <HAL_SPI_TransmitReceive+0x168>
 80021da:	e06d      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	1c9a      	adds	r2, r3, #2
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002200:	e05a      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	2b02      	cmp	r3, #2
 800220e:	d11b      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x1d4>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_SPI_TransmitReceive+0x1d4>
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	2b01      	cmp	r3, #1
 800221e:	d113      	bne.n	8002248 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	1c9a      	adds	r2, r3, #2
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2201      	movs	r2, #1
 8002250:	4013      	ands	r3, r2
 8002252:	2b01      	cmp	r3, #1
 8002254:	d11c      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x21c>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2246      	movs	r2, #70	; 0x46
 800225a:	5a9b      	ldrh	r3, [r3, r2]
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	b292      	uxth	r2, r2
 800226e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	1c9a      	adds	r2, r3, #2
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2246      	movs	r2, #70	; 0x46
 800227e:	5a9b      	ldrh	r3, [r3, r2]
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b299      	uxth	r1, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2246      	movs	r2, #70	; 0x46
 800228a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002290:	f7fe fecc 	bl	800102c <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229c:	429a      	cmp	r2, r3
 800229e:	d80b      	bhi.n	80022b8 <HAL_SPI_TransmitReceive+0x244>
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	3301      	adds	r3, #1
 80022a4:	d008      	beq.n	80022b8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80022a6:	2323      	movs	r3, #35	; 0x23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2203      	movs	r2, #3
 80022ac:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	225d      	movs	r2, #93	; 0x5d
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]
        goto error;
 80022b6:	e0b1      	b.n	800241c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d19f      	bne.n	8002202 <HAL_SPI_TransmitReceive+0x18e>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2246      	movs	r2, #70	; 0x46
 80022c6:	5a9b      	ldrh	r3, [r3, r2]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d199      	bne.n	8002202 <HAL_SPI_TransmitReceive+0x18e>
 80022ce:	e089      	b.n	80023e4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x270>
 80022d8:	2312      	movs	r3, #18
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d000      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x270>
 80022e2:	e074      	b.n	80023ce <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	330c      	adds	r3, #12
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800230a:	e060      	b.n	80023ce <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d11c      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x2e0>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_SPI_TransmitReceive+0x2e0>
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	2b01      	cmp	r3, #1
 8002328:	d114      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2201      	movs	r2, #1
 800235c:	4013      	ands	r3, r2
 800235e:	2b01      	cmp	r3, #1
 8002360:	d11e      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x32c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2246      	movs	r2, #70	; 0x46
 8002366:	5a9b      	ldrh	r3, [r3, r2]
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	001a      	movs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2246      	movs	r2, #70	; 0x46
 800238e:	5a9b      	ldrh	r3, [r3, r2]
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b299      	uxth	r1, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2246      	movs	r2, #70	; 0x46
 800239a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023a0:	f7fe fe44 	bl	800102c <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d802      	bhi.n	80023b6 <HAL_SPI_TransmitReceive+0x342>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	3301      	adds	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x348>
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80023bc:	2323      	movs	r3, #35	; 0x23
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2203      	movs	r2, #3
 80023c2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	225d      	movs	r2, #93	; 0x5d
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]
        goto error;
 80023cc:	e026      	b.n	800241c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d199      	bne.n	800230c <HAL_SPI_TransmitReceive+0x298>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2246      	movs	r2, #70	; 0x46
 80023dc:	5a9b      	ldrh	r3, [r3, r2]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d193      	bne.n	800230c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f954 	bl	8002698 <SPI_EndRxTxTransaction>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d006      	beq.n	8002402 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80023f4:	2323      	movs	r3, #35	; 0x23
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800240a:	2323      	movs	r3, #35	; 0x23
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e003      	b.n	800241c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	225d      	movs	r2, #93	; 0x5d
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	225c      	movs	r2, #92	; 0x5c
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002424:	2323      	movs	r3, #35	; 0x23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b00a      	add	sp, #40	; 0x28
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	ffffefff 	.word	0xffffefff

08002438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002448:	f7fe fdf0 	bl	800102c <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	18d3      	adds	r3, r2, r3
 8002456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002458:	f7fe fde8 	bl	800102c <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	015b      	lsls	r3, r3, #5
 8002466:	0d1b      	lsrs	r3, r3, #20
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	4353      	muls	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800246e:	e058      	b.n	8002522 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	d055      	beq.n	8002522 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002476:	f7fe fdd9 	bl	800102c <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	429a      	cmp	r2, r3
 8002484:	d902      	bls.n	800248c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d142      	bne.n	8002512 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	21e0      	movs	r1, #224	; 0xe0
 8002498:	438a      	bics	r2, r1
 800249a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	2382      	movs	r3, #130	; 0x82
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d113      	bne.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d005      	beq.n	80024c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	429a      	cmp	r2, r3
 80024be:	d107      	bne.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2140      	movs	r1, #64	; 0x40
 80024cc:	438a      	bics	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	019b      	lsls	r3, r3, #6
 80024d8:	429a      	cmp	r2, r3
 80024da:	d110      	bne.n	80024fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	491a      	ldr	r1, [pc, #104]	; (8002550 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	0189      	lsls	r1, r1, #6
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	225d      	movs	r2, #93	; 0x5d
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	225c      	movs	r2, #92	; 0x5c
 800250a:	2100      	movs	r1, #0
 800250c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e017      	b.n	8002542 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3b01      	subs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	425a      	negs	r2, r3
 8002532:	4153      	adcs	r3, r2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	001a      	movs	r2, r3
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d197      	bne.n	8002470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b008      	add	sp, #32
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	20000000 	.word	0x20000000
 8002550:	ffffdfff 	.word	0xffffdfff

08002554 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800256a:	f7fe fd5f 	bl	800102c <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	18d3      	adds	r3, r2, r3
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800257a:	f7fe fd57 	bl	800102c <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	0013      	movs	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	189b      	adds	r3, r3, r2
 8002594:	00da      	lsls	r2, r3, #3
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	0d1b      	lsrs	r3, r3, #20
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	4353      	muls	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80025a0:	e068      	b.n	8002674 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d10a      	bne.n	80025c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	2117      	movs	r1, #23
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	d055      	beq.n	8002674 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025c8:	f7fe fd30 	bl	800102c <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d902      	bls.n	80025de <SPI_WaitFifoStateUntilTimeout+0x8a>
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d142      	bne.n	8002664 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	21e0      	movs	r1, #224	; 0xe0
 80025ea:	438a      	bics	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	2382      	movs	r3, #130	; 0x82
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d113      	bne.n	8002622 <SPI_WaitFifoStateUntilTimeout+0xce>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	429a      	cmp	r2, r3
 8002604:	d005      	beq.n	8002612 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	429a      	cmp	r2, r3
 8002610:	d107      	bne.n	8002622 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	019b      	lsls	r3, r3, #6
 800262a:	429a      	cmp	r2, r3
 800262c:	d110      	bne.n	8002650 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800263a:	400a      	ands	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0189      	lsls	r1, r1, #6
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	225d      	movs	r2, #93	; 0x5d
 8002654:	2101      	movs	r1, #1
 8002656:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	225c      	movs	r2, #92	; 0x5c
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e010      	b.n	8002686 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	3b01      	subs	r3, #1
 8002672:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d18e      	bne.n	80025a2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b00a      	add	sp, #40	; 0x28
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	20000000 	.word	0x20000000
 8002694:	ffffdfff 	.word	0xffffdfff

08002698 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	0159      	lsls	r1, r3, #5
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	0013      	movs	r3, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	f7ff ff4e 	bl	8002554 <SPI_WaitFifoStateUntilTimeout>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d007      	beq.n	80026cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	2220      	movs	r2, #32
 80026c2:	431a      	orrs	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e027      	b.n	800271c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	0013      	movs	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	f7ff fead 	bl	8002438 <SPI_WaitFlagStateUntilTimeout>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d007      	beq.n	80026f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	2220      	movs	r2, #32
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e014      	b.n	800271c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	00d9      	lsls	r1, r3, #3
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	0013      	movs	r3, r2
 8002700:	2200      	movs	r2, #0
 8002702:	f7ff ff27 	bl	8002554 <SPI_WaitFifoStateUntilTimeout>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d007      	beq.n	800271a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	2220      	movs	r2, #32
 8002710:	431a      	orrs	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e000      	b.n	800271c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e042      	b.n	80027bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223d      	movs	r2, #61	; 0x3d
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223c      	movs	r2, #60	; 0x3c
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f7fe fa9f 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	; 0x3d
 8002756:	2102      	movs	r1, #2
 8002758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	0019      	movs	r1, r3
 8002764:	0010      	movs	r0, r2
 8002766:	f000 fb53 	bl	8002e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2246      	movs	r2, #70	; 0x46
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223e      	movs	r2, #62	; 0x3e
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223f      	movs	r2, #63	; 0x3f
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2240      	movs	r2, #64	; 0x40
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2241      	movs	r2, #65	; 0x41
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2242      	movs	r2, #66	; 0x42
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2243      	movs	r2, #67	; 0x43
 800279e:	2101      	movs	r1, #1
 80027a0:	5499      	strb	r1, [r3, r2]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2244      	movs	r2, #68	; 0x44
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2245      	movs	r2, #69	; 0x45
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223d      	movs	r2, #61	; 0x3d
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e042      	b.n	800285c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	; 0x3d
 80027da:	5c9b      	ldrb	r3, [r3, r2]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	223c      	movs	r2, #60	; 0x3c
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 f839 	bl	8002864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	223d      	movs	r2, #61	; 0x3d
 80027f6:	2102      	movs	r1, #2
 80027f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f000 fb03 	bl	8002e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2246      	movs	r2, #70	; 0x46
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223e      	movs	r2, #62	; 0x3e
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223f      	movs	r2, #63	; 0x3f
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2241      	movs	r2, #65	; 0x41
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2242      	movs	r2, #66	; 0x42
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2243      	movs	r2, #67	; 0x43
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2244      	movs	r2, #68	; 0x44
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2245      	movs	r2, #69	; 0x45
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	223d      	movs	r2, #61	; 0x3d
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d108      	bne.n	8002896 <HAL_TIM_PWM_Start+0x22>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	223e      	movs	r2, #62	; 0x3e
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	4193      	sbcs	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e01f      	b.n	80028d6 <HAL_TIM_PWM_Start+0x62>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d108      	bne.n	80028ae <HAL_TIM_PWM_Start+0x3a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223f      	movs	r2, #63	; 0x3f
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	4193      	sbcs	r3, r2
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e013      	b.n	80028d6 <HAL_TIM_PWM_Start+0x62>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d108      	bne.n	80028c6 <HAL_TIM_PWM_Start+0x52>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	5c9b      	ldrb	r3, [r3, r2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	1e5a      	subs	r2, r3, #1
 80028c0:	4193      	sbcs	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e007      	b.n	80028d6 <HAL_TIM_PWM_Start+0x62>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2241      	movs	r2, #65	; 0x41
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	4193      	sbcs	r3, r2
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e074      	b.n	80029c8 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <HAL_TIM_PWM_Start+0x7a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	223e      	movs	r2, #62	; 0x3e
 80028e8:	2102      	movs	r1, #2
 80028ea:	5499      	strb	r1, [r3, r2]
 80028ec:	e013      	b.n	8002916 <HAL_TIM_PWM_Start+0xa2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_PWM_Start+0x8a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223f      	movs	r2, #63	; 0x3f
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]
 80028fc:	e00b      	b.n	8002916 <HAL_TIM_PWM_Start+0xa2>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d104      	bne.n	800290e <HAL_TIM_PWM_Start+0x9a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	2102      	movs	r1, #2
 800290a:	5499      	strb	r1, [r3, r2]
 800290c:	e003      	b.n	8002916 <HAL_TIM_PWM_Start+0xa2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2241      	movs	r2, #65	; 0x41
 8002912:	2102      	movs	r1, #2
 8002914:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6839      	ldr	r1, [r7, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	0018      	movs	r0, r3
 8002920:	f000 fd8c 	bl	800343c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <HAL_TIM_PWM_Start+0x15c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00e      	beq.n	800294c <HAL_TIM_PWM_Start+0xd8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <HAL_TIM_PWM_Start+0x160>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_TIM_PWM_Start+0xd8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <HAL_TIM_PWM_Start+0x164>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_TIM_PWM_Start+0xd8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_TIM_PWM_Start+0x168>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_TIM_PWM_Start+0xdc>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_TIM_PWM_Start+0xde>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0209      	lsls	r1, r1, #8
 8002964:	430a      	orrs	r2, r1
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_TIM_PWM_Start+0x15c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00f      	beq.n	8002992 <HAL_TIM_PWM_Start+0x11e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	05db      	lsls	r3, r3, #23
 800297a:	429a      	cmp	r2, r3
 800297c:	d009      	beq.n	8002992 <HAL_TIM_PWM_Start+0x11e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_TIM_PWM_Start+0x16c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_TIM_PWM_Start+0x11e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_TIM_PWM_Start+0x160>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d111      	bne.n	80029b6 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2207      	movs	r2, #7
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d010      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b4:	e007      	b.n	80029c6 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2101      	movs	r1, #1
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40000400 	.word	0x40000400

080029e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	2200      	movs	r2, #0
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 fd20 	bl	800343c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <HAL_TIM_PWM_Stop+0xdc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00e      	beq.n	8002a24 <HAL_TIM_PWM_Stop+0x40>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2e      	ldr	r2, [pc, #184]	; (8002ac4 <HAL_TIM_PWM_Stop+0xe0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIM_PWM_Stop+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <HAL_TIM_PWM_Stop+0xe4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_PWM_Stop+0x40>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_TIM_PWM_Stop+0xe8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_TIM_PWM_Stop+0x44>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_TIM_PWM_Stop+0x46>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d013      	beq.n	8002a56 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <HAL_TIM_PWM_Stop+0xec>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	d10d      	bne.n	8002a56 <HAL_TIM_PWM_Stop+0x72>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_TIM_PWM_Stop+0xf0>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_PWM_Stop+0x72>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4921      	ldr	r1, [pc, #132]	; (8002ad8 <HAL_TIM_PWM_Stop+0xf4>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_TIM_PWM_Stop+0xec>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d10d      	bne.n	8002a7e <HAL_TIM_PWM_Stop+0x9a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_TIM_PWM_Stop+0xf0>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d107      	bne.n	8002a7e <HAL_TIM_PWM_Stop+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2101      	movs	r1, #1
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_TIM_PWM_Stop+0xaa>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	223e      	movs	r2, #62	; 0x3e
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]
 8002a8c:	e013      	b.n	8002ab6 <HAL_TIM_PWM_Stop+0xd2>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d104      	bne.n	8002a9e <HAL_TIM_PWM_Stop+0xba>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	2101      	movs	r1, #1
 8002a9a:	5499      	strb	r1, [r3, r2]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_TIM_PWM_Stop+0xd2>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_PWM_Stop+0xca>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5499      	strb	r1, [r3, r2]
 8002aac:	e003      	b.n	8002ab6 <HAL_TIM_PWM_Stop+0xd2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2241      	movs	r2, #65	; 0x41
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40014000 	.word	0x40014000
 8002ac8:	40014400 	.word	0x40014400
 8002acc:	40014800 	.word	0x40014800
 8002ad0:	00001111 	.word	0x00001111
 8002ad4:	00000444 	.word	0x00000444
 8002ad8:	ffff7fff 	.word	0xffff7fff

08002adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2317      	movs	r3, #23
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	223c      	movs	r2, #60	; 0x3c
 8002af4:	5c9b      	ldrb	r3, [r3, r2]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x22>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0ad      	b.n	8002c5a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	223c      	movs	r2, #60	; 0x3c
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d100      	bne.n	8002b0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b0c:	e076      	b.n	8002bfc <HAL_TIM_PWM_ConfigChannel+0x120>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d900      	bls.n	8002b16 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002b14:	e095      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d04e      	beq.n	8002bba <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d900      	bls.n	8002b24 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b22:	e08e      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d021      	beq.n	8002b74 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002b30:	e087      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	0011      	movs	r1, r2
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f9e8 	bl	8002f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6999      	ldr	r1, [r3, #24]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	619a      	str	r2, [r3, #24]
      break;
 8002b72:	e06b      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fa4f 	bl	8003020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0109      	lsls	r1, r1, #4
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4931      	ldr	r1, [pc, #196]	; (8002c64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6999      	ldr	r1, [r3, #24]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	021a      	lsls	r2, r3, #8
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	619a      	str	r2, [r3, #24]
      break;
 8002bb8:	e048      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fab0 	bl	8003128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2108      	movs	r1, #8
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2104      	movs	r1, #4
 8002be4:	438a      	bics	r2, r1
 8002be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69d9      	ldr	r1, [r3, #28]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	61da      	str	r2, [r3, #28]
      break;
 8002bfa:	e027      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	0011      	movs	r1, r2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fb15 	bl	8003234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0109      	lsls	r1, r1, #4
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	490f      	ldr	r1, [pc, #60]	; (8002c64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c28:	400a      	ands	r2, r1
 8002c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69d9      	ldr	r1, [r3, #28]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	021a      	lsls	r2, r3, #8
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	61da      	str	r2, [r3, #28]
      break;
 8002c40:	e004      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002c42:	2317      	movs	r3, #23
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	223c      	movs	r2, #60	; 0x3c
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]

  return status;
 8002c54:	2317      	movs	r3, #23
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b006      	add	sp, #24
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	fffffbff 	.word	0xfffffbff

08002c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	230f      	movs	r3, #15
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	223c      	movs	r2, #60	; 0x3c
 8002c7e:	5c9b      	ldrb	r3, [r3, r2]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_ConfigClockSource+0x20>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0bc      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x19a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	223c      	movs	r2, #60	; 0x3c
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223d      	movs	r2, #61	; 0x3d
 8002c94:	2102      	movs	r1, #2
 8002c96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2277      	movs	r2, #119	; 0x77
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	0192      	lsls	r2, r2, #6
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d040      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0xde>
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	0192      	lsls	r2, r2, #6
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d900      	bls.n	8002cce <HAL_TIM_ConfigClockSource+0x66>
 8002ccc:	e088      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	0152      	lsls	r2, r2, #5
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <HAL_TIM_ConfigClockSource+0x70>
 8002cd6:	e088      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x182>
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	0152      	lsls	r2, r2, #5
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d900      	bls.n	8002ce2 <HAL_TIM_ConfigClockSource+0x7a>
 8002ce0:	e07e      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002ce2:	2b70      	cmp	r3, #112	; 0x70
 8002ce4:	d018      	beq.n	8002d18 <HAL_TIM_ConfigClockSource+0xb0>
 8002ce6:	d900      	bls.n	8002cea <HAL_TIM_ConfigClockSource+0x82>
 8002ce8:	e07a      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002cea:	2b60      	cmp	r3, #96	; 0x60
 8002cec:	d04f      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x126>
 8002cee:	d900      	bls.n	8002cf2 <HAL_TIM_ConfigClockSource+0x8a>
 8002cf0:	e076      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002cf2:	2b50      	cmp	r3, #80	; 0x50
 8002cf4:	d03b      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x106>
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_ConfigClockSource+0x92>
 8002cf8:	e072      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d057      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x146>
 8002cfe:	d900      	bls.n	8002d02 <HAL_TIM_ConfigClockSource+0x9a>
 8002d00:	e06e      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002d02:	2b30      	cmp	r3, #48	; 0x30
 8002d04:	d063      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x166>
 8002d06:	d86b      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d060      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x166>
 8002d0c:	d868      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d05d      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x166>
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d05b      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0x166>
 8002d16:	e063      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d28:	f000 fb68 	bl	80033fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2277      	movs	r2, #119	; 0x77
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
      break;
 8002d44:	e052      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	f000 fb51 	bl	80033fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	01c9      	lsls	r1, r1, #7
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
      break;
 8002d6c:	e03e      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7a:	001a      	movs	r2, r3
 8002d7c:	f000 fac4 	bl	8003308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2150      	movs	r1, #80	; 0x50
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 fb1e 	bl	80033c8 <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e02e      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	f000 fae2 	bl	8003364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2160      	movs	r1, #96	; 0x60
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fb0e 	bl	80033c8 <TIM_ITRx_SetConfig>
      break;
 8002dac:	e01e      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dba:	001a      	movs	r2, r3
 8002dbc:	f000 faa4 	bl	8003308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 fafe 	bl	80033c8 <TIM_ITRx_SetConfig>
      break;
 8002dcc:	e00e      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	0010      	movs	r0, r2
 8002dda:	f000 faf5 	bl	80033c8 <TIM_ITRx_SetConfig>
      break;
 8002dde:	e005      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002de0:	230f      	movs	r3, #15
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
      break;
 8002de8:	e000      	b.n	8002dec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002dea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	223d      	movs	r2, #61	; 0x3d
 8002df0:	2101      	movs	r1, #1
 8002df2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	223c      	movs	r2, #60	; 0x3c
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5499      	strb	r1, [r3, r2]

  return status;
 8002dfc:	230f      	movs	r3, #15
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781b      	ldrb	r3, [r3, #0]
}
 8002e02:	0018      	movs	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	ffff00ff 	.word	0xffff00ff

08002e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <TIM_Base_SetConfig+0xe4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d008      	beq.n	8002e3a <TIM_Base_SetConfig+0x2a>
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d003      	beq.n	8002e3a <TIM_Base_SetConfig+0x2a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <TIM_Base_SetConfig+0xe8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2270      	movs	r2, #112	; 0x70
 8002e3e:	4393      	bics	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <TIM_Base_SetConfig+0xe4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <TIM_Base_SetConfig+0x76>
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d013      	beq.n	8002e86 <TIM_Base_SetConfig+0x76>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <TIM_Base_SetConfig+0xe8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00f      	beq.n	8002e86 <TIM_Base_SetConfig+0x76>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <TIM_Base_SetConfig+0xec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_Base_SetConfig+0x76>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <TIM_Base_SetConfig+0xf0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0x76>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a22      	ldr	r2, [pc, #136]	; (8002f04 <TIM_Base_SetConfig+0xf4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0x76>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <TIM_Base_SetConfig+0xf8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <TIM_Base_SetConfig+0xfc>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <TIM_Base_SetConfig+0xe4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <TIM_Base_SetConfig+0xce>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <TIM_Base_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <TIM_Base_SetConfig+0xce>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <TIM_Base_SetConfig+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_Base_SetConfig+0xce>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <TIM_Base_SetConfig+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d103      	bne.n	8002ee6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	615a      	str	r2, [r3, #20]
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40002000 	.word	0x40002000
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800
 8002f0c:	fffffcff 	.word	0xfffffcff

08002f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4393      	bics	r3, r2
 8002f22:	001a      	movs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2270      	movs	r2, #112	; 0x70
 8002f3e:	4393      	bics	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2203      	movs	r2, #3
 8002f46:	4393      	bics	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2202      	movs	r2, #2
 8002f58:	4393      	bics	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <TIM_OC1_SetConfig+0xf8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_OC1_SetConfig+0x76>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <TIM_OC1_SetConfig+0xfc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_OC1_SetConfig+0x76>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <TIM_OC1_SetConfig+0x100>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_OC1_SetConfig+0x76>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a24      	ldr	r2, [pc, #144]	; (8003014 <TIM_OC1_SetConfig+0x104>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10c      	bne.n	8002fa0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a19      	ldr	r2, [pc, #100]	; (8003008 <TIM_OC1_SetConfig+0xf8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <TIM_OC1_SetConfig+0xb0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <TIM_OC1_SetConfig+0xfc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <TIM_OC1_SetConfig+0xb0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <TIM_OC1_SetConfig+0x100>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_OC1_SetConfig+0xb0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a16      	ldr	r2, [pc, #88]	; (8003014 <TIM_OC1_SetConfig+0x104>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d111      	bne.n	8002fe4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	; (8003018 <TIM_OC1_SetConfig+0x108>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4a14      	ldr	r2, [pc, #80]	; (800301c <TIM_OC1_SetConfig+0x10c>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b006      	add	sp, #24
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40014000 	.word	0x40014000
 8003010:	40014400 	.word	0x40014400
 8003014:	40014800 	.word	0x40014800
 8003018:	fffffeff 	.word	0xfffffeff
 800301c:	fffffdff 	.word	0xfffffdff

08003020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	2210      	movs	r2, #16
 8003030:	4393      	bics	r3, r2
 8003032:	001a      	movs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <TIM_OC2_SetConfig+0xe8>)
 800304e:	4013      	ands	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a2d      	ldr	r2, [pc, #180]	; (800310c <TIM_OC2_SetConfig+0xec>)
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2220      	movs	r2, #32
 800306a:	4393      	bics	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <TIM_OC2_SetConfig+0xf0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10d      	bne.n	800309e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	4393      	bics	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2240      	movs	r2, #64	; 0x40
 800309a:	4393      	bics	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <TIM_OC2_SetConfig+0xf0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00b      	beq.n	80030be <TIM_OC2_SetConfig+0x9e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <TIM_OC2_SetConfig+0xf4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <TIM_OC2_SetConfig+0x9e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <TIM_OC2_SetConfig+0xf8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_OC2_SetConfig+0x9e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <TIM_OC2_SetConfig+0xfc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <TIM_OC2_SetConfig+0x100>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <TIM_OC2_SetConfig+0x104>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b006      	add	sp, #24
 8003106:	bd80      	pop	{r7, pc}
 8003108:	ffff8fff 	.word	0xffff8fff
 800310c:	fffffcff 	.word	0xfffffcff
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800
 8003120:	fffffbff 	.word	0xfffffbff
 8003124:	fffff7ff 	.word	0xfffff7ff

08003128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a35      	ldr	r2, [pc, #212]	; (800320c <TIM_OC3_SetConfig+0xe4>)
 8003138:	401a      	ands	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2270      	movs	r2, #112	; 0x70
 8003154:	4393      	bics	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2203      	movs	r2, #3
 800315c:	4393      	bics	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <TIM_OC3_SetConfig+0xe8>)
 800316e:	4013      	ands	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a24      	ldr	r2, [pc, #144]	; (8003214 <TIM_OC3_SetConfig+0xec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10d      	bne.n	80031a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <TIM_OC3_SetConfig+0xf0>)
 800318a:	4013      	ands	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <TIM_OC3_SetConfig+0xf4>)
 800319e:	4013      	ands	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <TIM_OC3_SetConfig+0xec>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_OC3_SetConfig+0x9a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <TIM_OC3_SetConfig+0xf8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <TIM_OC3_SetConfig+0x9a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <TIM_OC3_SetConfig+0xfc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_OC3_SetConfig+0x9a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <TIM_OC3_SetConfig+0x100>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d113      	bne.n	80031ea <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <TIM_OC3_SetConfig+0x104>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <TIM_OC3_SetConfig+0x108>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b006      	add	sp, #24
 800320a:	bd80      	pop	{r7, pc}
 800320c:	fffffeff 	.word	0xfffffeff
 8003210:	fffffdff 	.word	0xfffffdff
 8003214:	40012c00 	.word	0x40012c00
 8003218:	fffff7ff 	.word	0xfffff7ff
 800321c:	fffffbff 	.word	0xfffffbff
 8003220:	40014000 	.word	0x40014000
 8003224:	40014400 	.word	0x40014400
 8003228:	40014800 	.word	0x40014800
 800322c:	ffffefff 	.word	0xffffefff
 8003230:	ffffdfff 	.word	0xffffdfff

08003234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <TIM_OC4_SetConfig+0xb0>)
 8003244:	401a      	ands	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <TIM_OC4_SetConfig+0xb4>)
 8003260:	4013      	ands	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <TIM_OC4_SetConfig+0xb8>)
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <TIM_OC4_SetConfig+0xbc>)
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	031b      	lsls	r3, r3, #12
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <TIM_OC4_SetConfig+0xc0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_OC4_SetConfig+0x78>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <TIM_OC4_SetConfig+0xc4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_OC4_SetConfig+0x78>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a17      	ldr	r2, [pc, #92]	; (80032fc <TIM_OC4_SetConfig+0xc8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_OC4_SetConfig+0x78>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <TIM_OC4_SetConfig+0xcc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d109      	bne.n	80032c0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <TIM_OC4_SetConfig+0xd0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	019b      	lsls	r3, r3, #6
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	ffffefff 	.word	0xffffefff
 80032e8:	ffff8fff 	.word	0xffff8fff
 80032ec:	fffffcff 	.word	0xfffffcff
 80032f0:	ffffdfff 	.word	0xffffdfff
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800
 8003304:	ffffbfff 	.word	0xffffbfff

08003308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	2201      	movs	r2, #1
 8003320:	4393      	bics	r3, r2
 8003322:	001a      	movs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	22f0      	movs	r2, #240	; 0xf0
 8003332:	4393      	bics	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	220a      	movs	r2, #10
 8003344:	4393      	bics	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b006      	add	sp, #24
 8003362:	bd80      	pop	{r7, pc}

08003364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	2210      	movs	r2, #16
 8003376:	4393      	bics	r3, r2
 8003378:	001a      	movs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <TIM_TI2_ConfigInputStage+0x60>)
 800338e:	4013      	ands	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	031b      	lsls	r3, r3, #12
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	22a0      	movs	r2, #160	; 0xa0
 80033a0:	4393      	bics	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b006      	add	sp, #24
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	ffff0fff 	.word	0xffff0fff

080033c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2270      	movs	r2, #112	; 0x70
 80033dc:	4393      	bics	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	2207      	movs	r2, #7
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	609a      	str	r2, [r3, #8]
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <TIM_ETR_SetConfig+0x3c>)
 8003414:	4013      	ands	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	021a      	lsls	r2, r3, #8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	431a      	orrs	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b006      	add	sp, #24
 8003436:	bd80      	pop	{r7, pc}
 8003438:	ffff00ff 	.word	0xffff00ff

0800343c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	221f      	movs	r2, #31
 800344c:	4013      	ands	r3, r2
 800344e:	2201      	movs	r2, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	0013      	movs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	43d2      	mvns	r2, r2
 800345e:	401a      	ands	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	211f      	movs	r1, #31
 800346c:	400b      	ands	r3, r1
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4099      	lsls	r1, r3
 8003472:	000b      	movs	r3, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b006      	add	sp, #24
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223c      	movs	r2, #60	; 0x3c
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e047      	b.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	223c      	movs	r2, #60	; 0x3c
 80034a0:	2101      	movs	r1, #1
 80034a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	223d      	movs	r2, #61	; 0x3d
 80034a8:	2102      	movs	r1, #2
 80034aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2270      	movs	r2, #112	; 0x70
 80034c0:	4393      	bics	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00f      	beq.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d009      	beq.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10c      	bne.n	800351a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	4393      	bics	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223d      	movs	r2, #61	; 0x3d
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	223c      	movs	r2, #60	; 0x3c
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b004      	add	sp, #16
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40000400 	.word	0x40000400
 800353c:	40014000 	.word	0x40014000

08003540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	223c      	movs	r2, #60	; 0x3c
 8003552:	5c9b      	ldrb	r3, [r3, r2]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e03e      	b.n	80035da <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	223c      	movs	r2, #60	; 0x3c
 8003560:	2101      	movs	r1, #1
 8003562:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	22ff      	movs	r2, #255	; 0xff
 8003568:	4393      	bics	r3, r2
 800356a:	001a      	movs	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003578:	401a      	ands	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003586:	401a      	ands	r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003594:	401a      	ands	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80035a2:	401a      	ands	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80035b0:	401a      	ands	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80035be:	401a      	ands	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	223c      	movs	r2, #60	; 0x3c
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	fffffcff 	.word	0xfffffcff
 80035e8:	fffffbff 	.word	0xfffffbff
 80035ec:	fffff7ff 	.word	0xfffff7ff
 80035f0:	ffffefff 	.word	0xffffefff
 80035f4:	ffffdfff 	.word	0xffffdfff
 80035f8:	ffffbfff 	.word	0xffffbfff

080035fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e044      	b.n	8003698 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2278      	movs	r2, #120	; 0x78
 800361a:	2100      	movs	r1, #0
 800361c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f7fd fb95 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	438a      	bics	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f8d0 	bl	80037e4 <UART_SetConfig>
 8003644:	0003      	movs	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e024      	b.n	8003698 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fa4b 	bl	8003af4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	490d      	ldr	r1, [pc, #52]	; (80036a0 <HAL_UART_Init+0xa4>)
 800366a:	400a      	ands	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	212a      	movs	r1, #42	; 0x2a
 800367a:	438a      	bics	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 fae3 	bl	8003c5c <UART_CheckIdleState>
 8003696:	0003      	movs	r3, r0
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	ffffb7ff 	.word	0xffffb7ff

080036a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	1dbb      	adds	r3, r7, #6
 80036b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d000      	beq.n	80036be <HAL_UART_Transmit+0x1a>
 80036bc:	e08d      	b.n	80037da <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_UART_Transmit+0x28>
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e085      	b.n	80037dc <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	429a      	cmp	r2, r3
 80036da:	d109      	bne.n	80036f0 <HAL_UART_Transmit+0x4c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2201      	movs	r2, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	d001      	beq.n	80036f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e075      	b.n	80037dc <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2284      	movs	r2, #132	; 0x84
 80036f4:	2100      	movs	r1, #0
 80036f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2221      	movs	r2, #33	; 0x21
 80036fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036fe:	f7fd fc95 	bl	800102c <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1dba      	adds	r2, r7, #6
 800370a:	2150      	movs	r1, #80	; 0x50
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1dba      	adds	r2, r7, #6
 8003714:	2152      	movs	r1, #82	; 0x52
 8003716:	8812      	ldrh	r2, [r2, #0]
 8003718:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	015b      	lsls	r3, r3, #5
 8003722:	429a      	cmp	r2, r3
 8003724:	d108      	bne.n	8003738 <HAL_UART_Transmit+0x94>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e003      	b.n	8003740 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003740:	e030      	b.n	80037a4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	0013      	movs	r3, r2
 800374c:	2200      	movs	r2, #0
 800374e:	2180      	movs	r1, #128	; 0x80
 8003750:	f000 fb2c 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d004      	beq.n	8003762 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e03c      	b.n	80037dc <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	05d2      	lsls	r2, r2, #23
 8003772:	0dd2      	lsrs	r2, r2, #23
 8003774:	b292      	uxth	r2, r2
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	3302      	adds	r3, #2
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e008      	b.n	8003792 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	b292      	uxth	r2, r2
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3301      	adds	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2252      	movs	r2, #82	; 0x52
 8003796:	5a9b      	ldrh	r3, [r3, r2]
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b299      	uxth	r1, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2252      	movs	r2, #82	; 0x52
 80037a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2252      	movs	r2, #82	; 0x52
 80037a8:	5a9b      	ldrh	r3, [r3, r2]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1c8      	bne.n	8003742 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	0013      	movs	r3, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	2140      	movs	r1, #64	; 0x40
 80037be:	f000 faf5 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d004      	beq.n	80037d0 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e005      	b.n	80037dc <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b008      	add	sp, #32
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ec:	231e      	movs	r3, #30
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4aaf      	ldr	r2, [pc, #700]	; (8003ad0 <UART_SetConfig+0x2ec>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4aaa      	ldr	r2, [pc, #680]	; (8003ad4 <UART_SetConfig+0x2f0>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4aa1      	ldr	r2, [pc, #644]	; (8003ad8 <UART_SetConfig+0x2f4>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	430a      	orrs	r2, r1
 800385e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a9d      	ldr	r2, [pc, #628]	; (8003adc <UART_SetConfig+0x2f8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d127      	bne.n	80038ba <UART_SetConfig+0xd6>
 800386a:	4b9d      	ldr	r3, [pc, #628]	; (8003ae0 <UART_SetConfig+0x2fc>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	2203      	movs	r2, #3
 8003870:	4013      	ands	r3, r2
 8003872:	2b03      	cmp	r3, #3
 8003874:	d00d      	beq.n	8003892 <UART_SetConfig+0xae>
 8003876:	d81b      	bhi.n	80038b0 <UART_SetConfig+0xcc>
 8003878:	2b02      	cmp	r3, #2
 800387a:	d014      	beq.n	80038a6 <UART_SetConfig+0xc2>
 800387c:	d818      	bhi.n	80038b0 <UART_SetConfig+0xcc>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <UART_SetConfig+0xa4>
 8003882:	2b01      	cmp	r3, #1
 8003884:	d00a      	beq.n	800389c <UART_SetConfig+0xb8>
 8003886:	e013      	b.n	80038b0 <UART_SetConfig+0xcc>
 8003888:	231f      	movs	r3, #31
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e065      	b.n	800395e <UART_SetConfig+0x17a>
 8003892:	231f      	movs	r3, #31
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2202      	movs	r2, #2
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e060      	b.n	800395e <UART_SetConfig+0x17a>
 800389c:	231f      	movs	r3, #31
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2204      	movs	r2, #4
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e05b      	b.n	800395e <UART_SetConfig+0x17a>
 80038a6:	231f      	movs	r3, #31
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	2208      	movs	r2, #8
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e056      	b.n	800395e <UART_SetConfig+0x17a>
 80038b0:	231f      	movs	r3, #31
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2210      	movs	r2, #16
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e051      	b.n	800395e <UART_SetConfig+0x17a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a89      	ldr	r2, [pc, #548]	; (8003ae4 <UART_SetConfig+0x300>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d134      	bne.n	800392e <UART_SetConfig+0x14a>
 80038c4:	4b86      	ldr	r3, [pc, #536]	; (8003ae0 <UART_SetConfig+0x2fc>)
 80038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c8:	23c0      	movs	r3, #192	; 0xc0
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	4013      	ands	r3, r2
 80038ce:	22c0      	movs	r2, #192	; 0xc0
 80038d0:	0292      	lsls	r2, r2, #10
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <UART_SetConfig+0x122>
 80038d6:	22c0      	movs	r2, #192	; 0xc0
 80038d8:	0292      	lsls	r2, r2, #10
 80038da:	4293      	cmp	r3, r2
 80038dc:	d822      	bhi.n	8003924 <UART_SetConfig+0x140>
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	0292      	lsls	r2, r2, #10
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d019      	beq.n	800391a <UART_SetConfig+0x136>
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0292      	lsls	r2, r2, #10
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d81a      	bhi.n	8003924 <UART_SetConfig+0x140>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <UART_SetConfig+0x118>
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	0252      	lsls	r2, r2, #9
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00a      	beq.n	8003910 <UART_SetConfig+0x12c>
 80038fa:	e013      	b.n	8003924 <UART_SetConfig+0x140>
 80038fc:	231f      	movs	r3, #31
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e02b      	b.n	800395e <UART_SetConfig+0x17a>
 8003906:	231f      	movs	r3, #31
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e026      	b.n	800395e <UART_SetConfig+0x17a>
 8003910:	231f      	movs	r3, #31
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2204      	movs	r2, #4
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e021      	b.n	800395e <UART_SetConfig+0x17a>
 800391a:	231f      	movs	r3, #31
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	2208      	movs	r2, #8
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e01c      	b.n	800395e <UART_SetConfig+0x17a>
 8003924:	231f      	movs	r3, #31
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2210      	movs	r2, #16
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e017      	b.n	800395e <UART_SetConfig+0x17a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6d      	ldr	r2, [pc, #436]	; (8003ae8 <UART_SetConfig+0x304>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d104      	bne.n	8003942 <UART_SetConfig+0x15e>
 8003938:	231f      	movs	r3, #31
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e00d      	b.n	800395e <UART_SetConfig+0x17a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a69      	ldr	r2, [pc, #420]	; (8003aec <UART_SetConfig+0x308>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d104      	bne.n	8003956 <UART_SetConfig+0x172>
 800394c:	231f      	movs	r3, #31
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	e003      	b.n	800395e <UART_SetConfig+0x17a>
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2210      	movs	r2, #16
 800395c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	429a      	cmp	r2, r3
 8003968:	d15c      	bne.n	8003a24 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800396a:	231f      	movs	r3, #31
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d015      	beq.n	80039a0 <UART_SetConfig+0x1bc>
 8003974:	dc18      	bgt.n	80039a8 <UART_SetConfig+0x1c4>
 8003976:	2b04      	cmp	r3, #4
 8003978:	d00d      	beq.n	8003996 <UART_SetConfig+0x1b2>
 800397a:	dc15      	bgt.n	80039a8 <UART_SetConfig+0x1c4>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <UART_SetConfig+0x1a2>
 8003980:	2b02      	cmp	r3, #2
 8003982:	d005      	beq.n	8003990 <UART_SetConfig+0x1ac>
 8003984:	e010      	b.n	80039a8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003986:	f7fe faa7 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 800398a:	0003      	movs	r3, r0
 800398c:	61bb      	str	r3, [r7, #24]
        break;
 800398e:	e012      	b.n	80039b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003990:	4b57      	ldr	r3, [pc, #348]	; (8003af0 <UART_SetConfig+0x30c>)
 8003992:	61bb      	str	r3, [r7, #24]
        break;
 8003994:	e00f      	b.n	80039b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003996:	f7fe fa21 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 800399a:	0003      	movs	r3, r0
 800399c:	61bb      	str	r3, [r7, #24]
        break;
 800399e:	e00a      	b.n	80039b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	61bb      	str	r3, [r7, #24]
        break;
 80039a6:	e006      	b.n	80039b6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ac:	231e      	movs	r3, #30
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
        break;
 80039b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d100      	bne.n	80039be <UART_SetConfig+0x1da>
 80039bc:	e07a      	b.n	8003ab4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	005a      	lsls	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	18d2      	adds	r2, r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	0019      	movs	r1, r3
 80039d0:	0010      	movs	r0, r2
 80039d2:	f7fc fba3 	bl	800011c <__udivsi3>
 80039d6:	0003      	movs	r3, r0
 80039d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b0f      	cmp	r3, #15
 80039de:	d91c      	bls.n	8003a1a <UART_SetConfig+0x236>
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	025b      	lsls	r3, r3, #9
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d217      	bcs.n	8003a1a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	200e      	movs	r0, #14
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	210f      	movs	r1, #15
 80039f4:	438a      	bics	r2, r1
 80039f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2207      	movs	r2, #7
 8003a00:	4013      	ands	r3, r2
 8003a02:	b299      	uxth	r1, r3
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	183a      	adds	r2, r7, r0
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	183a      	adds	r2, r7, r0
 8003a14:	8812      	ldrh	r2, [r2, #0]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e04c      	b.n	8003ab4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a1a:	231e      	movs	r3, #30
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e047      	b.n	8003ab4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a24:	231f      	movs	r3, #31
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d015      	beq.n	8003a5a <UART_SetConfig+0x276>
 8003a2e:	dc18      	bgt.n	8003a62 <UART_SetConfig+0x27e>
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d00d      	beq.n	8003a50 <UART_SetConfig+0x26c>
 8003a34:	dc15      	bgt.n	8003a62 <UART_SetConfig+0x27e>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <UART_SetConfig+0x25c>
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d005      	beq.n	8003a4a <UART_SetConfig+0x266>
 8003a3e:	e010      	b.n	8003a62 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7fe fa4a 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8003a44:	0003      	movs	r3, r0
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e012      	b.n	8003a70 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <UART_SetConfig+0x30c>)
 8003a4c:	61bb      	str	r3, [r7, #24]
        break;
 8003a4e:	e00f      	b.n	8003a70 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a50:	f7fe f9c4 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8003a54:	0003      	movs	r3, r0
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e00a      	b.n	8003a70 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	61bb      	str	r3, [r7, #24]
        break;
 8003a60:	e006      	b.n	8003a70 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a66:	231e      	movs	r3, #30
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
        break;
 8003a6e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01e      	beq.n	8003ab4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085a      	lsrs	r2, r3, #1
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	18d2      	adds	r2, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	0019      	movs	r1, r3
 8003a86:	0010      	movs	r0, r2
 8003a88:	f7fc fb48 	bl	800011c <__udivsi3>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b0f      	cmp	r3, #15
 8003a94:	d90a      	bls.n	8003aac <UART_SetConfig+0x2c8>
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	025b      	lsls	r3, r3, #9
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d205      	bcs.n	8003aac <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	e003      	b.n	8003ab4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003aac:	231e      	movs	r3, #30
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ac0:	231e      	movs	r3, #30
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b008      	add	sp, #32
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	efff69f3 	.word	0xefff69f3
 8003ad4:	ffffcfff 	.word	0xffffcfff
 8003ad8:	fffff4ff 	.word	0xfffff4ff
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40004400 	.word	0x40004400
 8003ae8:	40004800 	.word	0x40004800
 8003aec:	40004c00 	.word	0x40004c00
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2201      	movs	r2, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a4a      	ldr	r2, [pc, #296]	; (8003c38 <UART_AdvFeatureConfig+0x144>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2202      	movs	r2, #2
 8003b24:	4013      	ands	r3, r2
 8003b26:	d00b      	beq.n	8003b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a43      	ldr	r2, [pc, #268]	; (8003c3c <UART_AdvFeatureConfig+0x148>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	0019      	movs	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2204      	movs	r2, #4
 8003b46:	4013      	ands	r3, r2
 8003b48:	d00b      	beq.n	8003b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <UART_AdvFeatureConfig+0x14c>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2208      	movs	r2, #8
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <UART_AdvFeatureConfig+0x150>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2210      	movs	r2, #16
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <UART_AdvFeatureConfig+0x154>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2220      	movs	r2, #32
 8003bac:	4013      	ands	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <UART_AdvFeatureConfig+0x158>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2240      	movs	r2, #64	; 0x40
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <UART_AdvFeatureConfig+0x15c>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	035b      	lsls	r3, r3, #13
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d10b      	bne.n	8003c0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <UART_AdvFeatureConfig+0x160>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	4013      	ands	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <UART_AdvFeatureConfig+0x164>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	fffdffff 	.word	0xfffdffff
 8003c3c:	fffeffff 	.word	0xfffeffff
 8003c40:	fffbffff 	.word	0xfffbffff
 8003c44:	ffff7fff 	.word	0xffff7fff
 8003c48:	ffffefff 	.word	0xffffefff
 8003c4c:	ffffdfff 	.word	0xffffdfff
 8003c50:	ffefffff 	.word	0xffefffff
 8003c54:	ff9fffff 	.word	0xff9fffff
 8003c58:	fff7ffff 	.word	0xfff7ffff

08003c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b092      	sub	sp, #72	; 0x48
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2284      	movs	r2, #132	; 0x84
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c6c:	f7fd f9de 	bl	800102c <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d12c      	bne.n	8003cdc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	0391      	lsls	r1, r2, #14
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4a46      	ldr	r2, [pc, #280]	; (8003da4 <UART_CheckIdleState+0x148>)
 8003c8c:	9200      	str	r2, [sp, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f000 f88c 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d021      	beq.n	8003cdc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c98:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	438a      	bics	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	f383 8810 	msr	PRIMASK, r3
}
 8003cc8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2278      	movs	r2, #120	; 0x78
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e05f      	b.n	8003d9c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d146      	bne.n	8003d78 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	03d1      	lsls	r1, r2, #15
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <UART_CheckIdleState+0x148>)
 8003cf4:	9200      	str	r2, [sp, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f000 f858 	bl	8003dac <UART_WaitOnFlagUntilTimeout>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d03b      	beq.n	8003d78 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d00:	f3ef 8310 	mrs	r3, PRIMASK
 8003d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4921      	ldr	r1, [pc, #132]	; (8003da8 <UART_CheckIdleState+0x14c>)
 8003d22:	400a      	ands	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d38:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2101      	movs	r1, #1
 8003d54:	438a      	bics	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2280      	movs	r2, #128	; 0x80
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2278      	movs	r2, #120	; 0x78
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e011      	b.n	8003d9c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	2120      	movs	r1, #32
 8003d84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2278      	movs	r2, #120	; 0x78
 8003d96:	2100      	movs	r1, #0
 8003d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b010      	add	sp, #64	; 0x40
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	01ffffff 	.word	0x01ffffff
 8003da8:	fffffedf 	.word	0xfffffedf

08003dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	1dfb      	adds	r3, r7, #7
 8003dba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbc:	e04b      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	d048      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc4:	f7fd f932 	bl	800102c <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d302      	bcc.n	8003dda <UART_WaitOnFlagUntilTimeout+0x2e>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04b      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2204      	movs	r2, #4
 8003de6:	4013      	ands	r3, r2
 8003de8:	d035      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2208      	movs	r2, #8
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d111      	bne.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 f83c 	bl	8003e80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2284      	movs	r2, #132	; 0x84
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2278      	movs	r2, #120	; 0x78
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e02c      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	401a      	ands	r2, r3
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d112      	bne.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	0112      	lsls	r2, r2, #4
 8003e38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 f81f 	bl	8003e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2284      	movs	r2, #132	; 0x84
 8003e46:	2120      	movs	r1, #32
 8003e48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2278      	movs	r2, #120	; 0x78
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e00f      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	425a      	negs	r2, r3
 8003e66:	4153      	adcs	r3, r2
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d0a4      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	; 0x38
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e88:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
 8003e92:	2301      	movs	r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4926      	ldr	r1, [pc, #152]	; (8003f44 <UART_EndRxTransfer+0xc4>)
 8003eaa:	400a      	ands	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eba:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebe:	623b      	str	r3, [r7, #32]
  return(result);
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	438a      	bics	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d118      	bne.n	8003f26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003efa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efe:	2301      	movs	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f383 8810 	msr	PRIMASK, r3
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2110      	movs	r1, #16
 8003f16:	438a      	bics	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f383 8810 	msr	PRIMASK, r3
}
 8003f24:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b00e      	add	sp, #56	; 0x38
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	fffffedf 	.word	0xfffffedf

08003f48 <std>:
 8003f48:	2300      	movs	r3, #0
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	0004      	movs	r4, r0
 8003f4e:	6003      	str	r3, [r0, #0]
 8003f50:	6043      	str	r3, [r0, #4]
 8003f52:	6083      	str	r3, [r0, #8]
 8003f54:	8181      	strh	r1, [r0, #12]
 8003f56:	6643      	str	r3, [r0, #100]	; 0x64
 8003f58:	81c2      	strh	r2, [r0, #14]
 8003f5a:	6103      	str	r3, [r0, #16]
 8003f5c:	6143      	str	r3, [r0, #20]
 8003f5e:	6183      	str	r3, [r0, #24]
 8003f60:	0019      	movs	r1, r3
 8003f62:	2208      	movs	r2, #8
 8003f64:	305c      	adds	r0, #92	; 0x5c
 8003f66:	f000 f90f 	bl	8004188 <memset>
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <std+0x50>)
 8003f6c:	6224      	str	r4, [r4, #32]
 8003f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <std+0x54>)
 8003f72:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <std+0x58>)
 8003f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <std+0x5c>)
 8003f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <std+0x60>)
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d005      	beq.n	8003f8e <std+0x46>
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <std+0x64>)
 8003f84:	429c      	cmp	r4, r3
 8003f86:	d002      	beq.n	8003f8e <std+0x46>
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <std+0x68>)
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	d103      	bne.n	8003f96 <std+0x4e>
 8003f8e:	0020      	movs	r0, r4
 8003f90:	3058      	adds	r0, #88	; 0x58
 8003f92:	f000 f979 	bl	8004288 <__retarget_lock_init_recursive>
 8003f96:	bd10      	pop	{r4, pc}
 8003f98:	080040f1 	.word	0x080040f1
 8003f9c:	08004119 	.word	0x08004119
 8003fa0:	08004151 	.word	0x08004151
 8003fa4:	0800417d 	.word	0x0800417d
 8003fa8:	200001f4 	.word	0x200001f4
 8003fac:	2000025c 	.word	0x2000025c
 8003fb0:	200002c4 	.word	0x200002c4

08003fb4 <stdio_exit_handler>:
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4a03      	ldr	r2, [pc, #12]	; (8003fc4 <stdio_exit_handler+0x10>)
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <stdio_exit_handler+0x14>)
 8003fba:	4804      	ldr	r0, [pc, #16]	; (8003fcc <stdio_exit_handler+0x18>)
 8003fbc:	f000 f86c 	bl	8004098 <_fwalk_sglue>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	2000000c 	.word	0x2000000c
 8003fc8:	08004b29 	.word	0x08004b29
 8003fcc:	20000018 	.word	0x20000018

08003fd0 <cleanup_stdio>:
 8003fd0:	6841      	ldr	r1, [r0, #4]
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <cleanup_stdio+0x30>)
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	0004      	movs	r4, r0
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	d001      	beq.n	8003fe0 <cleanup_stdio+0x10>
 8003fdc:	f000 fda4 	bl	8004b28 <_fflush_r>
 8003fe0:	68a1      	ldr	r1, [r4, #8]
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <cleanup_stdio+0x34>)
 8003fe4:	4299      	cmp	r1, r3
 8003fe6:	d002      	beq.n	8003fee <cleanup_stdio+0x1e>
 8003fe8:	0020      	movs	r0, r4
 8003fea:	f000 fd9d 	bl	8004b28 <_fflush_r>
 8003fee:	68e1      	ldr	r1, [r4, #12]
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <cleanup_stdio+0x38>)
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	d002      	beq.n	8003ffc <cleanup_stdio+0x2c>
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f000 fd96 	bl	8004b28 <_fflush_r>
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	200001f4 	.word	0x200001f4
 8004004:	2000025c 	.word	0x2000025c
 8004008:	200002c4 	.word	0x200002c4

0800400c <global_stdio_init.part.0>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <global_stdio_init.part.0+0x28>)
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <global_stdio_init.part.0+0x2c>)
 8004012:	2104      	movs	r1, #4
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	4809      	ldr	r0, [pc, #36]	; (800403c <global_stdio_init.part.0+0x30>)
 8004018:	2200      	movs	r2, #0
 800401a:	f7ff ff95 	bl	8003f48 <std>
 800401e:	2201      	movs	r2, #1
 8004020:	2109      	movs	r1, #9
 8004022:	4807      	ldr	r0, [pc, #28]	; (8004040 <global_stdio_init.part.0+0x34>)
 8004024:	f7ff ff90 	bl	8003f48 <std>
 8004028:	2202      	movs	r2, #2
 800402a:	2112      	movs	r1, #18
 800402c:	4805      	ldr	r0, [pc, #20]	; (8004044 <global_stdio_init.part.0+0x38>)
 800402e:	f7ff ff8b 	bl	8003f48 <std>
 8004032:	bd10      	pop	{r4, pc}
 8004034:	2000032c 	.word	0x2000032c
 8004038:	08003fb5 	.word	0x08003fb5
 800403c:	200001f4 	.word	0x200001f4
 8004040:	2000025c 	.word	0x2000025c
 8004044:	200002c4 	.word	0x200002c4

08004048 <__sfp_lock_acquire>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4802      	ldr	r0, [pc, #8]	; (8004054 <__sfp_lock_acquire+0xc>)
 800404c:	f000 f91d 	bl	800428a <__retarget_lock_acquire_recursive>
 8004050:	bd10      	pop	{r4, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	20000335 	.word	0x20000335

08004058 <__sfp_lock_release>:
 8004058:	b510      	push	{r4, lr}
 800405a:	4802      	ldr	r0, [pc, #8]	; (8004064 <__sfp_lock_release+0xc>)
 800405c:	f000 f916 	bl	800428c <__retarget_lock_release_recursive>
 8004060:	bd10      	pop	{r4, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	20000335 	.word	0x20000335

08004068 <__sinit>:
 8004068:	b510      	push	{r4, lr}
 800406a:	0004      	movs	r4, r0
 800406c:	f7ff ffec 	bl	8004048 <__sfp_lock_acquire>
 8004070:	6a23      	ldr	r3, [r4, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <__sinit+0x14>
 8004076:	f7ff ffef 	bl	8004058 <__sfp_lock_release>
 800407a:	bd10      	pop	{r4, pc}
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <__sinit+0x28>)
 800407e:	6223      	str	r3, [r4, #32]
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <__sinit+0x2c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f6      	bne.n	8004076 <__sinit+0xe>
 8004088:	f7ff ffc0 	bl	800400c <global_stdio_init.part.0>
 800408c:	e7f3      	b.n	8004076 <__sinit+0xe>
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	08003fd1 	.word	0x08003fd1
 8004094:	2000032c 	.word	0x2000032c

08004098 <_fwalk_sglue>:
 8004098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409a:	0014      	movs	r4, r2
 800409c:	2600      	movs	r6, #0
 800409e:	9000      	str	r0, [sp, #0]
 80040a0:	9101      	str	r1, [sp, #4]
 80040a2:	68a5      	ldr	r5, [r4, #8]
 80040a4:	6867      	ldr	r7, [r4, #4]
 80040a6:	3f01      	subs	r7, #1
 80040a8:	d504      	bpl.n	80040b4 <_fwalk_sglue+0x1c>
 80040aa:	6824      	ldr	r4, [r4, #0]
 80040ac:	2c00      	cmp	r4, #0
 80040ae:	d1f8      	bne.n	80040a2 <_fwalk_sglue+0xa>
 80040b0:	0030      	movs	r0, r6
 80040b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040b4:	89ab      	ldrh	r3, [r5, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d908      	bls.n	80040cc <_fwalk_sglue+0x34>
 80040ba:	220e      	movs	r2, #14
 80040bc:	5eab      	ldrsh	r3, [r5, r2]
 80040be:	3301      	adds	r3, #1
 80040c0:	d004      	beq.n	80040cc <_fwalk_sglue+0x34>
 80040c2:	0029      	movs	r1, r5
 80040c4:	9800      	ldr	r0, [sp, #0]
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	4798      	blx	r3
 80040ca:	4306      	orrs	r6, r0
 80040cc:	3568      	adds	r5, #104	; 0x68
 80040ce:	e7ea      	b.n	80040a6 <_fwalk_sglue+0xe>

080040d0 <iprintf>:
 80040d0:	b40f      	push	{r0, r1, r2, r3}
 80040d2:	b507      	push	{r0, r1, r2, lr}
 80040d4:	4905      	ldr	r1, [pc, #20]	; (80040ec <iprintf+0x1c>)
 80040d6:	ab04      	add	r3, sp, #16
 80040d8:	6808      	ldr	r0, [r1, #0]
 80040da:	cb04      	ldmia	r3!, {r2}
 80040dc:	6881      	ldr	r1, [r0, #8]
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	f000 f9fc 	bl	80044dc <_vfiprintf_r>
 80040e4:	b003      	add	sp, #12
 80040e6:	bc08      	pop	{r3}
 80040e8:	b004      	add	sp, #16
 80040ea:	4718      	bx	r3
 80040ec:	20000064 	.word	0x20000064

080040f0 <__sread>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	000c      	movs	r4, r1
 80040f4:	250e      	movs	r5, #14
 80040f6:	5f49      	ldrsh	r1, [r1, r5]
 80040f8:	f000 f874 	bl	80041e4 <_read_r>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	db03      	blt.n	8004108 <__sread+0x18>
 8004100:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004102:	181b      	adds	r3, r3, r0
 8004104:	6563      	str	r3, [r4, #84]	; 0x54
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	4a02      	ldr	r2, [pc, #8]	; (8004114 <__sread+0x24>)
 800410c:	4013      	ands	r3, r2
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	e7f9      	b.n	8004106 <__sread+0x16>
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	ffffefff 	.word	0xffffefff

08004118 <__swrite>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	001f      	movs	r7, r3
 800411c:	898b      	ldrh	r3, [r1, #12]
 800411e:	0005      	movs	r5, r0
 8004120:	000c      	movs	r4, r1
 8004122:	0016      	movs	r6, r2
 8004124:	05db      	lsls	r3, r3, #23
 8004126:	d505      	bpl.n	8004134 <__swrite+0x1c>
 8004128:	230e      	movs	r3, #14
 800412a:	5ec9      	ldrsh	r1, [r1, r3]
 800412c:	2200      	movs	r2, #0
 800412e:	2302      	movs	r3, #2
 8004130:	f000 f844 	bl	80041bc <_lseek_r>
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <__swrite+0x34>)
 8004138:	0028      	movs	r0, r5
 800413a:	4013      	ands	r3, r2
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	0032      	movs	r2, r6
 8004140:	230e      	movs	r3, #14
 8004142:	5ee1      	ldrsh	r1, [r4, r3]
 8004144:	003b      	movs	r3, r7
 8004146:	f000 f861 	bl	800420c <_write_r>
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414c:	ffffefff 	.word	0xffffefff

08004150 <__sseek>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	000c      	movs	r4, r1
 8004154:	250e      	movs	r5, #14
 8004156:	5f49      	ldrsh	r1, [r1, r5]
 8004158:	f000 f830 	bl	80041bc <_lseek_r>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	1c42      	adds	r2, r0, #1
 8004160:	d103      	bne.n	800416a <__sseek+0x1a>
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <__sseek+0x28>)
 8004164:	4013      	ands	r3, r2
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	bd70      	pop	{r4, r5, r6, pc}
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	0152      	lsls	r2, r2, #5
 800416e:	4313      	orrs	r3, r2
 8004170:	81a3      	strh	r3, [r4, #12]
 8004172:	6560      	str	r0, [r4, #84]	; 0x54
 8004174:	e7f8      	b.n	8004168 <__sseek+0x18>
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	ffffefff 	.word	0xffffefff

0800417c <__sclose>:
 800417c:	b510      	push	{r4, lr}
 800417e:	230e      	movs	r3, #14
 8004180:	5ec9      	ldrsh	r1, [r1, r3]
 8004182:	f000 f809 	bl	8004198 <_close_r>
 8004186:	bd10      	pop	{r4, pc}

08004188 <memset>:
 8004188:	0003      	movs	r3, r0
 800418a:	1882      	adds	r2, r0, r2
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <_close_r>:
 8004198:	2300      	movs	r3, #0
 800419a:	b570      	push	{r4, r5, r6, lr}
 800419c:	4d06      	ldr	r5, [pc, #24]	; (80041b8 <_close_r+0x20>)
 800419e:	0004      	movs	r4, r0
 80041a0:	0008      	movs	r0, r1
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	f7fc fe56 	bl	8000e54 <_close>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d103      	bne.n	80041b4 <_close_r+0x1c>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <_close_r+0x1c>
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	20000330 	.word	0x20000330

080041bc <_lseek_r>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	0004      	movs	r4, r0
 80041c0:	0008      	movs	r0, r1
 80041c2:	0011      	movs	r1, r2
 80041c4:	001a      	movs	r2, r3
 80041c6:	2300      	movs	r3, #0
 80041c8:	4d05      	ldr	r5, [pc, #20]	; (80041e0 <_lseek_r+0x24>)
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f7fc fe63 	bl	8000e96 <_lseek>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d103      	bne.n	80041dc <_lseek_r+0x20>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d000      	beq.n	80041dc <_lseek_r+0x20>
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	bd70      	pop	{r4, r5, r6, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	20000330 	.word	0x20000330

080041e4 <_read_r>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	0004      	movs	r4, r0
 80041e8:	0008      	movs	r0, r1
 80041ea:	0011      	movs	r1, r2
 80041ec:	001a      	movs	r2, r3
 80041ee:	2300      	movs	r3, #0
 80041f0:	4d05      	ldr	r5, [pc, #20]	; (8004208 <_read_r+0x24>)
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	f7fc fe11 	bl	8000e1a <_read>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d103      	bne.n	8004204 <_read_r+0x20>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d000      	beq.n	8004204 <_read_r+0x20>
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	bd70      	pop	{r4, r5, r6, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	20000330 	.word	0x20000330

0800420c <_write_r>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	0004      	movs	r4, r0
 8004210:	0008      	movs	r0, r1
 8004212:	0011      	movs	r1, r2
 8004214:	001a      	movs	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	4d05      	ldr	r5, [pc, #20]	; (8004230 <_write_r+0x24>)
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	f7fc faac 	bl	8000778 <_write>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d103      	bne.n	800422c <_write_r+0x20>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d000      	beq.n	800422c <_write_r+0x20>
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	bd70      	pop	{r4, r5, r6, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	20000330 	.word	0x20000330

08004234 <__errno>:
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <__errno+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	20000064 	.word	0x20000064

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	2600      	movs	r6, #0
 8004244:	4c0c      	ldr	r4, [pc, #48]	; (8004278 <__libc_init_array+0x38>)
 8004246:	4d0d      	ldr	r5, [pc, #52]	; (800427c <__libc_init_array+0x3c>)
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	2600      	movs	r6, #0
 8004252:	f000 fde3 	bl	8004e1c <_init>
 8004256:	4c0a      	ldr	r4, [pc, #40]	; (8004280 <__libc_init_array+0x40>)
 8004258:	4d0a      	ldr	r5, [pc, #40]	; (8004284 <__libc_init_array+0x44>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	00b3      	lsls	r3, r6, #2
 8004266:	58eb      	ldr	r3, [r5, r3]
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	00b3      	lsls	r3, r6, #2
 8004270:	58eb      	ldr	r3, [r5, r3]
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08005024 	.word	0x08005024
 800427c:	08005024 	.word	0x08005024
 8004280:	08005028 	.word	0x08005028
 8004284:	08005024 	.word	0x08005024

08004288 <__retarget_lock_init_recursive>:
 8004288:	4770      	bx	lr

0800428a <__retarget_lock_acquire_recursive>:
 800428a:	4770      	bx	lr

0800428c <__retarget_lock_release_recursive>:
 800428c:	4770      	bx	lr
	...

08004290 <_free_r>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	0005      	movs	r5, r0
 8004294:	2900      	cmp	r1, #0
 8004296:	d010      	beq.n	80042ba <_free_r+0x2a>
 8004298:	1f0c      	subs	r4, r1, #4
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	da00      	bge.n	80042a2 <_free_r+0x12>
 80042a0:	18e4      	adds	r4, r4, r3
 80042a2:	0028      	movs	r0, r5
 80042a4:	f000 f8e2 	bl	800446c <__malloc_lock>
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <_free_r+0x90>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <_free_r+0x2c>
 80042b0:	6063      	str	r3, [r4, #4]
 80042b2:	6014      	str	r4, [r2, #0]
 80042b4:	0028      	movs	r0, r5
 80042b6:	f000 f8e1 	bl	800447c <__malloc_unlock>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	42a3      	cmp	r3, r4
 80042be:	d908      	bls.n	80042d2 <_free_r+0x42>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	1821      	adds	r1, r4, r0
 80042c4:	428b      	cmp	r3, r1
 80042c6:	d1f3      	bne.n	80042b0 <_free_r+0x20>
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	1809      	adds	r1, r1, r0
 80042ce:	6021      	str	r1, [r4, #0]
 80042d0:	e7ee      	b.n	80042b0 <_free_r+0x20>
 80042d2:	001a      	movs	r2, r3
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <_free_r+0x4e>
 80042da:	42a3      	cmp	r3, r4
 80042dc:	d9f9      	bls.n	80042d2 <_free_r+0x42>
 80042de:	6811      	ldr	r1, [r2, #0]
 80042e0:	1850      	adds	r0, r2, r1
 80042e2:	42a0      	cmp	r0, r4
 80042e4:	d10b      	bne.n	80042fe <_free_r+0x6e>
 80042e6:	6820      	ldr	r0, [r4, #0]
 80042e8:	1809      	adds	r1, r1, r0
 80042ea:	1850      	adds	r0, r2, r1
 80042ec:	6011      	str	r1, [r2, #0]
 80042ee:	4283      	cmp	r3, r0
 80042f0:	d1e0      	bne.n	80042b4 <_free_r+0x24>
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	1841      	adds	r1, r0, r1
 80042f8:	6011      	str	r1, [r2, #0]
 80042fa:	6053      	str	r3, [r2, #4]
 80042fc:	e7da      	b.n	80042b4 <_free_r+0x24>
 80042fe:	42a0      	cmp	r0, r4
 8004300:	d902      	bls.n	8004308 <_free_r+0x78>
 8004302:	230c      	movs	r3, #12
 8004304:	602b      	str	r3, [r5, #0]
 8004306:	e7d5      	b.n	80042b4 <_free_r+0x24>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	1821      	adds	r1, r4, r0
 800430c:	428b      	cmp	r3, r1
 800430e:	d103      	bne.n	8004318 <_free_r+0x88>
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	1809      	adds	r1, r1, r0
 8004316:	6021      	str	r1, [r4, #0]
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	6054      	str	r4, [r2, #4]
 800431c:	e7ca      	b.n	80042b4 <_free_r+0x24>
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	20000338 	.word	0x20000338

08004324 <sbrk_aligned>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4e0f      	ldr	r6, [pc, #60]	; (8004364 <sbrk_aligned+0x40>)
 8004328:	000d      	movs	r5, r1
 800432a:	6831      	ldr	r1, [r6, #0]
 800432c:	0004      	movs	r4, r0
 800432e:	2900      	cmp	r1, #0
 8004330:	d102      	bne.n	8004338 <sbrk_aligned+0x14>
 8004332:	f000 fccb 	bl	8004ccc <_sbrk_r>
 8004336:	6030      	str	r0, [r6, #0]
 8004338:	0029      	movs	r1, r5
 800433a:	0020      	movs	r0, r4
 800433c:	f000 fcc6 	bl	8004ccc <_sbrk_r>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d00a      	beq.n	800435a <sbrk_aligned+0x36>
 8004344:	2303      	movs	r3, #3
 8004346:	1cc5      	adds	r5, r0, #3
 8004348:	439d      	bics	r5, r3
 800434a:	42a8      	cmp	r0, r5
 800434c:	d007      	beq.n	800435e <sbrk_aligned+0x3a>
 800434e:	1a29      	subs	r1, r5, r0
 8004350:	0020      	movs	r0, r4
 8004352:	f000 fcbb 	bl	8004ccc <_sbrk_r>
 8004356:	3001      	adds	r0, #1
 8004358:	d101      	bne.n	800435e <sbrk_aligned+0x3a>
 800435a:	2501      	movs	r5, #1
 800435c:	426d      	negs	r5, r5
 800435e:	0028      	movs	r0, r5
 8004360:	bd70      	pop	{r4, r5, r6, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	2000033c 	.word	0x2000033c

08004368 <_malloc_r>:
 8004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436a:	2203      	movs	r2, #3
 800436c:	1ccb      	adds	r3, r1, #3
 800436e:	4393      	bics	r3, r2
 8004370:	3308      	adds	r3, #8
 8004372:	0006      	movs	r6, r0
 8004374:	001f      	movs	r7, r3
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d238      	bcs.n	80043ec <_malloc_r+0x84>
 800437a:	270c      	movs	r7, #12
 800437c:	42b9      	cmp	r1, r7
 800437e:	d837      	bhi.n	80043f0 <_malloc_r+0x88>
 8004380:	0030      	movs	r0, r6
 8004382:	f000 f873 	bl	800446c <__malloc_lock>
 8004386:	4b38      	ldr	r3, [pc, #224]	; (8004468 <_malloc_r+0x100>)
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	001c      	movs	r4, r3
 800438e:	2c00      	cmp	r4, #0
 8004390:	d133      	bne.n	80043fa <_malloc_r+0x92>
 8004392:	0039      	movs	r1, r7
 8004394:	0030      	movs	r0, r6
 8004396:	f7ff ffc5 	bl	8004324 <sbrk_aligned>
 800439a:	0004      	movs	r4, r0
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d15e      	bne.n	800445e <_malloc_r+0xf6>
 80043a0:	9b00      	ldr	r3, [sp, #0]
 80043a2:	681c      	ldr	r4, [r3, #0]
 80043a4:	0025      	movs	r5, r4
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	d14e      	bne.n	8004448 <_malloc_r+0xe0>
 80043aa:	2c00      	cmp	r4, #0
 80043ac:	d051      	beq.n	8004452 <_malloc_r+0xea>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	0029      	movs	r1, r5
 80043b2:	18e3      	adds	r3, r4, r3
 80043b4:	0030      	movs	r0, r6
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	f000 fc88 	bl	8004ccc <_sbrk_r>
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	4283      	cmp	r3, r0
 80043c0:	d147      	bne.n	8004452 <_malloc_r+0xea>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0030      	movs	r0, r6
 80043c6:	1aff      	subs	r7, r7, r3
 80043c8:	0039      	movs	r1, r7
 80043ca:	f7ff ffab 	bl	8004324 <sbrk_aligned>
 80043ce:	3001      	adds	r0, #1
 80043d0:	d03f      	beq.n	8004452 <_malloc_r+0xea>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	19db      	adds	r3, r3, r7
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	9b00      	ldr	r3, [sp, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d040      	beq.n	8004462 <_malloc_r+0xfa>
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	42a2      	cmp	r2, r4
 80043e4:	d133      	bne.n	800444e <_malloc_r+0xe6>
 80043e6:	2200      	movs	r2, #0
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	e014      	b.n	8004416 <_malloc_r+0xae>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dac5      	bge.n	800437c <_malloc_r+0x14>
 80043f0:	230c      	movs	r3, #12
 80043f2:	2500      	movs	r5, #0
 80043f4:	6033      	str	r3, [r6, #0]
 80043f6:	0028      	movs	r0, r5
 80043f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043fa:	6821      	ldr	r1, [r4, #0]
 80043fc:	1bc9      	subs	r1, r1, r7
 80043fe:	d420      	bmi.n	8004442 <_malloc_r+0xda>
 8004400:	290b      	cmp	r1, #11
 8004402:	d918      	bls.n	8004436 <_malloc_r+0xce>
 8004404:	19e2      	adds	r2, r4, r7
 8004406:	6027      	str	r7, [r4, #0]
 8004408:	42a3      	cmp	r3, r4
 800440a:	d112      	bne.n	8004432 <_malloc_r+0xca>
 800440c:	9b00      	ldr	r3, [sp, #0]
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	6863      	ldr	r3, [r4, #4]
 8004412:	6011      	str	r1, [r2, #0]
 8004414:	6053      	str	r3, [r2, #4]
 8004416:	0030      	movs	r0, r6
 8004418:	0025      	movs	r5, r4
 800441a:	f000 f82f 	bl	800447c <__malloc_unlock>
 800441e:	2207      	movs	r2, #7
 8004420:	350b      	adds	r5, #11
 8004422:	1d23      	adds	r3, r4, #4
 8004424:	4395      	bics	r5, r2
 8004426:	1aea      	subs	r2, r5, r3
 8004428:	429d      	cmp	r5, r3
 800442a:	d0e4      	beq.n	80043f6 <_malloc_r+0x8e>
 800442c:	1b5b      	subs	r3, r3, r5
 800442e:	50a3      	str	r3, [r4, r2]
 8004430:	e7e1      	b.n	80043f6 <_malloc_r+0x8e>
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	e7ec      	b.n	8004410 <_malloc_r+0xa8>
 8004436:	6862      	ldr	r2, [r4, #4]
 8004438:	42a3      	cmp	r3, r4
 800443a:	d1d5      	bne.n	80043e8 <_malloc_r+0x80>
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e7e9      	b.n	8004416 <_malloc_r+0xae>
 8004442:	0023      	movs	r3, r4
 8004444:	6864      	ldr	r4, [r4, #4]
 8004446:	e7a2      	b.n	800438e <_malloc_r+0x26>
 8004448:	002c      	movs	r4, r5
 800444a:	686d      	ldr	r5, [r5, #4]
 800444c:	e7ab      	b.n	80043a6 <_malloc_r+0x3e>
 800444e:	0013      	movs	r3, r2
 8004450:	e7c4      	b.n	80043dc <_malloc_r+0x74>
 8004452:	230c      	movs	r3, #12
 8004454:	0030      	movs	r0, r6
 8004456:	6033      	str	r3, [r6, #0]
 8004458:	f000 f810 	bl	800447c <__malloc_unlock>
 800445c:	e7cb      	b.n	80043f6 <_malloc_r+0x8e>
 800445e:	6027      	str	r7, [r4, #0]
 8004460:	e7d9      	b.n	8004416 <_malloc_r+0xae>
 8004462:	605b      	str	r3, [r3, #4]
 8004464:	deff      	udf	#255	; 0xff
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	20000338 	.word	0x20000338

0800446c <__malloc_lock>:
 800446c:	b510      	push	{r4, lr}
 800446e:	4802      	ldr	r0, [pc, #8]	; (8004478 <__malloc_lock+0xc>)
 8004470:	f7ff ff0b 	bl	800428a <__retarget_lock_acquire_recursive>
 8004474:	bd10      	pop	{r4, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000334 	.word	0x20000334

0800447c <__malloc_unlock>:
 800447c:	b510      	push	{r4, lr}
 800447e:	4802      	ldr	r0, [pc, #8]	; (8004488 <__malloc_unlock+0xc>)
 8004480:	f7ff ff04 	bl	800428c <__retarget_lock_release_recursive>
 8004484:	bd10      	pop	{r4, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000334 	.word	0x20000334

0800448c <__sfputc_r>:
 800448c:	6893      	ldr	r3, [r2, #8]
 800448e:	b510      	push	{r4, lr}
 8004490:	3b01      	subs	r3, #1
 8004492:	6093      	str	r3, [r2, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	da04      	bge.n	80044a2 <__sfputc_r+0x16>
 8004498:	6994      	ldr	r4, [r2, #24]
 800449a:	42a3      	cmp	r3, r4
 800449c:	db07      	blt.n	80044ae <__sfputc_r+0x22>
 800449e:	290a      	cmp	r1, #10
 80044a0:	d005      	beq.n	80044ae <__sfputc_r+0x22>
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	1c58      	adds	r0, r3, #1
 80044a6:	6010      	str	r0, [r2, #0]
 80044a8:	7019      	strb	r1, [r3, #0]
 80044aa:	0008      	movs	r0, r1
 80044ac:	bd10      	pop	{r4, pc}
 80044ae:	f000 fb66 	bl	8004b7e <__swbuf_r>
 80044b2:	0001      	movs	r1, r0
 80044b4:	e7f9      	b.n	80044aa <__sfputc_r+0x1e>

080044b6 <__sfputs_r>:
 80044b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b8:	0006      	movs	r6, r0
 80044ba:	000f      	movs	r7, r1
 80044bc:	0014      	movs	r4, r2
 80044be:	18d5      	adds	r5, r2, r3
 80044c0:	42ac      	cmp	r4, r5
 80044c2:	d101      	bne.n	80044c8 <__sfputs_r+0x12>
 80044c4:	2000      	movs	r0, #0
 80044c6:	e007      	b.n	80044d8 <__sfputs_r+0x22>
 80044c8:	7821      	ldrb	r1, [r4, #0]
 80044ca:	003a      	movs	r2, r7
 80044cc:	0030      	movs	r0, r6
 80044ce:	f7ff ffdd 	bl	800448c <__sfputc_r>
 80044d2:	3401      	adds	r4, #1
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d1f3      	bne.n	80044c0 <__sfputs_r+0xa>
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044dc <_vfiprintf_r>:
 80044dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044de:	b0a1      	sub	sp, #132	; 0x84
 80044e0:	000f      	movs	r7, r1
 80044e2:	0015      	movs	r5, r2
 80044e4:	001e      	movs	r6, r3
 80044e6:	9003      	str	r0, [sp, #12]
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d004      	beq.n	80044f6 <_vfiprintf_r+0x1a>
 80044ec:	6a03      	ldr	r3, [r0, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <_vfiprintf_r+0x1a>
 80044f2:	f7ff fdb9 	bl	8004068 <__sinit>
 80044f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f8:	07db      	lsls	r3, r3, #31
 80044fa:	d405      	bmi.n	8004508 <_vfiprintf_r+0x2c>
 80044fc:	89bb      	ldrh	r3, [r7, #12]
 80044fe:	059b      	lsls	r3, r3, #22
 8004500:	d402      	bmi.n	8004508 <_vfiprintf_r+0x2c>
 8004502:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004504:	f7ff fec1 	bl	800428a <__retarget_lock_acquire_recursive>
 8004508:	89bb      	ldrh	r3, [r7, #12]
 800450a:	071b      	lsls	r3, r3, #28
 800450c:	d502      	bpl.n	8004514 <_vfiprintf_r+0x38>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d113      	bne.n	800453c <_vfiprintf_r+0x60>
 8004514:	0039      	movs	r1, r7
 8004516:	9803      	ldr	r0, [sp, #12]
 8004518:	f000 fb74 	bl	8004c04 <__swsetup_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	d00d      	beq.n	800453c <_vfiprintf_r+0x60>
 8004520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004522:	07db      	lsls	r3, r3, #31
 8004524:	d503      	bpl.n	800452e <_vfiprintf_r+0x52>
 8004526:	2001      	movs	r0, #1
 8004528:	4240      	negs	r0, r0
 800452a:	b021      	add	sp, #132	; 0x84
 800452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452e:	89bb      	ldrh	r3, [r7, #12]
 8004530:	059b      	lsls	r3, r3, #22
 8004532:	d4f8      	bmi.n	8004526 <_vfiprintf_r+0x4a>
 8004534:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004536:	f7ff fea9 	bl	800428c <__retarget_lock_release_recursive>
 800453a:	e7f4      	b.n	8004526 <_vfiprintf_r+0x4a>
 800453c:	2300      	movs	r3, #0
 800453e:	ac08      	add	r4, sp, #32
 8004540:	6163      	str	r3, [r4, #20]
 8004542:	3320      	adds	r3, #32
 8004544:	7663      	strb	r3, [r4, #25]
 8004546:	3310      	adds	r3, #16
 8004548:	76a3      	strb	r3, [r4, #26]
 800454a:	9607      	str	r6, [sp, #28]
 800454c:	002e      	movs	r6, r5
 800454e:	7833      	ldrb	r3, [r6, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <_vfiprintf_r+0x7c>
 8004554:	2b25      	cmp	r3, #37	; 0x25
 8004556:	d148      	bne.n	80045ea <_vfiprintf_r+0x10e>
 8004558:	1b73      	subs	r3, r6, r5
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	42ae      	cmp	r6, r5
 800455e:	d00b      	beq.n	8004578 <_vfiprintf_r+0x9c>
 8004560:	002a      	movs	r2, r5
 8004562:	0039      	movs	r1, r7
 8004564:	9803      	ldr	r0, [sp, #12]
 8004566:	f7ff ffa6 	bl	80044b6 <__sfputs_r>
 800456a:	3001      	adds	r0, #1
 800456c:	d100      	bne.n	8004570 <_vfiprintf_r+0x94>
 800456e:	e0af      	b.n	80046d0 <_vfiprintf_r+0x1f4>
 8004570:	6963      	ldr	r3, [r4, #20]
 8004572:	9a05      	ldr	r2, [sp, #20]
 8004574:	189b      	adds	r3, r3, r2
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	7833      	ldrb	r3, [r6, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d100      	bne.n	8004580 <_vfiprintf_r+0xa4>
 800457e:	e0a7      	b.n	80046d0 <_vfiprintf_r+0x1f4>
 8004580:	2201      	movs	r2, #1
 8004582:	2300      	movs	r3, #0
 8004584:	4252      	negs	r2, r2
 8004586:	6062      	str	r2, [r4, #4]
 8004588:	a904      	add	r1, sp, #16
 800458a:	3254      	adds	r2, #84	; 0x54
 800458c:	1852      	adds	r2, r2, r1
 800458e:	1c75      	adds	r5, r6, #1
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	60e3      	str	r3, [r4, #12]
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	7013      	strb	r3, [r2, #0]
 8004598:	65a3      	str	r3, [r4, #88]	; 0x58
 800459a:	4b59      	ldr	r3, [pc, #356]	; (8004700 <_vfiprintf_r+0x224>)
 800459c:	2205      	movs	r2, #5
 800459e:	0018      	movs	r0, r3
 80045a0:	7829      	ldrb	r1, [r5, #0]
 80045a2:	9305      	str	r3, [sp, #20]
 80045a4:	f000 fba4 	bl	8004cf0 <memchr>
 80045a8:	1c6e      	adds	r6, r5, #1
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d11f      	bne.n	80045ee <_vfiprintf_r+0x112>
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	06d3      	lsls	r3, r2, #27
 80045b2:	d504      	bpl.n	80045be <_vfiprintf_r+0xe2>
 80045b4:	2353      	movs	r3, #83	; 0x53
 80045b6:	a904      	add	r1, sp, #16
 80045b8:	185b      	adds	r3, r3, r1
 80045ba:	2120      	movs	r1, #32
 80045bc:	7019      	strb	r1, [r3, #0]
 80045be:	0713      	lsls	r3, r2, #28
 80045c0:	d504      	bpl.n	80045cc <_vfiprintf_r+0xf0>
 80045c2:	2353      	movs	r3, #83	; 0x53
 80045c4:	a904      	add	r1, sp, #16
 80045c6:	185b      	adds	r3, r3, r1
 80045c8:	212b      	movs	r1, #43	; 0x2b
 80045ca:	7019      	strb	r1, [r3, #0]
 80045cc:	782b      	ldrb	r3, [r5, #0]
 80045ce:	2b2a      	cmp	r3, #42	; 0x2a
 80045d0:	d016      	beq.n	8004600 <_vfiprintf_r+0x124>
 80045d2:	002e      	movs	r6, r5
 80045d4:	2100      	movs	r1, #0
 80045d6:	200a      	movs	r0, #10
 80045d8:	68e3      	ldr	r3, [r4, #12]
 80045da:	7832      	ldrb	r2, [r6, #0]
 80045dc:	1c75      	adds	r5, r6, #1
 80045de:	3a30      	subs	r2, #48	; 0x30
 80045e0:	2a09      	cmp	r2, #9
 80045e2:	d94e      	bls.n	8004682 <_vfiprintf_r+0x1a6>
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d111      	bne.n	800460c <_vfiprintf_r+0x130>
 80045e8:	e017      	b.n	800461a <_vfiprintf_r+0x13e>
 80045ea:	3601      	adds	r6, #1
 80045ec:	e7af      	b.n	800454e <_vfiprintf_r+0x72>
 80045ee:	9b05      	ldr	r3, [sp, #20]
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	1ac0      	subs	r0, r0, r3
 80045f4:	2301      	movs	r3, #1
 80045f6:	4083      	lsls	r3, r0
 80045f8:	4313      	orrs	r3, r2
 80045fa:	0035      	movs	r5, r6
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	e7cc      	b.n	800459a <_vfiprintf_r+0xbe>
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	1d19      	adds	r1, r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	9107      	str	r1, [sp, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	db01      	blt.n	8004610 <_vfiprintf_r+0x134>
 800460c:	930b      	str	r3, [sp, #44]	; 0x2c
 800460e:	e004      	b.n	800461a <_vfiprintf_r+0x13e>
 8004610:	425b      	negs	r3, r3
 8004612:	60e3      	str	r3, [r4, #12]
 8004614:	2302      	movs	r3, #2
 8004616:	4313      	orrs	r3, r2
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	7833      	ldrb	r3, [r6, #0]
 800461c:	2b2e      	cmp	r3, #46	; 0x2e
 800461e:	d10a      	bne.n	8004636 <_vfiprintf_r+0x15a>
 8004620:	7873      	ldrb	r3, [r6, #1]
 8004622:	2b2a      	cmp	r3, #42	; 0x2a
 8004624:	d135      	bne.n	8004692 <_vfiprintf_r+0x1b6>
 8004626:	9b07      	ldr	r3, [sp, #28]
 8004628:	3602      	adds	r6, #2
 800462a:	1d1a      	adds	r2, r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	9207      	str	r2, [sp, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db2b      	blt.n	800468c <_vfiprintf_r+0x1b0>
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	4d33      	ldr	r5, [pc, #204]	; (8004704 <_vfiprintf_r+0x228>)
 8004638:	2203      	movs	r2, #3
 800463a:	0028      	movs	r0, r5
 800463c:	7831      	ldrb	r1, [r6, #0]
 800463e:	f000 fb57 	bl	8004cf0 <memchr>
 8004642:	2800      	cmp	r0, #0
 8004644:	d006      	beq.n	8004654 <_vfiprintf_r+0x178>
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	1b40      	subs	r0, r0, r5
 800464a:	4083      	lsls	r3, r0
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	3601      	adds	r6, #1
 8004650:	4313      	orrs	r3, r2
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	7831      	ldrb	r1, [r6, #0]
 8004656:	2206      	movs	r2, #6
 8004658:	482b      	ldr	r0, [pc, #172]	; (8004708 <_vfiprintf_r+0x22c>)
 800465a:	1c75      	adds	r5, r6, #1
 800465c:	7621      	strb	r1, [r4, #24]
 800465e:	f000 fb47 	bl	8004cf0 <memchr>
 8004662:	2800      	cmp	r0, #0
 8004664:	d043      	beq.n	80046ee <_vfiprintf_r+0x212>
 8004666:	4b29      	ldr	r3, [pc, #164]	; (800470c <_vfiprintf_r+0x230>)
 8004668:	2b00      	cmp	r3, #0
 800466a:	d125      	bne.n	80046b8 <_vfiprintf_r+0x1dc>
 800466c:	2207      	movs	r2, #7
 800466e:	9b07      	ldr	r3, [sp, #28]
 8004670:	3307      	adds	r3, #7
 8004672:	4393      	bics	r3, r2
 8004674:	3308      	adds	r3, #8
 8004676:	9307      	str	r3, [sp, #28]
 8004678:	6963      	ldr	r3, [r4, #20]
 800467a:	9a04      	ldr	r2, [sp, #16]
 800467c:	189b      	adds	r3, r3, r2
 800467e:	6163      	str	r3, [r4, #20]
 8004680:	e764      	b.n	800454c <_vfiprintf_r+0x70>
 8004682:	4343      	muls	r3, r0
 8004684:	002e      	movs	r6, r5
 8004686:	2101      	movs	r1, #1
 8004688:	189b      	adds	r3, r3, r2
 800468a:	e7a6      	b.n	80045da <_vfiprintf_r+0xfe>
 800468c:	2301      	movs	r3, #1
 800468e:	425b      	negs	r3, r3
 8004690:	e7d0      	b.n	8004634 <_vfiprintf_r+0x158>
 8004692:	2300      	movs	r3, #0
 8004694:	200a      	movs	r0, #10
 8004696:	001a      	movs	r2, r3
 8004698:	3601      	adds	r6, #1
 800469a:	6063      	str	r3, [r4, #4]
 800469c:	7831      	ldrb	r1, [r6, #0]
 800469e:	1c75      	adds	r5, r6, #1
 80046a0:	3930      	subs	r1, #48	; 0x30
 80046a2:	2909      	cmp	r1, #9
 80046a4:	d903      	bls.n	80046ae <_vfiprintf_r+0x1d2>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0c5      	beq.n	8004636 <_vfiprintf_r+0x15a>
 80046aa:	9209      	str	r2, [sp, #36]	; 0x24
 80046ac:	e7c3      	b.n	8004636 <_vfiprintf_r+0x15a>
 80046ae:	4342      	muls	r2, r0
 80046b0:	002e      	movs	r6, r5
 80046b2:	2301      	movs	r3, #1
 80046b4:	1852      	adds	r2, r2, r1
 80046b6:	e7f1      	b.n	800469c <_vfiprintf_r+0x1c0>
 80046b8:	aa07      	add	r2, sp, #28
 80046ba:	9200      	str	r2, [sp, #0]
 80046bc:	0021      	movs	r1, r4
 80046be:	003a      	movs	r2, r7
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <_vfiprintf_r+0x234>)
 80046c2:	9803      	ldr	r0, [sp, #12]
 80046c4:	e000      	b.n	80046c8 <_vfiprintf_r+0x1ec>
 80046c6:	bf00      	nop
 80046c8:	9004      	str	r0, [sp, #16]
 80046ca:	9b04      	ldr	r3, [sp, #16]
 80046cc:	3301      	adds	r3, #1
 80046ce:	d1d3      	bne.n	8004678 <_vfiprintf_r+0x19c>
 80046d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d2:	07db      	lsls	r3, r3, #31
 80046d4:	d405      	bmi.n	80046e2 <_vfiprintf_r+0x206>
 80046d6:	89bb      	ldrh	r3, [r7, #12]
 80046d8:	059b      	lsls	r3, r3, #22
 80046da:	d402      	bmi.n	80046e2 <_vfiprintf_r+0x206>
 80046dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046de:	f7ff fdd5 	bl	800428c <__retarget_lock_release_recursive>
 80046e2:	89bb      	ldrh	r3, [r7, #12]
 80046e4:	065b      	lsls	r3, r3, #25
 80046e6:	d500      	bpl.n	80046ea <_vfiprintf_r+0x20e>
 80046e8:	e71d      	b.n	8004526 <_vfiprintf_r+0x4a>
 80046ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80046ec:	e71d      	b.n	800452a <_vfiprintf_r+0x4e>
 80046ee:	aa07      	add	r2, sp, #28
 80046f0:	9200      	str	r2, [sp, #0]
 80046f2:	0021      	movs	r1, r4
 80046f4:	003a      	movs	r2, r7
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <_vfiprintf_r+0x234>)
 80046f8:	9803      	ldr	r0, [sp, #12]
 80046fa:	f000 f87b 	bl	80047f4 <_printf_i>
 80046fe:	e7e3      	b.n	80046c8 <_vfiprintf_r+0x1ec>
 8004700:	08004ff0 	.word	0x08004ff0
 8004704:	08004ff6 	.word	0x08004ff6
 8004708:	08004ffa 	.word	0x08004ffa
 800470c:	00000000 	.word	0x00000000
 8004710:	080044b7 	.word	0x080044b7

08004714 <_printf_common>:
 8004714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004716:	0016      	movs	r6, r2
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	688a      	ldr	r2, [r1, #8]
 800471c:	690b      	ldr	r3, [r1, #16]
 800471e:	000c      	movs	r4, r1
 8004720:	9000      	str	r0, [sp, #0]
 8004722:	4293      	cmp	r3, r2
 8004724:	da00      	bge.n	8004728 <_printf_common+0x14>
 8004726:	0013      	movs	r3, r2
 8004728:	0022      	movs	r2, r4
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	3243      	adds	r2, #67	; 0x43
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	2a00      	cmp	r2, #0
 8004732:	d001      	beq.n	8004738 <_printf_common+0x24>
 8004734:	3301      	adds	r3, #1
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	069b      	lsls	r3, r3, #26
 800473c:	d502      	bpl.n	8004744 <_printf_common+0x30>
 800473e:	6833      	ldr	r3, [r6, #0]
 8004740:	3302      	adds	r3, #2
 8004742:	6033      	str	r3, [r6, #0]
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	2306      	movs	r3, #6
 8004748:	0015      	movs	r5, r2
 800474a:	401d      	ands	r5, r3
 800474c:	421a      	tst	r2, r3
 800474e:	d027      	beq.n	80047a0 <_printf_common+0x8c>
 8004750:	0023      	movs	r3, r4
 8004752:	3343      	adds	r3, #67	; 0x43
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	4193      	sbcs	r3, r2
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	0692      	lsls	r2, r2, #26
 800475e:	d430      	bmi.n	80047c2 <_printf_common+0xae>
 8004760:	0022      	movs	r2, r4
 8004762:	9901      	ldr	r1, [sp, #4]
 8004764:	9800      	ldr	r0, [sp, #0]
 8004766:	9d08      	ldr	r5, [sp, #32]
 8004768:	3243      	adds	r2, #67	; 0x43
 800476a:	47a8      	blx	r5
 800476c:	3001      	adds	r0, #1
 800476e:	d025      	beq.n	80047bc <_printf_common+0xa8>
 8004770:	2206      	movs	r2, #6
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	2500      	movs	r5, #0
 8004776:	4013      	ands	r3, r2
 8004778:	2b04      	cmp	r3, #4
 800477a:	d105      	bne.n	8004788 <_printf_common+0x74>
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	68e5      	ldr	r5, [r4, #12]
 8004780:	1aed      	subs	r5, r5, r3
 8004782:	43eb      	mvns	r3, r5
 8004784:	17db      	asrs	r3, r3, #31
 8004786:	401d      	ands	r5, r3
 8004788:	68a3      	ldr	r3, [r4, #8]
 800478a:	6922      	ldr	r2, [r4, #16]
 800478c:	4293      	cmp	r3, r2
 800478e:	dd01      	ble.n	8004794 <_printf_common+0x80>
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	18ed      	adds	r5, r5, r3
 8004794:	2600      	movs	r6, #0
 8004796:	42b5      	cmp	r5, r6
 8004798:	d120      	bne.n	80047dc <_printf_common+0xc8>
 800479a:	2000      	movs	r0, #0
 800479c:	e010      	b.n	80047c0 <_printf_common+0xac>
 800479e:	3501      	adds	r5, #1
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	6832      	ldr	r2, [r6, #0]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	42ab      	cmp	r3, r5
 80047a8:	ddd2      	ble.n	8004750 <_printf_common+0x3c>
 80047aa:	0022      	movs	r2, r4
 80047ac:	2301      	movs	r3, #1
 80047ae:	9901      	ldr	r1, [sp, #4]
 80047b0:	9800      	ldr	r0, [sp, #0]
 80047b2:	9f08      	ldr	r7, [sp, #32]
 80047b4:	3219      	adds	r2, #25
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	d1f0      	bne.n	800479e <_printf_common+0x8a>
 80047bc:	2001      	movs	r0, #1
 80047be:	4240      	negs	r0, r0
 80047c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047c2:	2030      	movs	r0, #48	; 0x30
 80047c4:	18e1      	adds	r1, r4, r3
 80047c6:	3143      	adds	r1, #67	; 0x43
 80047c8:	7008      	strb	r0, [r1, #0]
 80047ca:	0021      	movs	r1, r4
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	3145      	adds	r1, #69	; 0x45
 80047d0:	7809      	ldrb	r1, [r1, #0]
 80047d2:	18a2      	adds	r2, r4, r2
 80047d4:	3243      	adds	r2, #67	; 0x43
 80047d6:	3302      	adds	r3, #2
 80047d8:	7011      	strb	r1, [r2, #0]
 80047da:	e7c1      	b.n	8004760 <_printf_common+0x4c>
 80047dc:	0022      	movs	r2, r4
 80047de:	2301      	movs	r3, #1
 80047e0:	9901      	ldr	r1, [sp, #4]
 80047e2:	9800      	ldr	r0, [sp, #0]
 80047e4:	9f08      	ldr	r7, [sp, #32]
 80047e6:	321a      	adds	r2, #26
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	d0e6      	beq.n	80047bc <_printf_common+0xa8>
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7d1      	b.n	8004796 <_printf_common+0x82>
	...

080047f4 <_printf_i>:
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b08b      	sub	sp, #44	; 0x2c
 80047f8:	9206      	str	r2, [sp, #24]
 80047fa:	000a      	movs	r2, r1
 80047fc:	3243      	adds	r2, #67	; 0x43
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	9005      	str	r0, [sp, #20]
 8004802:	9204      	str	r2, [sp, #16]
 8004804:	7e0a      	ldrb	r2, [r1, #24]
 8004806:	000c      	movs	r4, r1
 8004808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800480a:	2a78      	cmp	r2, #120	; 0x78
 800480c:	d809      	bhi.n	8004822 <_printf_i+0x2e>
 800480e:	2a62      	cmp	r2, #98	; 0x62
 8004810:	d80b      	bhi.n	800482a <_printf_i+0x36>
 8004812:	2a00      	cmp	r2, #0
 8004814:	d100      	bne.n	8004818 <_printf_i+0x24>
 8004816:	e0be      	b.n	8004996 <_printf_i+0x1a2>
 8004818:	497c      	ldr	r1, [pc, #496]	; (8004a0c <_printf_i+0x218>)
 800481a:	9103      	str	r1, [sp, #12]
 800481c:	2a58      	cmp	r2, #88	; 0x58
 800481e:	d100      	bne.n	8004822 <_printf_i+0x2e>
 8004820:	e093      	b.n	800494a <_printf_i+0x156>
 8004822:	0026      	movs	r6, r4
 8004824:	3642      	adds	r6, #66	; 0x42
 8004826:	7032      	strb	r2, [r6, #0]
 8004828:	e022      	b.n	8004870 <_printf_i+0x7c>
 800482a:	0010      	movs	r0, r2
 800482c:	3863      	subs	r0, #99	; 0x63
 800482e:	2815      	cmp	r0, #21
 8004830:	d8f7      	bhi.n	8004822 <_printf_i+0x2e>
 8004832:	f7fb fc69 	bl	8000108 <__gnu_thumb1_case_shi>
 8004836:	0016      	.short	0x0016
 8004838:	fff6001f 	.word	0xfff6001f
 800483c:	fff6fff6 	.word	0xfff6fff6
 8004840:	001ffff6 	.word	0x001ffff6
 8004844:	fff6fff6 	.word	0xfff6fff6
 8004848:	fff6fff6 	.word	0xfff6fff6
 800484c:	003600a3 	.word	0x003600a3
 8004850:	fff60083 	.word	0xfff60083
 8004854:	00b4fff6 	.word	0x00b4fff6
 8004858:	0036fff6 	.word	0x0036fff6
 800485c:	fff6fff6 	.word	0xfff6fff6
 8004860:	0087      	.short	0x0087
 8004862:	0026      	movs	r6, r4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	3642      	adds	r6, #66	; 0x42
 8004868:	1d11      	adds	r1, r2, #4
 800486a:	6019      	str	r1, [r3, #0]
 800486c:	6813      	ldr	r3, [r2, #0]
 800486e:	7033      	strb	r3, [r6, #0]
 8004870:	2301      	movs	r3, #1
 8004872:	e0a2      	b.n	80049ba <_printf_i+0x1c6>
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	6809      	ldr	r1, [r1, #0]
 8004878:	1d02      	adds	r2, r0, #4
 800487a:	060d      	lsls	r5, r1, #24
 800487c:	d50b      	bpl.n	8004896 <_printf_i+0xa2>
 800487e:	6805      	ldr	r5, [r0, #0]
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	2d00      	cmp	r5, #0
 8004884:	da03      	bge.n	800488e <_printf_i+0x9a>
 8004886:	232d      	movs	r3, #45	; 0x2d
 8004888:	9a04      	ldr	r2, [sp, #16]
 800488a:	426d      	negs	r5, r5
 800488c:	7013      	strb	r3, [r2, #0]
 800488e:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <_printf_i+0x218>)
 8004890:	270a      	movs	r7, #10
 8004892:	9303      	str	r3, [sp, #12]
 8004894:	e01b      	b.n	80048ce <_printf_i+0xda>
 8004896:	6805      	ldr	r5, [r0, #0]
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	0649      	lsls	r1, r1, #25
 800489c:	d5f1      	bpl.n	8004882 <_printf_i+0x8e>
 800489e:	b22d      	sxth	r5, r5
 80048a0:	e7ef      	b.n	8004882 <_printf_i+0x8e>
 80048a2:	680d      	ldr	r5, [r1, #0]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	1d08      	adds	r0, r1, #4
 80048a8:	6018      	str	r0, [r3, #0]
 80048aa:	062e      	lsls	r6, r5, #24
 80048ac:	d501      	bpl.n	80048b2 <_printf_i+0xbe>
 80048ae:	680d      	ldr	r5, [r1, #0]
 80048b0:	e003      	b.n	80048ba <_printf_i+0xc6>
 80048b2:	066d      	lsls	r5, r5, #25
 80048b4:	d5fb      	bpl.n	80048ae <_printf_i+0xba>
 80048b6:	680d      	ldr	r5, [r1, #0]
 80048b8:	b2ad      	uxth	r5, r5
 80048ba:	4b54      	ldr	r3, [pc, #336]	; (8004a0c <_printf_i+0x218>)
 80048bc:	2708      	movs	r7, #8
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	2a6f      	cmp	r2, #111	; 0x6f
 80048c2:	d000      	beq.n	80048c6 <_printf_i+0xd2>
 80048c4:	3702      	adds	r7, #2
 80048c6:	0023      	movs	r3, r4
 80048c8:	2200      	movs	r2, #0
 80048ca:	3343      	adds	r3, #67	; 0x43
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	60a3      	str	r3, [r4, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db03      	blt.n	80048de <_printf_i+0xea>
 80048d6:	2104      	movs	r1, #4
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	438a      	bics	r2, r1
 80048dc:	6022      	str	r2, [r4, #0]
 80048de:	2d00      	cmp	r5, #0
 80048e0:	d102      	bne.n	80048e8 <_printf_i+0xf4>
 80048e2:	9e04      	ldr	r6, [sp, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00c      	beq.n	8004902 <_printf_i+0x10e>
 80048e8:	9e04      	ldr	r6, [sp, #16]
 80048ea:	0028      	movs	r0, r5
 80048ec:	0039      	movs	r1, r7
 80048ee:	f7fb fc9b 	bl	8000228 <__aeabi_uidivmod>
 80048f2:	9b03      	ldr	r3, [sp, #12]
 80048f4:	3e01      	subs	r6, #1
 80048f6:	5c5b      	ldrb	r3, [r3, r1]
 80048f8:	7033      	strb	r3, [r6, #0]
 80048fa:	002b      	movs	r3, r5
 80048fc:	0005      	movs	r5, r0
 80048fe:	429f      	cmp	r7, r3
 8004900:	d9f3      	bls.n	80048ea <_printf_i+0xf6>
 8004902:	2f08      	cmp	r7, #8
 8004904:	d109      	bne.n	800491a <_printf_i+0x126>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d506      	bpl.n	800491a <_printf_i+0x126>
 800490c:	6862      	ldr	r2, [r4, #4]
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	429a      	cmp	r2, r3
 8004912:	dc02      	bgt.n	800491a <_printf_i+0x126>
 8004914:	2330      	movs	r3, #48	; 0x30
 8004916:	3e01      	subs	r6, #1
 8004918:	7033      	strb	r3, [r6, #0]
 800491a:	9b04      	ldr	r3, [sp, #16]
 800491c:	1b9b      	subs	r3, r3, r6
 800491e:	6123      	str	r3, [r4, #16]
 8004920:	9b07      	ldr	r3, [sp, #28]
 8004922:	0021      	movs	r1, r4
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	9805      	ldr	r0, [sp, #20]
 8004928:	9b06      	ldr	r3, [sp, #24]
 800492a:	aa09      	add	r2, sp, #36	; 0x24
 800492c:	f7ff fef2 	bl	8004714 <_printf_common>
 8004930:	3001      	adds	r0, #1
 8004932:	d147      	bne.n	80049c4 <_printf_i+0x1d0>
 8004934:	2001      	movs	r0, #1
 8004936:	4240      	negs	r0, r0
 8004938:	b00b      	add	sp, #44	; 0x2c
 800493a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800493c:	2220      	movs	r2, #32
 800493e:	6809      	ldr	r1, [r1, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	6022      	str	r2, [r4, #0]
 8004944:	2278      	movs	r2, #120	; 0x78
 8004946:	4932      	ldr	r1, [pc, #200]	; (8004a10 <_printf_i+0x21c>)
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	0021      	movs	r1, r4
 800494c:	3145      	adds	r1, #69	; 0x45
 800494e:	700a      	strb	r2, [r1, #0]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	c920      	ldmia	r1!, {r5}
 8004956:	0610      	lsls	r0, r2, #24
 8004958:	d402      	bmi.n	8004960 <_printf_i+0x16c>
 800495a:	0650      	lsls	r0, r2, #25
 800495c:	d500      	bpl.n	8004960 <_printf_i+0x16c>
 800495e:	b2ad      	uxth	r5, r5
 8004960:	6019      	str	r1, [r3, #0]
 8004962:	07d3      	lsls	r3, r2, #31
 8004964:	d502      	bpl.n	800496c <_printf_i+0x178>
 8004966:	2320      	movs	r3, #32
 8004968:	4313      	orrs	r3, r2
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	2710      	movs	r7, #16
 800496e:	2d00      	cmp	r5, #0
 8004970:	d1a9      	bne.n	80048c6 <_printf_i+0xd2>
 8004972:	2220      	movs	r2, #32
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	4393      	bics	r3, r2
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	e7a4      	b.n	80048c6 <_printf_i+0xd2>
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	680d      	ldr	r5, [r1, #0]
 8004980:	1d10      	adds	r0, r2, #4
 8004982:	6949      	ldr	r1, [r1, #20]
 8004984:	6018      	str	r0, [r3, #0]
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	062e      	lsls	r6, r5, #24
 800498a:	d501      	bpl.n	8004990 <_printf_i+0x19c>
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	e002      	b.n	8004996 <_printf_i+0x1a2>
 8004990:	066d      	lsls	r5, r5, #25
 8004992:	d5fb      	bpl.n	800498c <_printf_i+0x198>
 8004994:	8019      	strh	r1, [r3, #0]
 8004996:	2300      	movs	r3, #0
 8004998:	9e04      	ldr	r6, [sp, #16]
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	e7c0      	b.n	8004920 <_printf_i+0x12c>
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	1d11      	adds	r1, r2, #4
 80049a2:	6019      	str	r1, [r3, #0]
 80049a4:	6816      	ldr	r6, [r2, #0]
 80049a6:	2100      	movs	r1, #0
 80049a8:	0030      	movs	r0, r6
 80049aa:	6862      	ldr	r2, [r4, #4]
 80049ac:	f000 f9a0 	bl	8004cf0 <memchr>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d001      	beq.n	80049b8 <_printf_i+0x1c4>
 80049b4:	1b80      	subs	r0, r0, r6
 80049b6:	6060      	str	r0, [r4, #4]
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	2300      	movs	r3, #0
 80049be:	9a04      	ldr	r2, [sp, #16]
 80049c0:	7013      	strb	r3, [r2, #0]
 80049c2:	e7ad      	b.n	8004920 <_printf_i+0x12c>
 80049c4:	0032      	movs	r2, r6
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	9906      	ldr	r1, [sp, #24]
 80049ca:	9805      	ldr	r0, [sp, #20]
 80049cc:	9d07      	ldr	r5, [sp, #28]
 80049ce:	47a8      	blx	r5
 80049d0:	3001      	adds	r0, #1
 80049d2:	d0af      	beq.n	8004934 <_printf_i+0x140>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	079b      	lsls	r3, r3, #30
 80049d8:	d415      	bmi.n	8004a06 <_printf_i+0x212>
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	68e0      	ldr	r0, [r4, #12]
 80049de:	4298      	cmp	r0, r3
 80049e0:	daaa      	bge.n	8004938 <_printf_i+0x144>
 80049e2:	0018      	movs	r0, r3
 80049e4:	e7a8      	b.n	8004938 <_printf_i+0x144>
 80049e6:	0022      	movs	r2, r4
 80049e8:	2301      	movs	r3, #1
 80049ea:	9906      	ldr	r1, [sp, #24]
 80049ec:	9805      	ldr	r0, [sp, #20]
 80049ee:	9e07      	ldr	r6, [sp, #28]
 80049f0:	3219      	adds	r2, #25
 80049f2:	47b0      	blx	r6
 80049f4:	3001      	adds	r0, #1
 80049f6:	d09d      	beq.n	8004934 <_printf_i+0x140>
 80049f8:	3501      	adds	r5, #1
 80049fa:	68e3      	ldr	r3, [r4, #12]
 80049fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	dcf0      	bgt.n	80049e6 <_printf_i+0x1f2>
 8004a04:	e7e9      	b.n	80049da <_printf_i+0x1e6>
 8004a06:	2500      	movs	r5, #0
 8004a08:	e7f7      	b.n	80049fa <_printf_i+0x206>
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	08005001 	.word	0x08005001
 8004a10:	08005012 	.word	0x08005012

08004a14 <__sflush_r>:
 8004a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a16:	898b      	ldrh	r3, [r1, #12]
 8004a18:	0005      	movs	r5, r0
 8004a1a:	000c      	movs	r4, r1
 8004a1c:	071a      	lsls	r2, r3, #28
 8004a1e:	d45c      	bmi.n	8004ada <__sflush_r+0xc6>
 8004a20:	684a      	ldr	r2, [r1, #4]
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	dc04      	bgt.n	8004a30 <__sflush_r+0x1c>
 8004a26:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004a28:	2a00      	cmp	r2, #0
 8004a2a:	dc01      	bgt.n	8004a30 <__sflush_r+0x1c>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a32:	2f00      	cmp	r7, #0
 8004a34:	d0fa      	beq.n	8004a2c <__sflush_r+0x18>
 8004a36:	2200      	movs	r2, #0
 8004a38:	2080      	movs	r0, #128	; 0x80
 8004a3a:	682e      	ldr	r6, [r5, #0]
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	001a      	movs	r2, r3
 8004a40:	0140      	lsls	r0, r0, #5
 8004a42:	6a21      	ldr	r1, [r4, #32]
 8004a44:	4002      	ands	r2, r0
 8004a46:	4203      	tst	r3, r0
 8004a48:	d034      	beq.n	8004ab4 <__sflush_r+0xa0>
 8004a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	075b      	lsls	r3, r3, #29
 8004a50:	d506      	bpl.n	8004a60 <__sflush_r+0x4c>
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <__sflush_r+0x4c>
 8004a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a5e:	1ac0      	subs	r0, r0, r3
 8004a60:	0002      	movs	r2, r0
 8004a62:	2300      	movs	r3, #0
 8004a64:	0028      	movs	r0, r5
 8004a66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a68:	6a21      	ldr	r1, [r4, #32]
 8004a6a:	47b8      	blx	r7
 8004a6c:	89a2      	ldrh	r2, [r4, #12]
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	d106      	bne.n	8004a80 <__sflush_r+0x6c>
 8004a72:	6829      	ldr	r1, [r5, #0]
 8004a74:	291d      	cmp	r1, #29
 8004a76:	d82c      	bhi.n	8004ad2 <__sflush_r+0xbe>
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <__sflush_r+0x110>)
 8004a7a:	410b      	asrs	r3, r1
 8004a7c:	07db      	lsls	r3, r3, #31
 8004a7e:	d428      	bmi.n	8004ad2 <__sflush_r+0xbe>
 8004a80:	2300      	movs	r3, #0
 8004a82:	6063      	str	r3, [r4, #4]
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	04d2      	lsls	r2, r2, #19
 8004a8a:	d505      	bpl.n	8004a98 <__sflush_r+0x84>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <__sflush_r+0x82>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d100      	bne.n	8004a98 <__sflush_r+0x84>
 8004a96:	6560      	str	r0, [r4, #84]	; 0x54
 8004a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a9a:	602e      	str	r6, [r5, #0]
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	d0c5      	beq.n	8004a2c <__sflush_r+0x18>
 8004aa0:	0023      	movs	r3, r4
 8004aa2:	3344      	adds	r3, #68	; 0x44
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	d002      	beq.n	8004aae <__sflush_r+0x9a>
 8004aa8:	0028      	movs	r0, r5
 8004aaa:	f7ff fbf1 	bl	8004290 <_free_r>
 8004aae:	2000      	movs	r0, #0
 8004ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ab2:	e7bc      	b.n	8004a2e <__sflush_r+0x1a>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	0028      	movs	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d1c6      	bne.n	8004a4c <__sflush_r+0x38>
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0c3      	beq.n	8004a4c <__sflush_r+0x38>
 8004ac4:	2b1d      	cmp	r3, #29
 8004ac6:	d001      	beq.n	8004acc <__sflush_r+0xb8>
 8004ac8:	2b16      	cmp	r3, #22
 8004aca:	d101      	bne.n	8004ad0 <__sflush_r+0xbc>
 8004acc:	602e      	str	r6, [r5, #0]
 8004ace:	e7ad      	b.n	8004a2c <__sflush_r+0x18>
 8004ad0:	89a2      	ldrh	r2, [r4, #12]
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	e7a9      	b.n	8004a2e <__sflush_r+0x1a>
 8004ada:	690e      	ldr	r6, [r1, #16]
 8004adc:	2e00      	cmp	r6, #0
 8004ade:	d0a5      	beq.n	8004a2c <__sflush_r+0x18>
 8004ae0:	680f      	ldr	r7, [r1, #0]
 8004ae2:	600e      	str	r6, [r1, #0]
 8004ae4:	1bba      	subs	r2, r7, r6
 8004ae6:	9201      	str	r2, [sp, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	079b      	lsls	r3, r3, #30
 8004aec:	d100      	bne.n	8004af0 <__sflush_r+0xdc>
 8004aee:	694a      	ldr	r2, [r1, #20]
 8004af0:	60a2      	str	r2, [r4, #8]
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dd99      	ble.n	8004a2c <__sflush_r+0x18>
 8004af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004afa:	0032      	movs	r2, r6
 8004afc:	001f      	movs	r7, r3
 8004afe:	0028      	movs	r0, r5
 8004b00:	9b01      	ldr	r3, [sp, #4]
 8004b02:	6a21      	ldr	r1, [r4, #32]
 8004b04:	47b8      	blx	r7
 8004b06:	2800      	cmp	r0, #0
 8004b08:	dc06      	bgt.n	8004b18 <__sflush_r+0x104>
 8004b0a:	2340      	movs	r3, #64	; 0x40
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	89a2      	ldrh	r2, [r4, #12]
 8004b10:	4240      	negs	r0, r0
 8004b12:	4313      	orrs	r3, r2
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	e78a      	b.n	8004a2e <__sflush_r+0x1a>
 8004b18:	9b01      	ldr	r3, [sp, #4]
 8004b1a:	1836      	adds	r6, r6, r0
 8004b1c:	1a1b      	subs	r3, r3, r0
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	e7e7      	b.n	8004af2 <__sflush_r+0xde>
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	dfbffffe 	.word	0xdfbffffe

08004b28 <_fflush_r>:
 8004b28:	690b      	ldr	r3, [r1, #16]
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	0005      	movs	r5, r0
 8004b2e:	000c      	movs	r4, r1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <_fflush_r+0x12>
 8004b34:	2500      	movs	r5, #0
 8004b36:	0028      	movs	r0, r5
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d004      	beq.n	8004b48 <_fflush_r+0x20>
 8004b3e:	6a03      	ldr	r3, [r0, #32]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <_fflush_r+0x20>
 8004b44:	f7ff fa90 	bl	8004068 <__sinit>
 8004b48:	220c      	movs	r2, #12
 8004b4a:	5ea3      	ldrsh	r3, [r4, r2]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f1      	beq.n	8004b34 <_fflush_r+0xc>
 8004b50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b52:	07d2      	lsls	r2, r2, #31
 8004b54:	d404      	bmi.n	8004b60 <_fflush_r+0x38>
 8004b56:	059b      	lsls	r3, r3, #22
 8004b58:	d402      	bmi.n	8004b60 <_fflush_r+0x38>
 8004b5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5c:	f7ff fb95 	bl	800428a <__retarget_lock_acquire_recursive>
 8004b60:	0028      	movs	r0, r5
 8004b62:	0021      	movs	r1, r4
 8004b64:	f7ff ff56 	bl	8004a14 <__sflush_r>
 8004b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b6a:	0005      	movs	r5, r0
 8004b6c:	07db      	lsls	r3, r3, #31
 8004b6e:	d4e2      	bmi.n	8004b36 <_fflush_r+0xe>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	059b      	lsls	r3, r3, #22
 8004b74:	d4df      	bmi.n	8004b36 <_fflush_r+0xe>
 8004b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b78:	f7ff fb88 	bl	800428c <__retarget_lock_release_recursive>
 8004b7c:	e7db      	b.n	8004b36 <_fflush_r+0xe>

08004b7e <__swbuf_r>:
 8004b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b80:	0006      	movs	r6, r0
 8004b82:	000d      	movs	r5, r1
 8004b84:	0014      	movs	r4, r2
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d004      	beq.n	8004b94 <__swbuf_r+0x16>
 8004b8a:	6a03      	ldr	r3, [r0, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <__swbuf_r+0x16>
 8004b90:	f7ff fa6a 	bl	8004068 <__sinit>
 8004b94:	69a3      	ldr	r3, [r4, #24]
 8004b96:	60a3      	str	r3, [r4, #8]
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	071b      	lsls	r3, r3, #28
 8004b9c:	d528      	bpl.n	8004bf0 <__swbuf_r+0x72>
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d025      	beq.n	8004bf0 <__swbuf_r+0x72>
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	6820      	ldr	r0, [r4, #0]
 8004ba8:	b2ef      	uxtb	r7, r5
 8004baa:	1ac0      	subs	r0, r0, r3
 8004bac:	6963      	ldr	r3, [r4, #20]
 8004bae:	b2ed      	uxtb	r5, r5
 8004bb0:	4283      	cmp	r3, r0
 8004bb2:	dc05      	bgt.n	8004bc0 <__swbuf_r+0x42>
 8004bb4:	0021      	movs	r1, r4
 8004bb6:	0030      	movs	r0, r6
 8004bb8:	f7ff ffb6 	bl	8004b28 <_fflush_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d11d      	bne.n	8004bfc <__swbuf_r+0x7e>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60a3      	str	r3, [r4, #8]
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	6022      	str	r2, [r4, #0]
 8004bce:	701f      	strb	r7, [r3, #0]
 8004bd0:	6963      	ldr	r3, [r4, #20]
 8004bd2:	4283      	cmp	r3, r0
 8004bd4:	d004      	beq.n	8004be0 <__swbuf_r+0x62>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d507      	bpl.n	8004bec <__swbuf_r+0x6e>
 8004bdc:	2d0a      	cmp	r5, #10
 8004bde:	d105      	bne.n	8004bec <__swbuf_r+0x6e>
 8004be0:	0021      	movs	r1, r4
 8004be2:	0030      	movs	r0, r6
 8004be4:	f7ff ffa0 	bl	8004b28 <_fflush_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d107      	bne.n	8004bfc <__swbuf_r+0x7e>
 8004bec:	0028      	movs	r0, r5
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf0:	0021      	movs	r1, r4
 8004bf2:	0030      	movs	r0, r6
 8004bf4:	f000 f806 	bl	8004c04 <__swsetup_r>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d0d3      	beq.n	8004ba4 <__swbuf_r+0x26>
 8004bfc:	2501      	movs	r5, #1
 8004bfe:	426d      	negs	r5, r5
 8004c00:	e7f4      	b.n	8004bec <__swbuf_r+0x6e>
	...

08004c04 <__swsetup_r>:
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <__swsetup_r+0xc4>)
 8004c06:	b570      	push	{r4, r5, r6, lr}
 8004c08:	0005      	movs	r5, r0
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	000c      	movs	r4, r1
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d004      	beq.n	8004c1c <__swsetup_r+0x18>
 8004c12:	6a03      	ldr	r3, [r0, #32]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <__swsetup_r+0x18>
 8004c18:	f7ff fa26 	bl	8004068 <__sinit>
 8004c1c:	230c      	movs	r3, #12
 8004c1e:	5ee2      	ldrsh	r2, [r4, r3]
 8004c20:	b293      	uxth	r3, r2
 8004c22:	0711      	lsls	r1, r2, #28
 8004c24:	d423      	bmi.n	8004c6e <__swsetup_r+0x6a>
 8004c26:	06d9      	lsls	r1, r3, #27
 8004c28:	d407      	bmi.n	8004c3a <__swsetup_r+0x36>
 8004c2a:	2309      	movs	r3, #9
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	3337      	adds	r3, #55	; 0x37
 8004c32:	4313      	orrs	r3, r2
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	4240      	negs	r0, r0
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	075b      	lsls	r3, r3, #29
 8004c3c:	d513      	bpl.n	8004c66 <__swsetup_r+0x62>
 8004c3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c40:	2900      	cmp	r1, #0
 8004c42:	d008      	beq.n	8004c56 <__swsetup_r+0x52>
 8004c44:	0023      	movs	r3, r4
 8004c46:	3344      	adds	r3, #68	; 0x44
 8004c48:	4299      	cmp	r1, r3
 8004c4a:	d002      	beq.n	8004c52 <__swsetup_r+0x4e>
 8004c4c:	0028      	movs	r0, r5
 8004c4e:	f7ff fb1f 	bl	8004290 <_free_r>
 8004c52:	2300      	movs	r3, #0
 8004c54:	6363      	str	r3, [r4, #52]	; 0x34
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6063      	str	r3, [r4, #4]
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	2308      	movs	r3, #8
 8004c68:	89a2      	ldrh	r2, [r4, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <__swsetup_r+0x88>
 8004c74:	21a0      	movs	r1, #160	; 0xa0
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	0089      	lsls	r1, r1, #2
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	400b      	ands	r3, r1
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <__swsetup_r+0x88>
 8004c84:	0021      	movs	r1, r4
 8004c86:	0028      	movs	r0, r5
 8004c88:	f000 f866 	bl	8004d58 <__smakebuf_r>
 8004c8c:	220c      	movs	r2, #12
 8004c8e:	5ea3      	ldrsh	r3, [r4, r2]
 8004c90:	2001      	movs	r0, #1
 8004c92:	001a      	movs	r2, r3
 8004c94:	b299      	uxth	r1, r3
 8004c96:	4002      	ands	r2, r0
 8004c98:	4203      	tst	r3, r0
 8004c9a:	d00f      	beq.n	8004cbc <__swsetup_r+0xb8>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60a2      	str	r2, [r4, #8]
 8004ca0:	6962      	ldr	r2, [r4, #20]
 8004ca2:	4252      	negs	r2, r2
 8004ca4:	61a2      	str	r2, [r4, #24]
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	4282      	cmp	r2, r0
 8004cac:	d1c4      	bne.n	8004c38 <__swsetup_r+0x34>
 8004cae:	0609      	lsls	r1, r1, #24
 8004cb0:	d5c2      	bpl.n	8004c38 <__swsetup_r+0x34>
 8004cb2:	2240      	movs	r2, #64	; 0x40
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	3801      	subs	r0, #1
 8004cba:	e7bd      	b.n	8004c38 <__swsetup_r+0x34>
 8004cbc:	0788      	lsls	r0, r1, #30
 8004cbe:	d400      	bmi.n	8004cc2 <__swsetup_r+0xbe>
 8004cc0:	6962      	ldr	r2, [r4, #20]
 8004cc2:	60a2      	str	r2, [r4, #8]
 8004cc4:	e7ef      	b.n	8004ca6 <__swsetup_r+0xa2>
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20000064 	.word	0x20000064

08004ccc <_sbrk_r>:
 8004ccc:	2300      	movs	r3, #0
 8004cce:	b570      	push	{r4, r5, r6, lr}
 8004cd0:	4d06      	ldr	r5, [pc, #24]	; (8004cec <_sbrk_r+0x20>)
 8004cd2:	0004      	movs	r4, r0
 8004cd4:	0008      	movs	r0, r1
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	f7fc f8e8 	bl	8000eac <_sbrk>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d103      	bne.n	8004ce8 <_sbrk_r+0x1c>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d000      	beq.n	8004ce8 <_sbrk_r+0x1c>
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	20000330 	.word	0x20000330

08004cf0 <memchr>:
 8004cf0:	b2c9      	uxtb	r1, r1
 8004cf2:	1882      	adds	r2, r0, r2
 8004cf4:	4290      	cmp	r0, r2
 8004cf6:	d101      	bne.n	8004cfc <memchr+0xc>
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	4770      	bx	lr
 8004cfc:	7803      	ldrb	r3, [r0, #0]
 8004cfe:	428b      	cmp	r3, r1
 8004d00:	d0fb      	beq.n	8004cfa <memchr+0xa>
 8004d02:	3001      	adds	r0, #1
 8004d04:	e7f6      	b.n	8004cf4 <memchr+0x4>
	...

08004d08 <__swhatbuf_r>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	000e      	movs	r6, r1
 8004d0c:	001d      	movs	r5, r3
 8004d0e:	230e      	movs	r3, #14
 8004d10:	5ec9      	ldrsh	r1, [r1, r3]
 8004d12:	0014      	movs	r4, r2
 8004d14:	b096      	sub	sp, #88	; 0x58
 8004d16:	2900      	cmp	r1, #0
 8004d18:	da0c      	bge.n	8004d34 <__swhatbuf_r+0x2c>
 8004d1a:	89b2      	ldrh	r2, [r6, #12]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	0011      	movs	r1, r2
 8004d20:	4019      	ands	r1, r3
 8004d22:	421a      	tst	r2, r3
 8004d24:	d013      	beq.n	8004d4e <__swhatbuf_r+0x46>
 8004d26:	2100      	movs	r1, #0
 8004d28:	3b40      	subs	r3, #64	; 0x40
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	6029      	str	r1, [r5, #0]
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	b016      	add	sp, #88	; 0x58
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	466a      	mov	r2, sp
 8004d36:	f000 f84d 	bl	8004dd4 <_fstat_r>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	dbed      	blt.n	8004d1a <__swhatbuf_r+0x12>
 8004d3e:	23f0      	movs	r3, #240	; 0xf0
 8004d40:	9901      	ldr	r1, [sp, #4]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	4019      	ands	r1, r3
 8004d46:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <__swhatbuf_r+0x4c>)
 8004d48:	18c9      	adds	r1, r1, r3
 8004d4a:	424b      	negs	r3, r1
 8004d4c:	4159      	adcs	r1, r3
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	e7ea      	b.n	8004d2a <__swhatbuf_r+0x22>
 8004d54:	ffffe000 	.word	0xffffe000

08004d58 <__smakebuf_r>:
 8004d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d5a:	2602      	movs	r6, #2
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	0005      	movs	r5, r0
 8004d60:	000c      	movs	r4, r1
 8004d62:	4233      	tst	r3, r6
 8004d64:	d006      	beq.n	8004d74 <__smakebuf_r+0x1c>
 8004d66:	0023      	movs	r3, r4
 8004d68:	3347      	adds	r3, #71	; 0x47
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	6163      	str	r3, [r4, #20]
 8004d72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d74:	466a      	mov	r2, sp
 8004d76:	ab01      	add	r3, sp, #4
 8004d78:	f7ff ffc6 	bl	8004d08 <__swhatbuf_r>
 8004d7c:	9900      	ldr	r1, [sp, #0]
 8004d7e:	0007      	movs	r7, r0
 8004d80:	0028      	movs	r0, r5
 8004d82:	f7ff faf1 	bl	8004368 <_malloc_r>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d108      	bne.n	8004d9c <__smakebuf_r+0x44>
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	5ea3      	ldrsh	r3, [r4, r2]
 8004d8e:	059a      	lsls	r2, r3, #22
 8004d90:	d4ef      	bmi.n	8004d72 <__smakebuf_r+0x1a>
 8004d92:	2203      	movs	r2, #3
 8004d94:	4393      	bics	r3, r2
 8004d96:	431e      	orrs	r6, r3
 8004d98:	81a6      	strh	r6, [r4, #12]
 8004d9a:	e7e4      	b.n	8004d66 <__smakebuf_r+0xe>
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	89a2      	ldrh	r2, [r4, #12]
 8004da0:	6020      	str	r0, [r4, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	6120      	str	r0, [r4, #16]
 8004daa:	6163      	str	r3, [r4, #20]
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00c      	beq.n	8004dcc <__smakebuf_r+0x74>
 8004db2:	0028      	movs	r0, r5
 8004db4:	230e      	movs	r3, #14
 8004db6:	5ee1      	ldrsh	r1, [r4, r3]
 8004db8:	f000 f81e 	bl	8004df8 <_isatty_r>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d005      	beq.n	8004dcc <__smakebuf_r+0x74>
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	89a2      	ldrh	r2, [r4, #12]
 8004dc4:	439a      	bics	r2, r3
 8004dc6:	3b02      	subs	r3, #2
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	433b      	orrs	r3, r7
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	e7ce      	b.n	8004d72 <__smakebuf_r+0x1a>

08004dd4 <_fstat_r>:
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	b570      	push	{r4, r5, r6, lr}
 8004dd8:	4d06      	ldr	r5, [pc, #24]	; (8004df4 <_fstat_r+0x20>)
 8004dda:	0004      	movs	r4, r0
 8004ddc:	0008      	movs	r0, r1
 8004dde:	0011      	movs	r1, r2
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	f7fc f841 	bl	8000e68 <_fstat>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d103      	bne.n	8004df2 <_fstat_r+0x1e>
 8004dea:	682b      	ldr	r3, [r5, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d000      	beq.n	8004df2 <_fstat_r+0x1e>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	20000330 	.word	0x20000330

08004df8 <_isatty_r>:
 8004df8:	2300      	movs	r3, #0
 8004dfa:	b570      	push	{r4, r5, r6, lr}
 8004dfc:	4d06      	ldr	r5, [pc, #24]	; (8004e18 <_isatty_r+0x20>)
 8004dfe:	0004      	movs	r4, r0
 8004e00:	0008      	movs	r0, r1
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	f7fc f83e 	bl	8000e84 <_isatty>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_isatty_r+0x1c>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d000      	beq.n	8004e14 <_isatty_r+0x1c>
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	20000330 	.word	0x20000330

08004e1c <_init>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr

08004e28 <_fini>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr
